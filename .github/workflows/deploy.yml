name: Deploy to Self-Hosted Server
on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    environment: production # Use GitHub Environment for better secret management
    steps:
      - name: Ensure Deployment Directory Exists
        run: |
          mkdir -p ~/products/elimika
      - name: Checkout Repository into Deployment Directory
        uses: actions/checkout@v3
        with:
          path: ~/products/elimika
      - name: Create .env File from .env.sample and Secrets
        env:
          # Database Configuration
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          # OAuth/JWT Configuration
          SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${{ secrets.SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI }}
          SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${{ secrets.SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI }}
          # Keycloak Configuration
          APP_KEYCLOAK_REALM: ${{ secrets.APP_KEYCLOAK_REALM }}
          APP_KEYCLOAK_SERVER_URL: ${{ secrets.APP_KEYCLOAK_SERVER_URL }}
          APP_KEYCLOAK_ADMIN_CLIENTID: ${{ secrets.APP_KEYCLOAK_ADMIN_CLIENTID }}
          APP_KEYCLOAK_ADMIN_CLIENTSECRET: ${{ secrets.APP_KEYCLOAK_ADMIN_CLIENTSECRET }}
          # Encryption Configuration
          ENCRYPTION_SECRET_KEY: ${{ secrets.ENCRYPTION_SECRET_KEY }}
          ENCRYPTION_SALT: ${{ secrets.ENCRYPTION_SALT }}
          # Mail Server Configuration
          MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
          MAIL_SERVER_PORT: ${{ secrets.MAIL_SERVER_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          STORAGE_PATH: ${{ secrets.STORAGE_PATH }}
          MAIL_ENABLED: ${{ secrets.MAIL_ENABLED }}
        run: |
          cd ~/products/elimika
          
          # Copy .env.sample from docker folder and replace placeholders
          cp docker/.env.sample .env
          
          # Replace placeholders with actual secret values using environment variables
          sed -i "s|<DB_HOST>:<DB_PORT>/<DB_NAME>|${SPRING_DATASOURCE_URL}|g" .env
          sed -i "s|<DB_USERNAME>|${SPRING_DATASOURCE_USERNAME}|g" .env
          sed -i "s|<DB_PASSWORD>|${SPRING_DATASOURCE_PASSWORD}|g" .env
          sed -i "s|<OAUTH_ISSUER_URI>|${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI}|g" .env
          sed -i "s|<OAUTH_JWK_SET_URI>|${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI}|g" .env
          sed -i "s|<KEYCLOAK_REALM>|${APP_KEYCLOAK_REALM}|g" .env
          sed -i "s|<KEYCLOAK_SERVER_URL>|${APP_KEYCLOAK_SERVER_URL}|g" .env
          sed -i "s|<KEYCLOAK_ADMIN_CLIENTID>|${APP_KEYCLOAK_ADMIN_CLIENTID}|g" .env
          sed -i "s|<KEYCLOAK_ADMIN_CLIENTSECRET>|${APP_KEYCLOAK_ADMIN_CLIENTSECRET}|g" .env
          sed -i "s|<ENCRYPTION_SECRET_KEY>|${ENCRYPTION_SECRET_KEY}|g" .env
          sed -i "s|<ENCRYPTION_SALT>|${ENCRYPTION_SALT}|g" .env
          sed -i "s|<YOUR_EMAIL@GMAIL.COM>|${MAIL_USERNAME}|g" .env
          sed -i "s|<YOUR_APP_PASSWORD>|${MAIL_PASSWORD}|g" .env
          sed -i "s|<CUSTOM_STORAGE_PATH>|${STORAGE_PATH}|g" .env
          
          # Handle optional values with defaults if secrets are empty
          if [ -n "${MAIL_SERVER}" ]; then
            sed -i "s|smtp.gmail.com|${MAIL_SERVER}|g" .env
          fi
          if [ -n "${MAIL_SERVER_PORT}" ]; then
            sed -i "s|587|${MAIL_SERVER_PORT}|g" .env
          fi
          if [ -n "${MAIL_ENABLED}" ]; then
            sed -i "s|true                   # optional|${MAIL_ENABLED}|g" .env
          fi
          
          echo "Created .env file from docker/.env.sample with secret values."
          echo "Environment variables configured:"
          cat .env | sed 's/=.*/=***/' # Show variables but hide values
      - name: Copy and Configure Docker Compose File
        run: |
          cd ~/products/elimika
          
          # Copy docker-compose.yaml from docker folder to deployment directory
          cp docker/docker-compose.yaml .
          
          # Replace DOCKER_USERNAME placeholder with actual value
          sed -i "s|\${DOCKER_USERNAME:-defaultuser}|${{ secrets.DOCKER_USERNAME }}|g" docker-compose.yaml
          
          echo "Copied and configured docker-compose.yaml from docker folder."
      - name: Pull Latest Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/elimika:latest
      - name: Ensure Network Exists
        run: |
          if ! docker network ls | grep -q sarafrika; then
            echo "Creating sarafrika network..."
            docker network create sarafrika
          else
            echo "sarafrika network already exists."
          fi
      - name: Stop and Remove Existing Containers
        run: |
          cd ~/products/elimika
          docker compose down
      - name: Start Services with Docker Compose
        run: |
          cd ~/products/elimika
          docker compose up -d --force-recreate --remove-orphans