name: Deploy to Self-Hosted Server
on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      deployment_reason:
        description: 'Reason for manual deployment (optional)'
        required: false
        default: 'Manual deployment'
        type: string
      skip_validation:
        description: 'Skip environment validation (use with caution)'
        required: false
        default: false
        type: boolean
      force_recreate:
        description: 'Force recreate all containers'
        required: false
        default: true
        type: boolean

jobs:
  deploy:
    # For workflow_run: only deploy if the triggering workflow succeeded
    # For workflow_dispatch: always deploy
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    steps:
      - name: Deployment Context
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "üöÄ Manual Deployment Triggered"
            echo "Reason: ${{ github.event.inputs.deployment_reason }}"
            echo "Skip validation: ${{ github.event.inputs.skip_validation }}"
            echo "Force recreate: ${{ github.event.inputs.force_recreate }}"
          else
            echo "üîÑ Automatic Deployment (triggered by successful build)"
            echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
          fi
          echo ""

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Ensure Deployment Directory Exists
        run: |
          mkdir -p ~/products/elimika

      - name: Validate Environment Configuration
        if: ${{ github.event_name == 'workflow_run' || github.event.inputs.skip_validation == 'false' }}
        run: |
          # Work in the GitHub workspace where files are checked out
          WORKSPACE_DIR="${GITHUB_WORKSPACE}"
          DEPLOY_DIR="$HOME/products/elimika"
          
          echo "üîç Working from: $WORKSPACE_DIR"
          echo "üè† Deploying to: $DEPLOY_DIR"
          
          # Check if .env.sample exists in workspace
          if [ ! -f "$WORKSPACE_DIR/docker/.env.sample" ]; then
            echo "‚ùå docker/.env.sample not found in repository!"
            echo "Repository structure:"
            ls -la "$WORKSPACE_DIR"
            if [ -d "$WORKSPACE_DIR/docker" ]; then
              echo "Docker folder contents:"
              ls -la "$WORKSPACE_DIR/docker"
            fi
            exit 1
          fi
          
          echo "‚úÖ Found docker/.env.sample in repository"
          
          # Check if .env exists in deployment directory
          if [ ! -f "$DEPLOY_DIR/.env" ]; then
            echo "üìã .env file not found in deployment directory. Creating from sample..."
            cp "$WORKSPACE_DIR/docker/.env.sample" "$DEPLOY_DIR/.env"
            echo "‚úÖ Created .env file from repository sample"
            echo ""
            echo "‚ö†Ô∏è  DEPLOYMENT PAUSED: Please configure the following environment variables in $DEPLOY_DIR/.env:"
            echo ""
            grep -E '^[A-Z_]+=<.*>$' "$DEPLOY_DIR/.env" | sed 's/=<.*>//' | sed 's/^/  - /'
            echo ""
            echo "After updating the .env file, re-run this workflow."
            exit 1
          fi
          
          # Validate existing .env against .env.sample from repository
          echo "üîç Validating existing .env file against repository sample..."
          
          # Extract property names from repository .env.sample
          sample_props=$(grep -E '^[A-Z_]+=<.*>$' "$WORKSPACE_DIR/docker/.env.sample" | cut -d'=' -f1 | sort)
          
          # Extract property names from deployment .env
          existing_props=$(grep -E '^[A-Z_]+=' "$DEPLOY_DIR/.env" | cut -d'=' -f1 | sort)
          
          # Find missing properties
          missing_props=""
          for prop in $sample_props; do
            if ! echo "$existing_props" | grep -q "^$prop$"; then
              missing_props="$missing_props $prop"
            fi
          done
          
          # Find properties with placeholder values
          placeholder_props=""
          while IFS= read -r line; do
            if [[ $line =~ ^([A-Z_]+)=\<.*\>$ ]]; then
              prop_name="${BASH_REMATCH[1]}"
              if grep -q "^$prop_name=<.*>$" "$DEPLOY_DIR/.env"; then
                placeholder_props="$placeholder_props $prop_name"
              fi
            fi
          done < "$WORKSPACE_DIR/docker/.env.sample"
          
          # Check for any issues
          if [ -n "$missing_props" ] || [ -n "$placeholder_props" ]; then
            echo ""
            echo "‚ùå DEPLOYMENT FAILED: Environment configuration issues found!"
            echo ""
          
            if [ -n "$missing_props" ]; then
              echo "üìù Missing properties in .env file:"
              for prop in $missing_props; do
                sample_value=$(grep "^$prop=" "$WORKSPACE_DIR/docker/.env.sample" | cut -d'=' -f2-)
                echo "  - $prop=$sample_value"
              done
              echo ""
            fi
          
            if [ -n "$placeholder_props" ]; then
              echo "üîß Properties with placeholder values (need real values):"
              for prop in $placeholder_props; do
                echo "  - $prop"
              done
              echo ""
            fi
          
            echo "üìç Please update $DEPLOY_DIR/.env with the missing/placeholder values and re-run this workflow."
            echo ""
            echo "üí° Tip: You can copy missing properties from the repository's docker/.env.sample"
            echo "üöÄ Alternative: Use manual trigger with 'Skip validation' option for emergency deployments"
            exit 1
          fi
          
          # Validation successful
          echo "‚úÖ Environment validation passed!"
          echo "üìä Found $(echo "$existing_props" | wc -w) configured properties"
          
          # Show configured properties (without values for security)
          echo ""
          echo "üîß Configured environment variables:"
          echo "$existing_props" | sed 's/^/  ‚úì /'

      - name: Skip Validation Warning
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip_validation == 'true' }}
        run: |
          echo "‚ö†Ô∏è  WARNING: Environment validation was skipped!"
          echo "This deployment may fail if environment configuration is incomplete."
          echo "Use this option only for emergency deployments or when you're certain the configuration is correct."
          echo ""

      - name: Copy Compose File to Deployment Directory
        run: |
          WORKSPACE_DIR="${GITHUB_WORKSPACE}"
          DEPLOY_DIR="$HOME/products/elimika"
          
          # Simple copy of compose.yaml from repository to deployment directory
          if [ ! -f "$WORKSPACE_DIR/docker/compose.yaml" ]; then
            echo "‚ùå docker/compose.yaml not found in repository!"
            echo "Expected location: $WORKSPACE_DIR/docker/compose.yaml"
            exit 1
          fi
          
          cp "$WORKSPACE_DIR/docker/compose.yaml" "$DEPLOY_DIR/compose.yaml"
          echo "‚úÖ Copied compose.yaml from repository to deployment directory."

      - name: Pull Latest Docker Image
        run: |
          echo "üì• Pulling latest Docker image..."
          docker pull sarafrika/elimika:latest

      - name: Ensure Network Exists
        run: |
          if ! docker network ls | grep -q sarafrika; then
            echo "üåê Creating sarafrika network..."
            docker network create sarafrika
          else
            echo "‚úÖ sarafrika network already exists."
          fi

      - name: Stop and Remove Existing Containers
        run: |
          cd ~/products/elimika
          echo "üõë Stopping existing containers..."
          docker compose -f compose.yaml down

      - name: Start Services with Docker Compose
        run: |
          cd ~/products/elimika
          echo "üöÄ Starting services..."
          
          # Use force recreate option based on input (default true for manual, always true for auto)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.force_recreate }}" == "false" ]; then
            docker compose -f compose.yaml up -d
            echo "Started with existing containers (no force recreate)"
          else
            docker compose -f compose.yaml up -d --force-recreate --remove-orphans
            echo "Started with force recreate and orphan removal"
          fi
          
          echo ""
          echo "‚úÖ Deployment completed successfully!"
          echo "üåç Service should be available on port 30000"
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo ""
            echo "üöÄ Manual deployment details:"
            echo "  Reason: ${{ github.event.inputs.deployment_reason }}"
            echo "  Validation skipped: ${{ github.event.inputs.skip_validation }}"
            echo "  Force recreate: ${{ github.event.inputs.force_recreate }}"
          fi