name: Deploy to Self-Hosted Server
on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Ensure Deployment Directory Exists
        run: |
          mkdir -p ~/products/elimika

      - name: Validate Environment Configuration
        run: |
          # Work in the GitHub workspace where files are checked out
          WORKSPACE_DIR="${GITHUB_WORKSPACE}"
          DEPLOY_DIR="$HOME/products/elimika"
          
          echo "üîç Working from: $WORKSPACE_DIR"
          echo "üè† Deploying to: $DEPLOY_DIR"
          
          # Check if .env.sample exists in workspace
          if [ ! -f "$WORKSPACE_DIR/docker/.env.sample" ]; then
            echo "‚ùå docker/.env.sample not found in repository!"
            echo "Repository structure:"
            ls -la "$WORKSPACE_DIR"
            if [ -d "$WORKSPACE_DIR/docker" ]; then
              echo "Docker folder contents:"
              ls -la "$WORKSPACE_DIR/docker"
            fi
            exit 1
          fi
          
          echo "‚úÖ Found docker/.env.sample in repository"
          
          # Check if .env exists in deployment directory
          if [ ! -f "$DEPLOY_DIR/.env" ]; then
            echo "üìã .env file not found in deployment directory. Creating from sample..."
            cp "$WORKSPACE_DIR/docker/.env.sample" "$DEPLOY_DIR/.env"
            echo "‚úÖ Created .env file from repository sample"
            echo ""
            echo "‚ö†Ô∏è  DEPLOYMENT PAUSED: Please configure the following environment variables in $DEPLOY_DIR/.env:"
            echo ""
            grep -E '^[A-Z_]+=<.*>$' "$DEPLOY_DIR/.env" | sed 's/=<.*>//' | sed 's/^/  - /'
            echo ""
            echo "After updating the .env file, re-run this workflow."
            exit 1
          fi
          
          # Validate existing .env against .env.sample from repository
          echo "üîç Validating existing .env file against repository sample..."
          
          # Extract property names from repository .env.sample
          sample_props=$(grep -E '^[A-Z_]+=<.*>$' "$WORKSPACE_DIR/docker/.env.sample" | cut -d'=' -f1 | sort)
          
          # Extract property names from deployment .env
          existing_props=$(grep -E '^[A-Z_]+=' "$DEPLOY_DIR/.env" | cut -d'=' -f1 | sort)
          
          # Find missing properties
          missing_props=""
          for prop in $sample_props; do
            if ! echo "$existing_props" | grep -q "^$prop$"; then
              missing_props="$missing_props $prop"
            fi
          done
          
          # Find properties with placeholder values
          placeholder_props=""
          while IFS= read -r line; do
            if [[ $line =~ ^([A-Z_]+)=\<.*\>$ ]]; then
              prop_name="${BASH_REMATCH[1]}"
              if grep -q "^$prop_name=<.*>$" "$DEPLOY_DIR/.env"; then
                placeholder_props="$placeholder_props $prop_name"
              fi
            fi
          done < "$WORKSPACE_DIR/docker/.env.sample"
          
          # Check for any issues
          if [ -n "$missing_props" ] || [ -n "$placeholder_props" ]; then
            echo ""
            echo "‚ùå DEPLOYMENT FAILED: Environment configuration issues found!"
            echo ""
          
            if [ -n "$missing_props" ]; then
              echo "üìù Missing properties in .env file:"
              for prop in $missing_props; do
                sample_value=$(grep "^$prop=" "$WORKSPACE_DIR/docker/.env.sample" | cut -d'=' -f2-)
                echo "  - $prop=$sample_value"
              done
              echo ""
            fi
          
            if [ -n "$placeholder_props" ]; then
              echo "üîß Properties with placeholder values (need real values):"
              for prop in $placeholder_props; do
                echo "  - $prop"
              done
              echo ""
            fi
          
            echo "üìç Please update $DEPLOY_DIR/.env with the missing/placeholder values and re-run this workflow."
            echo ""
            echo "üí° Tip: You can copy missing properties from the repository's docker/.env.sample"
            exit 1
          fi
          
          # Validation successful
          echo "‚úÖ Environment validation passed!"
          echo "üìä Found $(echo "$existing_props" | wc -w) configured properties"
          
          # Show configured properties (without values for security)
          echo ""
          echo "üîß Configured environment variables:"
          echo "$existing_props" | sed 's/^/  ‚úì /'

      - name: Copy Docker Compose File to Deployment Directory
        run: |
          WORKSPACE_DIR="${GITHUB_WORKSPACE}"
          DEPLOY_DIR="$HOME/products/elimika"
          
          # Copy docker-compose.yaml from repository to deployment directory
          cp "$WORKSPACE_DIR/docker/docker-compose.yaml" "$DEPLOY_DIR/docker-compose.yaml"
          
          # Replace DOCKER_USERNAME if it's a placeholder
          if grep -q "\${DOCKER_USERNAME" "$DEPLOY_DIR/docker-compose.yaml"; then
            sed -i "s|\${DOCKER_USERNAME[^}]*}|${{ secrets.DOCKER_USERNAME }}|g" "$DEPLOY_DIR/docker-compose.yaml"
          fi
          
          echo "‚úÖ Docker Compose file configured in deployment directory."

      - name: Pull Latest Docker Image
        run: |
          echo "üì• Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/elimika:latest

      - name: Ensure Network Exists
        run: |
          if ! docker network ls | grep -q sarafrika; then
            echo "üåê Creating sarafrika network..."
            docker network create sarafrika
          else
            echo "‚úÖ sarafrika network already exists."
          fi

      - name: Stop and Remove Existing Containers
        run: |
          cd ~/products/elimika
          echo "üõë Stopping existing containers..."
          docker compose down

      - name: Start Services with Docker Compose
        run: |
          cd ~/products/elimika
          echo "üöÄ Starting services..."
          docker compose up -d --force-recreate --remove-orphans
          echo ""
          echo "‚úÖ Deployment completed successfully!"
          echo "üåç Service should be available on port 30000"