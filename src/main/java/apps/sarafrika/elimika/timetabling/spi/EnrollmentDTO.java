package apps.sarafrika.elimika.timetabling.spi;

import apps.sarafrika.elimika.timetabling.spi.EnrollmentStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Enrollment Data Transfer Object
 * <p>
 * Represents a student enrollment in a scheduled class instance in the Sarafrika Elimika 
 * timetabling system. This tracks the enrollment lifecycle from registration through 
 * attendance tracking.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-09-05
 */
@Schema(
        name = "Enrollment",
        description = "A student enrollment in a scheduled class instance with attendance tracking",
        example = """
        {
            "uuid": "en123456-7890-abcd-ef01-234567890abc",
            "scheduled_instance_uuid": "si123456-7890-abcd-ef01-234567890abc",
            "student_uuid": "st123456-7890-abcd-ef01-234567890abc",
            "status": "ENROLLED",
            "attendance_marked_at": null,
            "created_date": "2024-09-05T10:00:00",
            "updated_date": "2024-09-05T15:30:00",
            "created_by": "student@sarafrika.com",
            "updated_by": "instructor@sarafrika.com"
        }
        """
)
public record EnrollmentDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the enrollment. Auto-generated by the system.",
                example = "en123456-7890-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the scheduled instance UUID that the student is enrolling in.",
                example = "si123456-7890-abcd-ef01-234567890abc",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Scheduled instance UUID is required")
        @JsonProperty("scheduled_instance_uuid")
        UUID scheduledInstanceUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the student UUID who is enrolling.",
                example = "st123456-7890-abcd-ef01-234567890abc",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Student UUID is required")
        @JsonProperty("student_uuid")
        UUID studentUuid,

        @Schema(
                description = "**[OPTIONAL]** Current enrollment and attendance status.",
                example = "ENROLLED",
                allowableValues = {"ENROLLED", "ATTENDED", "ABSENT", "CANCELLED"},
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("status")
        EnrollmentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when attendance was marked for this enrollment.",
                example = "2024-09-15T09:15:00",
                format = "date-time",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("attendance_marked_at")
        LocalDateTime attendanceMarkedAt,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the enrollment was first created. Automatically set by the system.",
                example = "2024-09-05T10:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.",
                example = "2024-09-05T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this enrollment.",
                example = "student@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this enrollment.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Checks if attendance has been marked for this enrollment.
     *
     * @return true if attendance is marked, false otherwise
     */
    @JsonProperty(value = "is_attendance_marked", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if attendance has been marked for this enrollment.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isAttendanceMarked() {
        return attendanceMarkedAt != null && 
               (EnrollmentStatus.ATTENDED.equals(status) || EnrollmentStatus.ABSENT.equals(status));
    }

    /**
     * Checks if the student attended the class.
     *
     * @return true if student attended, false otherwise
     */
    @JsonProperty(value = "did_attend", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the student attended the class.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean didAttend() {
        return EnrollmentStatus.ATTENDED.equals(status);
    }

    /**
     * Checks if this enrollment is still active (not cancelled).
     *
     * @return true if enrollment is active, false otherwise
     */
    @JsonProperty(value = "is_active", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the enrollment is still active (not cancelled).",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isActive() {
        return !EnrollmentStatus.CANCELLED.equals(status);
    }

    /**
     * Checks if this enrollment can be cancelled.
     *
     * @return true if can be cancelled, false otherwise
     */
    @JsonProperty(value = "can_be_cancelled", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the enrollment can be cancelled.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean canBeCancelled() {
        return EnrollmentStatus.ENROLLED.equals(status);
    }

    /**
     * Returns the enrollment status description.
     *
     * @return Human-readable status description
     */
    @JsonProperty(value = "status_description", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable description of the enrollment status.",
            example = "Student is enrolled in the class",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getStatusDescription() {
        if (status == null) {
            return "Unknown status";
        }
        return status.getDescription();
    }
}