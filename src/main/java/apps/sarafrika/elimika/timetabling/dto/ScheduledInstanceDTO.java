package apps.sarafrika.elimika.timetabling.dto;

import apps.sarafrika.elimika.timetabling.util.enums.SchedulingStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Scheduled Instance Data Transfer Object
 * <p>
 * Represents a scheduled class instance in the Sarafrika Elimika timetabling system.
 * This defines a concrete class occurrence that has been placed on the calendar,
 * linking class definitions to specific time slots and instructors.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-09-05
 */
@Schema(
        name = "ScheduledInstance",
        description = "A scheduled class instance that represents a concrete class occurrence placed on the calendar",
        example = """
        {
            "uuid": "si123456-7890-abcd-ef01-234567890abc",
            "class_definition_uuid": "cd123456-7890-abcd-ef01-234567890abc",
            "instructor_uuid": "inst1234-5678-90ab-cdef-123456789abc",
            "start_time": "2024-09-15T09:00:00",
            "end_time": "2024-09-15T10:30:00",
            "timezone": "UTC",
            "title": "Introduction to Java Programming",
            "location_type": "ONLINE",
            "max_participants": 25,
            "status": "SCHEDULED",
            "cancellation_reason": null,
            "created_date": "2024-09-05T10:00:00",
            "updated_date": "2024-09-05T15:30:00",
            "created_by": "instructor@sarafrika.com",
            "updated_by": "instructor@sarafrika.com"
        }
        """
)
public record ScheduledInstanceDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the scheduled instance. Auto-generated by the system.",
                example = "si123456-7890-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the class definition UUID that this instance is based on.",
                example = "cd123456-7890-abcd-ef01-234567890abc",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Class definition UUID is required")
        @JsonProperty("class_definition_uuid")
        UUID classDefinitionUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor UUID who will conduct this session.",
                example = "inst1234-5678-90ab-cdef-123456789abc",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[REQUIRED]** Start date and time of the scheduled class session.",
                example = "2024-09-15T09:00:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Start time is required")
        @JsonProperty("start_time")
        LocalDateTime startTime,

        @Schema(
                description = "**[REQUIRED]** End date and time of the scheduled class session.",
                example = "2024-09-15T10:30:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "End time is required")
        @JsonProperty("end_time")
        LocalDateTime endTime,

        @Schema(
                description = "**[REQUIRED]** Timezone for the scheduled session.",
                example = "UTC",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Timezone is required")
        @JsonProperty("timezone")
        String timezone,

        @Schema(
                description = "**[REQUIRED]** Title of the class (cached from class definition for performance).",
                example = "Introduction to Java Programming",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Title is required")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[REQUIRED]** Location type for the class (cached from class definition).",
                example = "ONLINE",
                allowableValues = {"ONLINE", "IN_PERSON", "HYBRID"},
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Location type is required")
        @JsonProperty("location_type")
        String locationType,

        @Schema(
                description = "**[REQUIRED]** Maximum number of participants for this session (cached from class definition).",
                example = "25",
                minimum = "1",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Max participants is required")
        @JsonProperty("max_participants")
        Integer maxParticipants,

        @Schema(
                description = "**[OPTIONAL]** Current status of the scheduled instance.",
                example = "SCHEDULED",
                allowableValues = {"SCHEDULED", "ONGOING", "COMPLETED", "CANCELLED"},
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("status")
        SchedulingStatus status,

        @Schema(
                description = "**[OPTIONAL]** Reason for cancellation if status is CANCELLED.",
                example = "Instructor unavailable due to illness",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("cancellation_reason")
        String cancellationReason,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the scheduled instance was first created. Automatically set by the system.",
                example = "2024-09-05T10:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the scheduled instance was last modified. Automatically updated by the system.",
                example = "2024-09-05T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this scheduled instance.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this scheduled instance.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns the duration of this scheduled instance in minutes.
     *
     * @return Duration in minutes
     */
    @JsonProperty(value = "duration_minutes", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Duration of the scheduled instance in minutes.",
            example = "90",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public long getDurationMinutes() {
        if (startTime == null || endTime == null) {
            return 0;
        }
        return java.time.Duration.between(startTime, endTime).toMinutes();
    }

    /**
     * Returns a human-readable duration string.
     *
     * @return Formatted duration (e.g., "1h 30m", "2h")
     */
    @JsonProperty(value = "duration_formatted", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable formatted duration.",
            example = "1h 30m",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDurationFormatted() {
        long minutes = getDurationMinutes();
        if (minutes <= 0) {
            return "0m";
        }

        long hours = minutes / 60;
        long remainingMinutes = minutes % 60;

        if (hours > 0 && remainingMinutes > 0) {
            return hours + "h " + remainingMinutes + "m";
        } else if (hours > 0) {
            return hours + "h";
        } else {
            return remainingMinutes + "m";
        }
    }

    /**
     * Returns a human-readable date and time range string.
     *
     * @return Formatted date and time range
     */
    @JsonProperty(value = "time_range", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable date and time range.",
            example = "2024-09-15 09:00 - 10:30",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getTimeRange() {
        if (startTime == null || endTime == null) {
            return "Invalid time range";
        }
        return startTime.toLocalDate() + " " + 
               startTime.toLocalTime() + " - " + 
               endTime.toLocalTime();
    }

    /**
     * Checks if this scheduled instance is currently active (ongoing).
     *
     * @return true if currently ongoing, false otherwise
     */
    @JsonProperty(value = "is_currently_active", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the scheduled instance is currently active (ongoing).",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isCurrentlyActive() {
        return SchedulingStatus.ONGOING.equals(status);
    }

    /**
     * Checks if this scheduled instance can be cancelled.
     *
     * @return true if can be cancelled, false otherwise
     */
    @JsonProperty(value = "can_be_cancelled", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the scheduled instance can be cancelled.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean canBeCancelled() {
        return SchedulingStatus.SCHEDULED.equals(status) || SchedulingStatus.ONGOING.equals(status);
    }
}