package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Course Assessment Data Transfer Object
 * <p>
 * Represents course-level assessments in the Sarafrika Elimika system,
 * defining overall evaluation components like attendance, assignments, and exams.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "CourseAssessment",
        description = "Course-level assessment component with weighting for final grade calculation",
        example = """
        {
            "uuid": "c1a2s3s4-5e6s-7s8m-9e10-abcdefghijkl",
            "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "assessment_type": "Attendance",
            "title": "Class Attendance and Participation",
            "description": "Regular attendance and active participation in class discussions and activities",
            "weight_percentage": 20.00,
            "rubric_uuid": "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
            "is_required": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "assessment_category": "Participation Component",
            "weight_display": "20% of final grade",
            "is_major_assessment": false,
            "contribution_level": "Standard Contribution"
        }
        """
)
public record CourseAssessmentDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the course assessment. Auto-generated by the system.",
                example = "c1a2s3s4-5e6s-7s8m-9e10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the course UUID that this assessment belongs to.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course UUID is required")
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[REQUIRED]** Type of assessment component for categorization and processing.",
                example = "Attendance",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 50
        )
        @NotBlank(message = "Assessment type is required")
        @Size(max = 50, message = "Assessment type must not exceed 50 characters")
        @JsonProperty("assessment_type")
        String assessmentType,

        @Schema(
                description = "**[REQUIRED]** Title of the assessment component that clearly describes its purpose.",
                example = "Class Attendance and Participation",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Assessment title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the assessment criteria and expectations.",
                example = "Regular attendance and active participation in class discussions, group activities, and collaborative learning sessions",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[REQUIRED]** Percentage weight of this assessment in the final grade calculation.",
                example = "20.00",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0.00",
                maximum = "100.00"
        )
        @NotNull(message = "Weight percentage is required")
        @DecimalMin(value = "0.00", message = "Weight percentage cannot be negative")
        @DecimalMax(value = "100.00", message = "Weight percentage cannot exceed 100%")
        @JsonProperty("weight_percentage")
        BigDecimal weightPercentage,

        @Schema(
                description = "**[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.",
                example = "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("rubric_uuid")
        UUID rubricUuid,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this assessment is required for course completion.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_required")
        Boolean isRequired,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the assessment was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this assessment. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the assessment was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this assessment. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on assessment type.
     *
     * @return Assessment category classification
     */
    @JsonProperty(value = "assessment_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Category classification of the assessment type.",
            example = "Participation Component",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAssessmentCategory() {
        if (assessmentType == null) {
            return "General Assessment";
        }

        String lowerType = assessmentType.toLowerCase();
        if (lowerType.contains("attendance")) {
            return "Participation Component";
        } else if (lowerType.contains("assignment")) {
            return "Coursework Component";
        } else if (lowerType.contains("quiz")) {
            return "Quiz Component";
        } else if (lowerType.contains("exam")) {
            return "Examination Component";
        } else if (lowerType.contains("project")) {
            return "Project Component";
        } else if (lowerType.contains("presentation")) {
            return "Presentation Component";
        } else {
            return "Assessment Component";
        }
    }

    /**
     * Returns a formatted display string for the weight percentage.
     *
     * @return Formatted weight display
     */
    @JsonProperty(value = "weight_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of the weight percentage.",
            example = "20% of final grade",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getWeightDisplay() {
        if (weightPercentage == null) {
            return "Weight not specified";
        }

        return weightPercentage.stripTrailingZeros().toPlainString() + "% of final grade";
    }

    /**
     * Checks if this is a major assessment based on weight percentage.
     *
     * @return true if weight is 25% or higher
     */
    @JsonProperty(value = "is_major_assessment", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this is a major assessment component.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isMajorAssessment() {
        return weightPercentage != null &&
                weightPercentage.compareTo(new BigDecimal("25.00")) >= 0;
    }

    /**
     * Returns contribution level based on weight percentage.
     *
     * @return Contribution level classification
     */
    @JsonProperty(value = "contribution_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Level of contribution to final grade based on weight.",
            example = "Standard Contribution",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getContributionLevel() {
        if (weightPercentage == null) {
            return "Unknown Contribution";
        }

        double weight = weightPercentage.doubleValue();
        if (weight >= 40) {
            return "Major Contribution";
        } else if (weight >= 25) {
            return "Significant Contribution";
        } else if (weight >= 10) {
            return "Standard Contribution";
        } else {
            return "Minor Contribution";
        }
    }
}