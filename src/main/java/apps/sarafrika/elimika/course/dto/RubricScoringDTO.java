package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Rubric Scoring Data Transfer Object
 * <p>
 * Represents scoring descriptions for rubric criteria at different grading levels
 * in the Sarafrika Elimika system, defining performance expectations.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "RubricScoring",
        description = "Scoring description for rubric criteria at specific grading levels",
        example = """
        {
            "uuid": "r1s2c3o4-5r6i-7n8g-9d10-abcdefghijkl",
            "criteria_uuid": "r1c2r3i4-5t6e-7r8i-9a10-abcdefghijkl",
            "grading_level_uuid": "g1r2a3d4-5i6n-7g8l-9v10-abcdefghijkl",
            "description": "Highly confident and fluent techniques given consistently throughout",
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "performance_expectation": "Exceptional Performance",
            "score_range": "5 points",
            "is_passing_level": true,
            "feedback_category": "Excellence"
        }
        """
)
public record RubricScoringDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the rubric scoring. Auto-generated by the system.",
                example = "r1s2c3o4-5r6i-7n8g-9d10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the rubric criteria UUID this scoring applies to.",
                example = "r1c2r3i4-5t6e-7r8i-9a10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Criteria UUID is required")
        @JsonProperty("criteria_uuid")
        UUID criteriaUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the grading level UUID this scoring represents.",
                example = "g1r2a3d4-5i6n-7g8l-9v10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Grading level UUID is required")
        @JsonProperty("grading_level_uuid")
        UUID gradingLevelUuid,

        @Schema(
                description = "**[REQUIRED]** Detailed description of performance expectations at this grading level.",
                example = "Highly confident and fluent techniques given consistently throughout the performance with no errors",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 1000
        )
        @NotBlank(message = "Description is required")
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the scoring was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this scoring. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the scoring was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this scoring. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a performance expectation level based on description content.
     *
     * @return Performance expectation classification
     */
    @JsonProperty(value = "performance_expectation", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Classification of performance expectation level.",
            example = "Exceptional Performance",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPerformanceExpectation() {
        if (description == null) {
            return "Standard Performance";
        }

        String lowerDesc = description.toLowerCase();
        if (lowerDesc.contains("highly") || lowerDesc.contains("excellent") ||
                lowerDesc.contains("exceptional") || lowerDesc.contains("outstanding")) {
            return "Exceptional Performance";
        } else if (lowerDesc.contains("secure") || lowerDesc.contains("reliable") ||
                lowerDesc.contains("confident")) {
            return "Proficient Performance";
        } else if (lowerDesc.contains("generally") || lowerDesc.contains("mainly") ||
                lowerDesc.contains("adequate")) {
            return "Satisfactory Performance";
        } else if (lowerDesc.contains("inconsistent") || lowerDesc.contains("hesitant") ||
                lowerDesc.contains("poor")) {
            return "Needs Improvement";
        } else if (lowerDesc.contains("no effort") || lowerDesc.contains("not attempted") ||
                lowerDesc.contains("no skill")) {
            return "No Evidence";
        } else {
            return "Standard Performance";
        }
    }

    /**
     * Returns a score range indication based on common grading systems.
     *
     * @return Score range for this performance level
     */
    @JsonProperty(value = "score_range", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Expected score range for this performance level.",
            example = "5 points",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getScoreRange() {
        String expectation = getPerformanceExpectation();
        return switch (expectation) {
            case "Exceptional Performance" -> "5 points";
            case "Proficient Performance" -> "4 points";
            case "Satisfactory Performance" -> "3 points";
            case "Needs Improvement" -> "2 points";
            case "No Evidence" -> "1 point";
            default -> "Variable points";
        };
    }

    /**
     * Checks if this scoring level represents passing performance.
     *
     * @return true if this is a passing performance level
     */
    @JsonProperty(value = "is_passing_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this scoring level represents passing performance.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPassingLevel() {
        if (description == null) {
            return true;
        }

        String lowerDesc = description.toLowerCase();
        return !lowerDesc.contains("fail") && !lowerDesc.contains("no effort") &&
                !lowerDesc.contains("no skill") && !lowerDesc.contains("not attempted");
    }

    /**
     * Returns a feedback category for constructive assessment.
     *
     * @return Feedback category for instructor guidance
     */
    @JsonProperty(value = "feedback_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Feedback category for constructive assessment guidance.",
            example = "Excellence",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFeedbackCategory() {
        String expectation = getPerformanceExpectation();
        return switch (expectation) {
            case "Exceptional Performance" -> "Excellence";
            case "Proficient Performance" -> "Competency";
            case "Satisfactory Performance" -> "Development";
            case "Needs Improvement" -> "Support Required";
            case "No Evidence" -> "Intervention Needed";
            default -> "Assessment";
        };
    }
}