package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.ContentStatus;
import apps.sarafrika.elimika.course.util.enums.QuizScope;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Quiz Data Transfer Object
 * <p>
 * Represents a quiz assessment within a lesson in the Sarafrika Elimika system,
 * supporting various question types and scoring configurations.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "Quiz",
        description = "Quiz assessment with configurable questions, timing, and scoring",
        example = """
        {
            "uuid": "q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl",
            "lesson_uuid": "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
            "scope": "COURSE_TEMPLATE",
            "class_definition_uuid": "cd123456-7890-abcd-ef01-234567890abc",
            "source_quiz_uuid": "q1u2i3z4-5a6s-sourcequiz-abcdefghijkl",
            "title": "OOP Concepts Quiz",
            "description": "Test your understanding of object-oriented programming fundamentals",
            "instructions": "Answer all questions. You have 30 minutes to complete this quiz.",
            "time_limit_minutes": 30,
            "attempts_allowed": 3,
            "passing_score": 70.00,
            "rubric_uuid": "r1u2b3r4-5i6c-7s8c-9o10-abcdefghijkl",
            "status": "PUBLISHED",
            "active": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "time_limit_display": "30 minutes",
            "is_timed": true,
            "is_published": true,
            "has_multiple_attempts": true
        }
        """
)
public record QuizDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the quiz. Auto-generated by the system.",
                example = "q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the lesson UUID that contains this quiz.",
                example = "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Lesson UUID is required")
        @JsonProperty("lesson_uuid")
        UUID lessonUuid,

        @Schema(
                description = "**[OPTIONAL]** Scope of the quiz definition. Course templates act as blueprints, while class clones belong to a single class.",
                example = "COURSE_TEMPLATE",
                allowableValues = {"COURSE_TEMPLATE", "CLASS_CLONE"},
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("scope")
        QuizScope scope,

        @Schema(
                description = "**[OPTIONAL]** Reference to the class definition that owns this quiz when scope is CLASS_CLONE.",
                example = "cd123456-7890-abcd-ef01-234567890abc",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("class_definition_uuid")
        UUID classDefinitionUuid,

        @Schema(
                description = "**[READ-ONLY]** UUID of the course-level quiz that served as the template for this class clone.",
                example = "q1u2i3z4-5a6s-sourcequiz-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "source_quiz_uuid", access = JsonProperty.Access.READ_ONLY)
        UUID sourceQuizUuid,

        @Schema(
                description = "**[REQUIRED]** Quiz title that clearly describes the assessment content.",
                example = "OOP Concepts Quiz",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Quiz title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the quiz purpose and content coverage.",
                example = "Test your understanding of object-oriented programming fundamentals including classes, inheritance, and polymorphism",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Instructions for students on how to complete the quiz.",
                example = "Answer all questions carefully. You have 30 minutes to complete this quiz. Make sure to review your answers before submitting.",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Instructions must not exceed 1000 characters")
        @JsonProperty("instructions")
        String instructions,

        @Schema(
                description = "**[OPTIONAL]** Time limit for completing the quiz in minutes. Null means no time limit.",
                example = "30",
                minimum = "1",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Time limit must be at least 1 minute")
        @JsonProperty("time_limit_minutes")
        Integer timeLimitMinutes,

        @Schema(
                description = "**[REQUIRED]** Number of attempts allowed for this quiz. Set to 1 for single attempt.",
                example = "3",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1"
        )
        @NotNull(message = "Attempts allowed is required")
        @Min(value = 1, message = "At least 1 attempt must be allowed")
        @JsonProperty("attempts_allowed")
        Integer attemptsAllowed,

        @Schema(
                description = "**[REQUIRED]** Minimum score percentage required to pass the quiz.",
                example = "70.00",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0.00",
                maximum = "100.00"
        )
        @NotNull(message = "Passing score is required")
        @DecimalMin(value = "0.00", message = "Passing score cannot be negative")
        @DecimalMax(value = "100.00", message = "Passing score cannot exceed 100%")
        @JsonProperty("passing_score")
        BigDecimal passingScore,

        @Schema(
                description = "**[OPTIONAL]** Reference to assessment rubric UUID for detailed grading criteria.",
                example = "r1u2b3r4-5i6c-7s8c-9o10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("rubric_uuid")
        UUID rubricUuid,

        @Schema(
                description = "**[REQUIRED]** Quiz publication status in the content workflow.",
                example = "PUBLISHED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"DRAFT", "IN_REVIEW", "PUBLISHED", "ARCHIVED"}
        )
        @NotNull(message = "Status is required")
        @JsonProperty("status")
        ContentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the quiz is actively available to students. Can only be true for published quizzes.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the quiz was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this quiz. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the quiz was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this quiz. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display string for time limit.
     *
     * @return Formatted time limit string or "No time limit" if not set
     */
    @JsonProperty(value = "time_limit_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of quiz time limit.",
            example = "30 minutes",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getTimeLimitDisplay() {
        if (timeLimitMinutes == null) {
            return "No time limit";
        }
        return timeLimitMinutes + " minute" + (timeLimitMinutes != 1 ? "s" : "");
    }

    /**
     * Checks if the quiz has a time limit.
     *
     * @return true if time limit is set
     */
    @JsonProperty(value = "is_timed", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the quiz has a time limit.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isTimed() {
        return timeLimitMinutes != null && timeLimitMinutes > 0;
    }

    /**
     * Checks if the quiz is published and available to students.
     *
     * @return true if status is PUBLISHED
     */
    @JsonProperty(value = "is_published", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the quiz is published and accessible to students.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPublished() {
        return status == ContentStatus.PUBLISHED;
    }

    /**
     * Checks if multiple attempts are allowed.
     *
     * @return true if more than 1 attempt is allowed
     */
    @JsonProperty(value = "has_multiple_attempts", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if students can take the quiz multiple times.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasMultipleAttempts() {
        return attemptsAllowed != null && attemptsAllowed > 1;
    }
}
