package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.AssignmentScope;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Assignment Data Transfer Object
 * <p>
 * Represents assignments in the Sarafrika Elimika system, defining
 * learning activities and assessment tasks for students within lessons.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "Assignment",
        description = "Assignment with learning activities and assessment criteria",
        example = """
        {
            "uuid": "a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl",
            "lesson_uuid": "l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl",
            "scope": "COURSE_TEMPLATE",
            "class_definition_uuid": "cd123456-7890-abcd-ef01-234567890abc",
            "source_assignment_uuid": "a1s2s3g4-5n6m-7e8n-9t10-sourceassign",
            "title": "Music Theory Fundamentals Assignment",
            "description": "Comprehensive assignment covering basic music theory concepts including scales, intervals, and chord progressions",
            "instructions": "Complete all sections of the assignment. Submit your answers in PDF format along with any audio recordings as requested.",
            "due_date": "2024-04-15T23:59:59",
            "max_points": 100.00,
            "rubric_uuid": "r1u2b3r4-5i6c-7a8s-9s10-abcdefghijkl",
            "submission_types": ["PDF", "AUDIO", "TEXT"],
            "status": "PUBLISHED",
            "active": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-05T10:30:00",
            "updated_by": "instructor@sarafrika.com",
            "assignment_category": "Theory Assignment",
            "is_published": true,
            "points_display": "100.00 points",
            "assignment_scope": "Lesson-Specific",
            "submission_summary": "3 submission types accepted"
        }
        """
)
public record AssignmentDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the assignment. Auto-generated by the system.",
                example = "a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the lesson UUID this assignment belongs to.",
                example = "l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Lesson UUID is required")
        @JsonProperty("lesson_uuid")
        UUID lessonUuid,

        @Schema(
                description = "**[OPTIONAL]** Scope of the assignment definition. Course templates act as blueprints, while class clones are class-specific copies.",
                example = "COURSE_TEMPLATE",
                allowableValues = {"COURSE_TEMPLATE", "CLASS_CLONE"},
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("scope")
        AssignmentScope scope,

        @Schema(
                description = "**[OPTIONAL]** Reference to the class definition that owns this assignment when scope is CLASS_CLONE.",
                example = "cd123456-7890-abcd-ef01-234567890abc",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("class_definition_uuid")
        UUID classDefinitionUuid,

        @Schema(
                description = "**[READ-ONLY]** UUID of the course-level assignment this class clone originates from.",
                example = "a1s2s3g4-5n6m-7e8n-9t10-sourceassign",
                accessMode = Schema.AccessMode.READ_ONLY,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "source_assignment_uuid", access = JsonProperty.Access.READ_ONLY)
        UUID sourceAssignmentUuid,

        @Schema(
                description = "**[REQUIRED]** Title of the assignment that clearly describes its purpose.",
                example = "Music Theory Fundamentals Assignment",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Assignment title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the assignment's objectives and scope.",
                example = "Comprehensive assignment covering basic music theory concepts including scales, intervals, and chord progressions",
                maxLength = 2000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Description must not exceed 2000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Detailed instructions for completing the assignment.",
                example = "Complete all sections of the assignment. Submit your answers in PDF format along with any audio recordings as requested.",
                maxLength = 5000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 5000, message = "Instructions must not exceed 5000 characters")
        @JsonProperty("instructions")
        String instructions,

        @Schema(
                description = "**[OPTIONAL]** Due date and time for assignment submission.",
                example = "2024-04-15T23:59:59",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("due_date")
        LocalDateTime dueDate,

        @Schema(
                description = "**[OPTIONAL]** Maximum points that can be earned for this assignment.",
                example = "100.00",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Maximum points must be non-negative")
        @JsonProperty("max_points")
        BigDecimal maxPoints,

        @Schema(
                description = "**[OPTIONAL]** Reference to the rubric UUID used for grading this assignment.",
                example = "r1u2b3r4-5i6c-7a8s-9s10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("rubric_uuid")
        UUID rubricUuid,

        @Schema(
                description = "**[OPTIONAL]** Array of accepted submission types for this assignment.",
                example = "[\"PDF\", \"AUDIO\", \"TEXT\"]",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("submission_types")
        String[] submissionTypes,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the assignment is actively available for students. Can only be true for published assignments.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_published")
        Boolean published,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the assignment was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this assignment. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the assignment was last modified. Automatically updated by the system.",
                example = "2024-04-05T10:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this assignment. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on assignment characteristics.
     *
     * @return Formatted assignment category
     */
    @JsonProperty(value = "assignment_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the assignment based on its characteristics.",
            example = "Theory Assignment",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAssignmentCategory() {
        if (title == null) {
            return "General Assignment";
        }

        String titleLower = title.toLowerCase();
        if (titleLower.contains("theory")) {
            return "Theory Assignment";
        } else if (titleLower.contains("practical") || titleLower.contains("performance")) {
            return "Practical Assignment";
        } else if (titleLower.contains("research")) {
            return "Research Assignment";
        } else if (titleLower.contains("project")) {
            return "Project Assignment";
        }

        return "General Assignment";
    }

    /**
     * Returns a formatted display of the maximum points.
     *
     * @return Formatted points display
     */
    @JsonProperty(value = "points_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the maximum points for this assignment.",
            example = "100.00 points",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPointsDisplay() {
        if (maxPoints == null) {
            return "No points assigned";
        }
        return maxPoints.toString() + " points";
    }

    /**
     * Returns the assignment scope based on lesson association.
     *
     * @return Assignment scope classification
     */
    @JsonProperty(value = "assignment_scope", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Scope of the assignment - lesson-specific or standalone.",
            example = "Lesson-Specific",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAssignmentScope() {
        return lessonUuid != null ? "Lesson-Specific" : "Standalone Assignment";
    }

    /**
     * Returns a summary of submission types accepted.
     *
     * @return Submission types summary
     */
    @JsonProperty(value = "submission_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Summary of accepted submission types for this assignment.",
            example = "3 submission types accepted",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSubmissionSummary() {
        if (submissionTypes == null || submissionTypes.length == 0) {
            return "No submission types specified";
        }

        if (submissionTypes.length == 1) {
            return "1 submission type accepted: " + submissionTypes[0];
        }

        return submissionTypes.length + " submission types accepted";
    }
}
