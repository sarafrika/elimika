package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.ContentStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.DecimalMax;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Assessment Rubric Data Transfer Object
 * <p>
 * Represents assessment rubrics in the Sarafrika Elimika system, defining
 * evaluation criteria and standards for various assessment types.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "AssessmentRubric",
        description = "Assessment rubric with evaluation criteria and grading standards",
        example = """
        {
            "uuid": "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
            "title": "Music Performance Assessment Rubric",
            "description": "Comprehensive rubric for evaluating music performance across multiple criteria",
            "rubric_type": "Performance",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "is_public": true,
            "status": "PUBLISHED",
            "active": true,
            "total_weight": 100.00,
            "weight_unit": "percentage",
            "uses_custom_levels": true,
            "max_score": 400.00,
            "min_passing_score": 240.00,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "rubric_category": "Performance Assessment",
            "is_published": true,
            "assessment_scope": "General Use",
            "usage_status": "Active Public Rubric"
        }
        """
)
public record AssessmentRubricDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the assessment rubric. Auto-generated by the system.",
                example = "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Title of the assessment rubric that clearly describes its purpose.",
                example = "Music Performance Assessment Rubric",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Rubric title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the rubric's purpose and assessment scope.",
                example = "Comprehensive rubric for evaluating music performance across multiple criteria including technique, tonal quality, rhythm, and presentation",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,


        @Schema(
                description = "**[REQUIRED]** Type of assessment this rubric is designed for.",
                example = "Performance",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 50
        )
        @NotBlank(message = "Rubric type is required")
        @Size(max = 50, message = "Rubric type must not exceed 50 characters")
        @JsonProperty("rubric_type")
        String rubricType,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor UUID who created this rubric.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this rubric is publicly available for other instructors to use.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_public")
        Boolean isPublic,

        @Schema(
                description = "**[REQUIRED]** Rubric publication status in the content workflow.",
                example = "PUBLISHED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"DRAFT", "IN_REVIEW", "PUBLISHED", "ARCHIVED"}
        )
        @NotNull(message = "Status is required")
        @JsonProperty("status")
        ContentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the rubric is actively available for use. Can only be true for published rubrics.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[OPTIONAL]** Total weight distribution across all criteria for this rubric.",
                example = "100.00",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED,
                minimum = "1.00",
                maximum = "1000.00"
        )
        @DecimalMin(value = "1.00", message = "Total weight must be at least 1.00")
        @DecimalMax(value = "1000.00", message = "Total weight must not exceed 1000.00")
        @JsonProperty("total_weight")
        BigDecimal totalWeight,

        @Schema(
                description = "**[OPTIONAL]** Unit of measurement for weight calculations.",
                example = "percentage",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED,
                allowableValues = {"percentage", "points", "ratio"}
        )
        @JsonProperty("weight_unit")
        String weightUnit,

        @Schema(
                description = "**[OPTIONAL]** Indicates whether this rubric uses custom scoring levels or global grading levels.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("uses_custom_levels")
        Boolean usesCustomLevels,


        @Schema(
                description = "**[OPTIONAL]** Maximum possible score for this rubric based on weighted criteria and highest scoring levels.",
                example = "400.00",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED,
                minimum = "0.00"
        )
        @DecimalMin(value = "0.00", message = "Max score must be non-negative")
        @JsonProperty("max_score")
        BigDecimal maxScore,

        @Schema(
                description = "**[OPTIONAL]** Minimum score required to pass this rubric assessment.",
                example = "240.00",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED,
                minimum = "0.00"
        )
        @DecimalMin(value = "0.00", message = "Min passing score must be non-negative")
        @JsonProperty("min_passing_score")
        BigDecimal minPassingScore,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the rubric was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this rubric. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the rubric was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this rubric. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on rubric type.
     *
     * @return Formatted rubric category
     */
    @JsonProperty(value = "rubric_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the rubric based on its type.",
            example = "Performance Assessment",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getRubricCategory() {
        if (rubricType == null) {
            return "General Assessment";
        }

        String formatted = rubricType.substring(0, 1).toUpperCase() +
                rubricType.substring(1).toLowerCase();
        return formatted + " Assessment";
    }

    /**
     * Checks if the rubric is published and available for use.
     *
     * @return true if status is PUBLISHED
     */
    @JsonProperty(value = "is_published", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the rubric is published and available for use.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPublished() {
        return status == ContentStatus.PUBLISHED;
    }

    /**
     * Returns the assessment scope for this rubric.
     * All rubrics are now general-use and can be associated with multiple courses.
     *
     * @return Assessment scope classification
     */
    @JsonProperty(value = "assessment_scope", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Scope of the rubric usage. All rubrics are general-use and can be associated with multiple courses.",
            example = "General Use",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAssessmentScope() {
        return "General Use";
    }

    /**
     * Returns a comprehensive usage status description.
     *
     * @return Usage status for administrative purposes
     */
    @JsonProperty(value = "usage_status", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive status indicating usage and accessibility.",
            example = "Active Public Rubric",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getUsageStatus() {
        StringBuilder statusBuilder = new StringBuilder();

        if (active != null && active) {
            statusBuilder.append("Active ");
        } else {
            statusBuilder.append("Inactive ");
        }

        if (isPublic != null && isPublic) {
            statusBuilder.append("Public ");
        } else {
            statusBuilder.append("Private ");
        }

        statusBuilder.append("Rubric");

        if (status == ContentStatus.DRAFT) {
            statusBuilder.append(" (Draft)");
        } else if (status == ContentStatus.IN_REVIEW) {
            statusBuilder.append(" (Under Review)");
        } else if (status == ContentStatus.ARCHIVED) {
            statusBuilder.append(" (Archived)");
        }

        return statusBuilder.toString();
    }
}