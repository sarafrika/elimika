package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.ContentStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.UUID;

/**
 * Course Data Transfer Object
 * <p>
 * Represents a complete course in the Sarafrika Elimika system, including metadata,
 * content organization, pricing, and publication status with support for multiple categories.
 *
 * @author Wilfred Njuguna
 * @version 2.0
 * @since 2024-06-30
 */
@Schema(
        name = "Course",
        description = "Complete course with metadata, content organization, and publication status supporting multiple categories",
        example = """
        {
            "uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "name": "Advanced Java Programming",
            "course_creator_uuid": "c1r2e3a4-5t6o-7r89-0abc-defghijklmno",
            "category_uuids": [
                "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
                "p1r2o3g4-5r6a-7m8m-9i10-abcdefghijkl"
            ],
            "difficulty_uuid": "d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl",
            "description": "Comprehensive course covering advanced Java concepts and enterprise development",
            "objectives": "Master advanced Java features, design patterns, and enterprise frameworks",
            "prerequisites": "Basic Java knowledge and OOP concepts",
            "duration_hours": 40,
            "duration_minutes": 30,
            "class_limit": 25,
            "minimum_training_fee": 180.00,
            "creator_share_percentage": 60.0,
            "instructor_share_percentage": 40.0,
            "revenue_share_notes": "Creator retains 60% to cover tooling; instructors earn 40% net.",
            "age_lower_limit": 18,
            "age_upper_limit": 65,
            "thumbnail_url": "https://cdn.sarafrika.com/courses/java-advanced-thumb.jpg",
            "intro_video_url": "https://cdn.sarafrika.com/courses/java-advanced-intro.mp4",
            "banner_url": "https://cdn.sarafrika.com/courses/java-advanced-banner.jpg",
            "status": "PUBLISHED",
            "active": true,
            "training_requirements": [
                {
                    "uuid": "5a8074cc-8893-497b-8d58-4b151c994a80",
                    "requirement_type": "equipment",
                    "name": "Dual-screen instructor workstation",
                    "quantity": 1,
                    "unit": "workstation",
                    "is_mandatory": true
                }
            ],
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "category_names": ["Programming", "Advanced Java"],
            "total_duration_display": "40 hours 30 minutes",
            "is_free": false,
            "is_published": true,
            "is_draft": false
        }
        """
)
public record CourseDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the course. Auto-generated by the system.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Course title. Should be descriptive and engaging for potential students.",
                example = "Advanced Java Programming",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Course name is required")
        @Size(max = 255, message = "Course name must not exceed 255 characters")
        @JsonProperty("name")
        String name,

        @Schema(
                description = "**[REQUIRED]** Reference to the course creator's UUID who created and owns this course.",
                example = "c1r2e3a4-5t6o-7r89-0abc-defghijklmno",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course creator UUID is required")
        @JsonProperty("course_creator_uuid")
        UUID courseCreatorUuid,

        @Schema(
                description = "**[OPTIONAL]** List of category UUIDs for organizing the course. A course can belong to multiple categories.",
                example = "[\"c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl\", \"p1r2o3g4-5r6a-7m8m-9i10-abcdefghijkl\"]",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("category_uuids")
        Set<UUID> categoryUuids,

        @Schema(
                description = "**[OPTIONAL]** Reference to the difficulty level UUID indicating course complexity.",
                example = "d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("difficulty_uuid")
        UUID difficultyUuid,

        @Schema(
                description = "**[OPTIONAL]** Detailed course description explaining content, approach, and outcomes.",
                example = "Comprehensive course covering advanced Java concepts including concurrency, design patterns, and enterprise development frameworks",
                maxLength = 2000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Description must not exceed 2000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Learning objectives and goals students will achieve upon completion.",
                example = "Master advanced Java features, understand design patterns, implement enterprise solutions",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Objectives must not exceed 1000 characters")
        @JsonProperty("objectives")
        String objectives,

        @Schema(
                description = "**[OPTIONAL]** Required knowledge and skills students should have before taking this course.",
                example = "Basic Java knowledge, understanding of OOP concepts, familiarity with development tools",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Prerequisites must not exceed 1000 characters")
        @JsonProperty("prerequisites")
        String prerequisites,

        @Schema(
                description = "**[REQUIRED]** Course duration in hours.",
                example = "40",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0"
        )
        @NotNull(message = "Duration hours is required")
        @Min(value = 0, message = "Duration hours cannot be negative")
        @JsonProperty("duration_hours")
        Integer durationHours,

        @Schema(
                description = "**[REQUIRED]** Additional course duration in minutes (0-59).",
                example = "30",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0",
                maximum = "59"
        )
        @NotNull(message = "Duration minutes is required")
        @Min(value = 0, message = "Duration minutes cannot be negative")
        @Max(value = 59, message = "Duration minutes cannot exceed 59")
        @JsonProperty("duration_minutes")
        Integer durationMinutes,

        @Schema(
                description = "**[OPTIONAL]** Maximum number of students that can enroll in the course.",
                example = "25",
                minimum = "1",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Class limit must be at least 1")
        @JsonProperty("class_limit")
        Integer classLimit,

        @Schema(
                description = "**[OPTIONAL]** Legacy course list price. Leave blank while pricing workflows are under review.",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Price cannot be negative")
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonProperty("price")
        BigDecimal price,

        @Schema(
                description = "**[OPTIONAL]** Minimum training fee that any instructor-led class for this course must meet or exceed.",
                example = "180.00",
                minimum = "0",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Minimum training fee cannot be negative")
        @JsonProperty("minimum_training_fee")
        BigDecimal minimumTrainingFee,

        @Schema(
                description = "**[REQUIRED]** Percentage of training revenue allocated to the course creator. Must work with instructor share to total 100%.",
                example = "60.0",
                minimum = "0",
                maximum = "100",
                nullable = false,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Creator share cannot be negative")
        @DecimalMax(value = "100.00", message = "Creator share cannot exceed 100")
        @JsonProperty("creator_share_percentage")
        BigDecimal creatorSharePercentage,

        @Schema(
                description = "**[REQUIRED]** Percentage of training revenue allocated to instructors. Must work with creator share to total 100%.",
                example = "40.0",
                minimum = "0",
                maximum = "100",
                nullable = false,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Instructor share cannot be negative")
        @DecimalMax(value = "100.00", message = "Instructor share cannot exceed 100")
        @JsonProperty("instructor_share_percentage")
        BigDecimal instructorSharePercentage,

        @Schema(
                description = "**[OPTIONAL]** Additional context explaining how revenue is allocated between course creator and instructors.",
                example = "Creator retains 60% to cover tooling; instructors earn 40% net.",
                maxLength = 1000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Revenue share notes must not exceed 1000 characters")
        @JsonProperty("revenue_share_notes")
        String revenueShareNotes,

        @Schema(
                description = "**[OPTIONAL]** Minimum age requirement for course enrollment.",
                example = "18",
                minimum = "1",
                maximum = "120",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Age lower limit must be at least 1")
        @Max(value = 120, message = "Age lower limit cannot exceed 120")
        @JsonProperty("age_lower_limit")
        Integer ageLowerLimit,

        @Schema(
                description = "**[OPTIONAL]** Maximum age requirement for course enrollment.",
                example = "65",
                minimum = "1",
                maximum = "120",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Age upper limit must be at least 1")
        @Max(value = 120, message = "Age upper limit cannot exceed 120")
        @JsonProperty("age_upper_limit")
        Integer ageUpperLimit,

        @Schema(
                description = "**[OPTIONAL]** URL to course thumbnail image for course listings and previews.",
                example = "https://cdn.sarafrika.com/courses/java-advanced-thumb.jpg",
                format = "uri",
                maxLength = 500,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Thumbnail URL must not exceed 500 characters")
        @JsonProperty("thumbnail_url")
        String thumbnailUrl,

        @Schema(
                description = "**[OPTIONAL]** URL to course introduction video for marketing and preview purposes.",
                example = "https://cdn.sarafrika.com/courses/java-advanced-intro.mp4",
                format = "uri",
                maxLength = 500,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Intro video URL must not exceed 500 characters")
        @JsonProperty("intro_video_url")
        String introVideoUrl,

        @Schema(
                description = "**[OPTIONAL]** URL to course banner image for detailed course pages.",
                example = "https://cdn.sarafrika.com/courses/java-advanced-banner.jpg",
                format = "uri",
                maxLength = 500,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Banner URL must not exceed 500 characters")
        @JsonProperty("banner_url")
        String bannerUrl,

        @Schema(
                description = "**[REQUIRED]** Course publication status in the content workflow.",
                example = "published",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"draft", "in_review", "published", "archived"}
        )
        @NotNull(message = "Status is required")
        @JsonProperty("status")
        ContentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the course is actively available to students. Can only be true for published courses.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[READ-ONLY]** Structured resources required to deliver this course during instructor-led training sessions.",
                accessMode = Schema.AccessMode.READ_ONLY,
                nullable = true
        )
        @JsonProperty(value = "training_requirements", access = JsonProperty.Access.READ_ONLY)
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        List<CourseTrainingRequirementDTO> trainingRequirements,

        @Schema(
                description = "**[READ-ONLY]** List of category names this course belongs to. Computed from category mappings.",
                example = "[\"Programming\", \"Advanced Java\"]",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "category_names", access = JsonProperty.Access.READ_ONLY)
        List<String> categoryNames,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the course was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this course. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the course was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this course. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display string for total course duration.
     *
     * @return Formatted duration string
     */
    @JsonProperty(value = "total_duration_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of total course duration.",
            example = "40 hours 30 minutes",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getTotalDurationDisplay() {
        if (durationHours == null && durationMinutes == null) {
            return "Duration not specified";
        }

        int hours = durationHours != null ? durationHours : 0;
        int minutes = durationMinutes != null ? durationMinutes : 0;

        if (hours == 0 && minutes == 0) {
            return "Duration not specified";
        }

        StringBuilder sb = new StringBuilder();
        if (hours > 0) {
            sb.append(hours).append(" hour").append(hours != 1 ? "s" : "");
        }
        if (minutes > 0) {
            if (!sb.isEmpty()) sb.append(" ");
            sb.append(minutes).append(" minute").append(minutes != 1 ? "s" : "");
        }

        return sb.toString();
    }

    /**
     * Checks if the course is free (no price or price is 0).
     *
     * @return true if course is free
     */
    @JsonProperty(value = "is_free", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is offered for free.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isFree() {
        return price == null || price.compareTo(BigDecimal.ZERO) == 0;
    }

    /**
     * Checks if the course is published and available to students.
     *
     * @return true if status is PUBLISHED
     */
    @JsonProperty(value = "is_published", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is published and discoverable.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPublished() {
        return status == ContentStatus.PUBLISHED;
    }

    /**
     * Checks if the course is in draft status.
     *
     * @return true if status is DRAFT
     */
    @JsonProperty(value = "is_draft", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is still in draft mode.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isDraft() {
        return status == ContentStatus.DRAFT;
    }

    /**
     * Returns whether the course has multiple categories assigned.
     *
     * @return true if course has more than one category
     */
    @JsonProperty(value = "has_multiple_categories", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course belongs to multiple categories.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasMultipleCategories() {
        return categoryUuids != null && categoryUuids.size() > 1;
    }

    /**
     * Returns the number of categories this course belongs to.
     *
     * @return number of categories
     */
    @JsonProperty(value = "category_count", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Number of categories this course belongs to.",
            example = "2",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public int getCategoryCount() {
        return categoryUuids != null ? categoryUuids.size() : 0;
    }

    /**
     * Checks if the course is archived.
     *
     * @return true if status is ARCHIVED
     */
    @JsonProperty(value = "is_archived", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is archived and no longer available.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isArchived() {
        return status == ContentStatus.ARCHIVED;
    }

    /**
     * Checks if the course is in review status.
     *
     * @return true if status is IN_REVIEW
     */
    @JsonProperty(value = "is_in_review", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is currently under review.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isInReview() {
        return status == ContentStatus.IN_REVIEW;
    }

    /**
     * Returns the current lifecycle stage of the course.
     *
     * @return human-readable lifecycle stage
     */
    @JsonProperty(value = "lifecycle_stage", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable description of the course's current lifecycle stage.",
            example = "Published and Active",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getLifecycleStage() {
        if (isArchived()) {
            return "Archived";
        }
        if (isInReview()) {
            return "Under Review";
        }
        if (isPublished() && Boolean.TRUE.equals(active)) {
            return "Published and Active";
        }
        if (isPublished() && !Boolean.TRUE.equals(active)) {
            return "Published but Inactive";
        }
        if (isDraft() && Boolean.TRUE.equals(active)) {
            return "Draft and Active";
        }
        if (isDraft() && !Boolean.TRUE.equals(active)) {
            return "Draft and Inactive";
        }
        return "Unknown";
    }

    /**
     * Indicates if the course accepts new enrollments.
     *
     * @return true if course is active and accepts new students
     */
    @JsonProperty(value = "accepts_new_enrollments", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is currently accepting new student enrollments.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean acceptsNewEnrollments() {
        return Boolean.TRUE.equals(active) && (isPublished() || isDraft());
    }
}
