package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.CourseDifficulty;
import apps.sarafrika.elimika.course.util.enums.CourseStatus;
import apps.sarafrika.elimika.course.util.validations.ValidAgeRange;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.UUID;

/**
 * Course Data Transfer Object
 * <p>
 * Represents a course in the Sarafrika Elimika system with all necessary
 * course information, pricing details, access controls, and audit information.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "Course",
        description = "Complete course information including details, pricing, access controls, and system metadata",
        example = """
                {
                    "uuid": "f3e7a8b9-4c5d-11ee-be56-0242ac120002",
                    "course_code": "CS101",
                    "course_name": "Introduction to Computer Science",
                    "course_description": "A comprehensive introduction to computer science fundamentals covering programming, algorithms, and data structures.",
                    "initial_price": 299.99,
                    "current_price": 199.99,
                    "access_start_date": "2024-09-01T08:00:00+03:00",
                    "class_limit": 30,
                    "age_upper_limit": 65,
                    "age_lower_limit": 16,
                    "difficulty": "BEGINNER",
                    "course_objectives": "By the end of this course, students will understand basic programming concepts, be able to write simple programs, and understand fundamental computer science principles.",
                    "course_status": "ACTIVE",
                    "created_date": "2024-06-01T10:00:00",
                    "updated_date": "2024-06-15T14:30:00",
                    "created_by": "admin@sarafrika.com",
                    "updated_by": "course.admin@sarafrika.com",
                    "is_active": true,
                    "is_draft": false,
                    "is_enrollment_available": true,
                    "discount_percentage": 33.3333,
                    "discount_rate": 0.3333,
                    "effective_price": 199.99
                }
                """
)
@ValidAgeRange(message = "Age lower limit must be less than or equal to age upper limit")
public record CourseDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the course. Auto-generated by the system and cannot be modified. Used for external API references.",
                example = "f3e7a8b9-4c5d-11ee-be56-0242ac120002",
                format = "uuid",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Unique course code identifier. Used for internal referencing and must be unique across the system. Typically follows institutional naming conventions.",
                example = "CS101",
                minLength = 1,
                maxLength = 20,
                pattern = "^[A-Z0-9]{2,20}$",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Course code is required")
        @Size(min = 1, max = 20, message = "Course code must be between 1 and 20 characters")
        @Pattern(regexp = "^[A-Z0-9]{2,20}$", message = "Course code must contain only uppercase letters and numbers")
        @JsonProperty("course_code")
        String courseCode,

        @Schema(
                description = "**[REQUIRED]** Official name of the course. This is the primary display name used throughout the system and in course catalogs.",
                example = "Introduction to Computer Science",
                minLength = 1,
                maxLength = 200,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Course name is required")
        @Size(min = 1, max = 200, message = "Course name must be between 1 and 200 characters")
        @JsonProperty("course_name")
        String courseName,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the course content, objectives, and what students can expect to learn. Used for course previews and marketing materials.",
                example = "A comprehensive introduction to computer science fundamentals covering programming, algorithms, and data structures.",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Course description must not exceed 2000 characters")
        @JsonProperty("course_description")
        String courseDescription,

        @Schema(
                description = "**[READ-ONLY]** URL to the course thumbnail image. Automatically generated after thumbnail upload and cannot be directly modified. Used for course previews and display in course listings.",
                example = "https://api.elimika.sarafrika.com/thumbnails/course-cs101.jpg",
                format = "uri",
                nullable = true,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "course_thumbnail", access = JsonProperty.Access.READ_ONLY)
        String courseThumbnail,

        @Schema(
                description = "**[OPTIONAL]** Original price of the course before any discounts. Used for displaying original pricing and calculating discount percentages. Must be positive if specified.",
                example = "299.99",
                minimum = "0.01",
                maximum = "99999.99",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.01", message = "Initial price must be greater than 0")
        @DecimalMax(value = "99999.99", message = "Initial price must not exceed 99,999.99")
        @Digits(integer = 5, fraction = 2, message = "Initial price must have at most 5 digits before decimal and 2 after")
        @JsonProperty("initial_price")
        BigDecimal initialPrice,

        @Schema(
                description = "**[OPTIONAL]** Current selling price of the course. This is the price students will pay for enrollment. Must be positive if specified.",
                example = "199.99",
                minimum = "0.01",
                maximum = "99999.99",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.01", message = "Current price must be greater than 0")
        @DecimalMax(value = "99999.99", message = "Current price must not exceed 99,999.99")
        @Digits(integer = 5, fraction = 2, message = "Current price must have at most 5 digits before decimal and 2 after")
        @JsonProperty("current_price")
        BigDecimal currentPrice,

        @Schema(
                description = "**[OPTIONAL]** Date and time when students can start accessing the course content. Course will not be accessible before this date. Uses ISO 8601 format with timezone information.",
                example = "2024-09-01T08:00:00+03:00",
                format = "date-time",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("access_start_date")
        ZonedDateTime accessStartDate,

        @Schema(
                description = "**[OPTIONAL]** Maximum number of students that can enroll in this course. Used for capacity management and enrollment controls. Must be positive if specified.",
                example = "30",
                minimum = "1",
                maximum = "10000",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Class limit must be at least 1")
        @Max(value = 10000, message = "Class limit must not exceed 10,000")
        @JsonProperty("class_limit")
        Integer classLimit,

        @Schema(
                description = "**[OPTIONAL]** Maximum age requirement for course enrollment. Students above this age cannot enroll. Used for age-appropriate content delivery.",
                example = "65",
                minimum = "1",
                maximum = "120",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Age upper limit must be at least 1")
        @Max(value = 120, message = "Age upper limit must not exceed 120")
        @JsonProperty("age_upper_limit")
        Integer ageUpperLimit,

        @Schema(
                description = "**[OPTIONAL]** Minimum age requirement for course enrollment. Students below this age cannot enroll. Used for age-appropriate content delivery.",
                example = "16",
                minimum = "1",
                maximum = "120",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Age lower limit must be at least 1")
        @Max(value = 120, message = "Age lower limit must not exceed 120")
        @JsonProperty("age_lower_limit")
        Integer ageLowerLimit,

        @Schema(
                description = "**[OPTIONAL]** Difficulty level of the course content. Helps students choose appropriate courses based on their skill level and experience.",
                example = "BEGINNER",
                allowableValues = {"BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT"},
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("difficulty")
        CourseDifficulty difficulty,

        @Schema(
                description = "**[OPTIONAL]** Detailed learning objectives and outcomes for the course. Describes what students will be able to do after completing the course.",
                example = "By the end of this course, students will understand basic programming concepts, be able to write simple programs, and understand fundamental computer science principles.",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Course objectives must not exceed 2000 characters")
        @JsonProperty("course_objectives")
        String courseObjectives,

        @Schema(
                description = "**[REQUIRED]** Current status of the course in the system. Determines course visibility and enrollment availability.",
                example = "ACTIVE",
                allowableValues = {"ACTIVE", "INACTIVE", "ARCHIVED", "DRAFT"},
                defaultValue = "DRAFT",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course status is required")
        @JsonProperty("course_status")
        CourseStatus courseStatus,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the course was first created in the system. Automatically set by the system and cannot be modified.",
                example = "2024-06-01T10:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the course was last modified. Automatically updated by the system on any changes and cannot be directly modified.",
                example = "2024-06-15T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime lastModifiedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or identifier of the user who created this course. Automatically set by the system and cannot be modified.",
                example = "admin@sarafrika.com",
                maxLength = 100,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Email or identifier of the user who last modified this course. Automatically updated by the system and cannot be directly modified.",
                example = "course.admin@sarafrika.com",
                maxLength = 100,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String lastModifiedBy

) {

    /**
     * Checks if the course is currently active and available for enrollment.
     *
     * @return true if course status is ACTIVE, false otherwise
     */
    @JsonProperty(value = "is_active", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is currently active and available for enrollment.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isActive() {
        return CourseStatus.ACTIVE.equals(courseStatus);
    }

    /**
     * Checks if the course is currently in draft status.
     *
     * @return true if course status is DRAFT, false otherwise
     */
    @JsonProperty(value = "is_draft", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the course is currently in draft status.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isDraft() {
        return CourseStatus.DRAFT.equals(courseStatus);
    }

    /**
     * Checks if enrollment is currently available based on access start date.
     *
     * @return true if access start date is null or in the past/present, false if in the future
     */
    @JsonProperty(value = "is_enrollment_available", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if enrollment is currently available based on the access start date.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isEnrollmentAvailable() {
        if (accessStartDate == null) {
            return true;
        }
        return ZonedDateTime.now().isAfter(accessStartDate) || ZonedDateTime.now().isEqual(accessStartDate);
    }

    /**
     * Calculates the discount percentage if both initial and current prices are available.
     *
     * @return discount percentage as BigDecimal, or null if calculation is not possible
     */
    @JsonProperty(value = "discount_percentage", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Calculated discount percentage between initial and current price. Returns null if either price is not available.",
            example = "33.3333",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public BigDecimal getDiscountPercentage() {
        if (initialPrice == null || currentPrice == null || initialPrice.compareTo(BigDecimal.ZERO) <= 0) {
            return null;
        }

        BigDecimal discount = initialPrice.subtract(currentPrice);
        return discount.divide(initialPrice, 4, BigDecimal.ROUND_HALF_UP)
                .multiply(new BigDecimal("100"));
    }

    /**
     * Calculates the discount rate as a decimal value (0.0 to 1.0) if both initial and current prices are available.
     * This is useful for calculations where you need the discount as a multiplier rather than a percentage.
     *
     * @return discount rate as BigDecimal (e.g., 0.25 for 25% discount), or null if calculation is not possible
     */
    @JsonProperty(value = "discount_rate", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Calculated discount rate as decimal (0.0 to 1.0) between initial and current price. Returns null if either price is not available.",
            example = "0.3333",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY,
            minimum = "0.0",
            maximum = "1.0"
    )
    public BigDecimal getDiscountRate() {
        if (initialPrice == null || currentPrice == null || initialPrice.compareTo(BigDecimal.ZERO) <= 0) {
            return null;
        }

        BigDecimal discount = initialPrice.subtract(currentPrice);
        return discount.divide(initialPrice, 4, BigDecimal.ROUND_HALF_UP);
    }

    /**
     * Returns the effective price for the course (current price if available, otherwise initial price).
     *
     * @return the effective price, or null if no price is set
     */
    @JsonProperty(value = "effective_price", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** The effective price for the course - current price if available, otherwise initial price.",
            example = "199.99",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY,
            minimum = "0.01",
            maximum = "99999.99"
    )
    public BigDecimal getEffectivePrice() {
        return currentPrice != null ? currentPrice : initialPrice;
    }

    /**
     * Checks if a student with the given age is eligible for this course based on age limits.
     * Note: This method is not exposed as a JSON property since it requires a parameter.
     *
     * @param studentAge the age of the student
     * @return true if student is eligible, false otherwise
     */
    public boolean isAgeEligible(int studentAge) {
        if (ageLowerLimit != null && studentAge < ageLowerLimit) {
            return false;
        }
        if (ageUpperLimit != null && studentAge > ageUpperLimit) {
            return false;
        }
        return true;
    }
}