package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Course Bundle Course Association Data Transfer Object
 * <p>
 * Represents the association between course bundles and courses with sequencing
 * and requirement information in the Sarafrika Elimika system.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2025-01-09
 */
@Schema(
        name = "CourseBundleCourse",
        description = "Association between course bundles and courses with sequencing and requirement information",
        example = """
        {
            "uuid": "c1b2c3a4-5s6s-7o8c-9i10-abcdefghijkl",
            "bundle_uuid": "b1u2n3d4-5l6e-7c8o-9u10-abcdefghijkl",
            "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "sequence_order": 1,
            "is_required": true,
            "created_date": "2025-01-09T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2025-01-09T12:00:00",
            "updated_by": "instructor@sarafrika.com"
        }
        """
)
public record CourseBundleCourseDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the bundle-course association. Auto-generated by the system.",
                example = "c1b2c3a4-5s6s-7o8c-9i10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the course bundle UUID.",
                example = "b1u2n3d4-5l6e-7c8o-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Bundle UUID is required")
        @JsonProperty("bundle_uuid")
        UUID bundleUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the course UUID being included in the bundle.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course UUID is required")
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[OPTIONAL]** Order of the course within the bundle for suggested learning sequence.",
                example = "1",
                minimum = "1",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("sequence_order")
        Integer sequenceOrder,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this course is required for bundle completion.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_required")
        Boolean isRequired,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the association was created. Automatically set by the system.",
                example = "2025-01-09T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this association. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the association was last modified. Automatically updated by the system.",
                example = "2025-01-09T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this association. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Checks if this course is marked as required for bundle completion.
     *
     * @return true if course is required
     */
    @JsonProperty(value = "is_required_course", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this course is required for completing the bundle.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isRequiredCourse() {
        return Boolean.TRUE.equals(isRequired);
    }

    /**
     * Checks if this course has a specific sequence order defined.
     *
     * @return true if sequence order is defined
     */
    @JsonProperty(value = "has_sequence", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this course has a specific sequence order within the bundle.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasSequence() {
        return sequenceOrder != null && sequenceOrder > 0;
    }
}