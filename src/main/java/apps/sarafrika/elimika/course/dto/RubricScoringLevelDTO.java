package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Rubric Scoring Level Data Transfer Object
 * <p>
 * Represents custom scoring levels defined per rubric for flexible matrix configurations.
 * These levels form the columns of the rubric matrix (e.g., Excellent, Good, Fair, Poor).
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-08-13
 */
@Schema(
        name = "RubricScoringLevel",
        description = "Custom scoring level within a rubric defining evaluation standards and point values",
        example = """
        {
            "uuid": "rsl1r2i3-4c5k-6s7c-8o9r-abcdefghijkl",
            "rubric_uuid": "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
            "name": "Excellent",
            "description": "Exceeds expectations in all areas with exceptional quality",
            "points": 4.00,
            "level_order": 1,
            "color_code": "#4CAF50",
            "is_passing": true,
            "created_date": "2024-08-13T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-08-13T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "display_name": "Excellent (4.0 pts)",
            "performance_indicator": "Exceeds Expectations"
        }
        """
)
public record RubricScoringLevelDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the rubric scoring level. Auto-generated by the system.",
                example = "rsl1r2i3-4c5k-6s7c-8o9r-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the rubric UUID that contains this scoring level.",
                example = "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Rubric UUID is required")
        @JsonProperty("rubric_uuid")
        UUID rubricUuid,

        @Schema(
                description = "**[REQUIRED]** Name of the scoring level for display in the rubric matrix.",
                example = "Excellent",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 50
        )
        @NotBlank(message = "Scoring level name is required")
        @Size(max = 50, message = "Name must not exceed 50 characters")
        @JsonProperty("name")
        String name,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of what constitutes this performance level.",
                example = "Exceeds expectations in all areas with exceptional quality and demonstrates mastery",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[REQUIRED]** Point value assigned to this scoring level for calculations.",
                example = "4.00",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0.00",
                maximum = "1000.00"
        )
        @NotNull(message = "Points value is required")
        @DecimalMin(value = "0.00", message = "Points must be at least 0.00")
        @DecimalMax(value = "1000.00", message = "Points must not exceed 1000.00")
        @JsonProperty("points")
        BigDecimal points,

        @Schema(
                description = "**[REQUIRED]** Display order of the level in the rubric matrix (1 = highest performance).",
                example = "1",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1"
        )
        @NotNull(message = "Level order is required")
        @Min(value = 1, message = "Level order must be at least 1")
        @JsonProperty("level_order")
        Integer levelOrder,

        @Schema(
                description = "**[OPTIONAL]** Hex color code for UI display and visual distinction.",
                example = "#4CAF50",
                pattern = "^#[0-9A-Fa-f]{6}$",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Pattern(regexp = "^#[0-9A-Fa-f]{6}$", message = "Color code must be in hex format (#RRGGBB)")
        @JsonProperty("color_code")
        String colorCode,

        @Schema(
                description = "**[REQUIRED]** Indicates whether this scoring level constitutes a passing grade.",
                example = "true",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Passing status is required")
        @JsonProperty("is_passing")
        Boolean isPassing,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the scoring level was created. Automatically set by the system.",
                example = "2024-08-13T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this scoring level. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the scoring level was last modified. Automatically updated by the system.",
                example = "2024-08-13T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this scoring level. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display name combining the level name and point value.
     *
     * @return Formatted display name for UI presentation
     */
    @JsonProperty(value = "display_name", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display name combining level name and points for UI.",
            example = "Excellent (4.0 pts)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDisplayName() {
        if (name == null || points == null) {
            return name != null ? name : "Unnamed Level";
        }
        return String.format("%s (%.1f pts)", name, points);
    }

    /**
     * Returns a performance indicator based on the level order and passing status.
     *
     * @return Performance classification for reporting purposes
     */
    @JsonProperty(value = "performance_indicator", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Performance classification based on level order and passing status.",
            example = "Exceeds Expectations",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPerformanceIndicator() {
        if (levelOrder == null || isPassing == null) {
            return "Unknown Performance";
        }
        
        if (!isPassing) {
            return "Below Expectations";
        }
        
        return switch (levelOrder) {
            case 1 -> "Exceeds Expectations";
            case 2 -> "Meets Expectations";
            case 3 -> "Approaches Expectations";
            default -> "Meets Minimum Requirements";
        };
    }

    /**
     * Returns CSS-safe color class name based on the color code.
     *
     * @return CSS class name for styling purposes
     */
    @JsonProperty(value = "css_color_class", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** CSS-safe color class name derived from the color code.",
            example = "level-green",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCssColorClass() {
        if (colorCode == null) {
            return "level-default";
        }
        
        // Map common colors to semantic classes
        return switch (colorCode.toUpperCase()) {
            case "#4CAF50", "#2E7D32", "#8BC34A" -> "level-green";
            case "#FFC107", "#FF9800", "#FFA000" -> "level-yellow";
            case "#F44336", "#FF5722", "#D32F2F" -> "level-red";
            case "#2196F3", "#1976D2", "#0D47A1" -> "level-blue";
            case "#9C27B0", "#7B1FA2", "#4A148C" -> "level-purple";
            default -> "level-custom";
        };
    }

    /**
     * Checks if this is the highest performance level in the rubric.
     *
     * @return true if this is the top-performing level
     */
    @JsonProperty(value = "is_highest_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this is the highest performance level (level_order = 1).",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isHighestLevel() {
        return levelOrder != null && levelOrder == 1;
    }
}