package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.TemplateType;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Certificate Template Data Transfer Object
 * <p>
 * Represents certificate templates in the Sarafrika Elimika system,
 * defining the design and layout for certificates awarded to students.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "CertificateTemplate",
        description = "Certificate template with design elements and layout configuration",
        example = """
        {
            "uuid": "c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl",
            "name": "Music Course Completion Certificate",
            "template_type": "COURSE_COMPLETION",
            "template_html": "<div class='certificate'><h1>Certificate of Completion</h1><p>This certifies that</p><h2>{{student_name}}</h2><p>has successfully completed</p><h3>{{course_name}}</h3></div>",
            "template_css": ".certificate { font-family: 'Times New Roman', serif; text-align: center; padding: 50px; } h1 { color: #2c3e50; font-size: 36px; } h2 { color: #e74c3c; font-size: 28px; }",
            "background_image_url": "https://storage.sarafrika.com/templates/music_cert_bg.jpg",
            "status": "PUBLISHED",
            "active": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "admin@sarafrika.com",
            "updated_date": "2024-04-05T14:20:00",
            "updated_by": "design@sarafrika.com",
            "template_category": "Course Completion Template",
            "is_published": true,
            "design_complexity": "Standard Design",
            "template_scope": "General Use Template",
            "usage_summary": "Active Public Template"
        }
        """
)
public record CertificateTemplateDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the certificate template. Auto-generated by the system.",
                example = "c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Name of the certificate template that clearly describes its purpose.",
                example = "Music Course Completion Certificate",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Template name is required")
        @Size(max = 255, message = "Name must not exceed 255 characters")
        @JsonProperty("name")
        String name,

        @Schema(
                description = "**[REQUIRED]** Type of certificate this template is designed for.",
                example = "COURSE_COMPLETION",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"COURSE_COMPLETION", "PARTICIPATION", "ACHIEVEMENT", "CUSTOM"}
        )
        @NotNull(message = "Template type is required")
        @JsonProperty("template_type")
        TemplateType templateType,

        @Schema(
                description = "**[OPTIONAL]** HTML content defining the certificate layout and structure.",
                example = "<div class='certificate'><h1>Certificate of Completion</h1><p>This certifies that</p><h2>{{student_name}}</h2><p>has successfully completed</p><h3>{{course_name}}</h3></div>",
                maxLength = 20000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 20000, message = "Template HTML must not exceed 20000 characters")
        @JsonProperty("template_html")
        String templateHtml,

        @Schema(
                description = "**[OPTIONAL]** CSS styles for the certificate template design.",
                example = ".certificate { font-family: 'Times New Roman', serif; text-align: center; padding: 50px; } h1 { color: #2c3e50; font-size: 36px; } h2 { color: #e74c3c; font-size: 28px; }",
                maxLength = 50000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 50000, message = "Template CSS must not exceed 50000 characters")
        @JsonProperty("template_css")
        String templateCss,

        @Schema(
                description = "**[OPTIONAL]** URL to the background image for the certificate.",
                example = "https://storage.sarafrika.com/templates/music_cert_bg.jpg",
                maxLength = 500,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Background image URL must not exceed 500 characters")
        @JsonProperty("background_image_url")
        String backgroundImageUrl,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the template is actively available for use. Can only be true for published templates.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the template was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this template. Used for audit trails.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the template was last modified. Automatically updated by the system.",
                example = "2024-04-05T14:20:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this template. Used for audit trails.",
                example = "design@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns an assessment of the template's design complexity.
     *
     * @return Design complexity classification
     */
    @JsonProperty(value = "design_complexity", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Assessment of the template's design complexity based on HTML and CSS content.",
            example = "Standard Design",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDesignComplexity() {
        boolean hasHtml = templateHtml != null && !templateHtml.trim().isEmpty();
        boolean hasCss = templateCss != null && !templateCss.trim().isEmpty();
        boolean hasBackground = backgroundImageUrl != null && !backgroundImageUrl.trim().isEmpty();

        if (hasHtml && hasCss && hasBackground) {
            return "Complex Design";
        } else if ((hasHtml && hasCss) || hasBackground) {
            return "Standard Design";
        } else if (hasHtml || hasCss) {
            return "Simple Design";
        }

        return "Basic Template";
    }
}