package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Quiz Question Option Data Transfer Object
 * <p>
 * Represents individual answer options for quiz questions in the Sarafrika Elimika system,
 * defining option text, correctness status, and display ordering.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "QuizQuestionOption",
        description = "Individual answer option for quiz questions with correctness and ordering information",
        example = """
        {
            "uuid": "o1p2t3i4-5o6n-7q8u-9e10-abcdefghijkl",
            "question_uuid": "q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl",
            "option_text": "A major scale consists of seven different pitches arranged in a specific pattern of whole and half steps.",
            "is_correct": true,
            "display_order": 2,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-03T10:15:00",
            "updated_by": "instructor@sarafrika.com",
            "option_category": "Correct Answer Option",
            "is_incorrect": false,
            "position_display": "Option 2",
            "correctness_status": "Correct Answer",
            "option_summary": "Correct answer option in position 2"
        }
        """
)
public record QuizQuestionOptionDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the quiz question option. Auto-generated by the system.",
                example = "o1p2t3i4-5o6n-7q8u-9e10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the quiz question UUID this option belongs to.",
                example = "q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Question UUID is required")
        @JsonProperty("question_uuid")
        UUID questionUuid,

        @Schema(
                description = "**[REQUIRED]** Text content of the answer option displayed to students.",
                example = "A major scale consists of seven different pitches arranged in a specific pattern of whole and half steps.",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 1000
        )
        @NotBlank(message = "Option text is required")
        @Size(max = 1000, message = "Option text must not exceed 1000 characters")
        @JsonProperty("option_text")
        String optionText,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this option is the correct answer for the question.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_correct")
        Boolean isCorrect,

        @Schema(
                description = "**[OPTIONAL]** Display order of this option within the question's answer choices.",
                example = "2",
                minimum = "1",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Display order must be at least 1")
        @JsonProperty("display_order")
        Integer displayOrder,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the option was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this option. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the option was last modified. Automatically updated by the system.",
                example = "2024-04-03T10:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this option. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on correctness status.
     *
     * @return Formatted option category
     */
    @JsonProperty(value = "option_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the option based on its correctness status.",
            example = "Correct Answer Option",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getOptionCategory() {
        boolean correct = isCorrect != null && isCorrect;

        if (correct) {
            return "Correct Answer Option";
        } else {
            return "Incorrect Answer Option";
        }
    }

    /**
     * Checks if the option is incorrect.
     *
     * @return true if option is not correct
     */
    @JsonProperty(value = "is_incorrect", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this option is an incorrect answer choice.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isIncorrect() {
        return isCorrect == null || !isCorrect;
    }

    /**
     * Returns a formatted display of the option position.
     *
     * @return Formatted position display
     */
    @JsonProperty(value = "position_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the option's position within the question.",
            example = "Option 2",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPositionDisplay() {
        if (displayOrder == null) {
            return "Position not set";
        }

        return "Option " + displayOrder;
    }

    /**
     * Returns the correctness status description.
     *
     * @return Correctness status for instructor view
     */
    @JsonProperty(value = "correctness_status", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Status description indicating whether this option is correct or incorrect.",
            example = "Correct Answer",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCorrectnessStatus() {
        boolean correct = isCorrect != null && isCorrect;

        return correct ? "Correct Answer" : "Incorrect Answer";
    }

    /**
     * Returns a comprehensive option summary.
     *
     * @return Summary for question management and review
     */
    @JsonProperty(value = "option_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the option including correctness and position.",
            example = "Correct answer option in position 2",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getOptionSummary() {
        boolean correct = isCorrect != null && isCorrect;
        String correctnessDesc = correct ? "Correct answer" : "Incorrect answer";

        String positionDesc = displayOrder != null ? " in position " + displayOrder : "";

        return correctnessDesc + " option" + positionDesc;
    }
}