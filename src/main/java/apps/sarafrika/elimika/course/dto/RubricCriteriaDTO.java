package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Rubric Criteria Data Transfer Object
 * <p>
 * Represents individual assessment criteria within rubrics in the Sarafrika Elimika system,
 * defining specific evaluation components and their descriptions.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "RubricCriteria",
        description = "Individual assessment criteria within a rubric defining evaluation components",
        example = """
        {
            "uuid": "r1c2r3i4-5t6e-7r8i-9a10-abcdefghijkl",
            "rubric_uuid": "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
            "component_name": "Technique",
            "description": "Technical proficiency and skill execution in performance",
            "display_order": 1,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "criteria_category": "Performance Component",
            "is_primary_criteria": true,
            "weight_suggestion": "High Priority",
            "criteria_number": "Criteria 1"
        }
        """
)
public record RubricCriteriaDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the rubric criteria. Auto-generated by the system.",
                example = "r1c2r3i4-5t6e-7r8i-9a10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the rubric UUID that contains this criteria.",
                example = "a1s2s3r4-5u6b-7r8i-9c10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Rubric UUID is required")
        @JsonProperty("rubric_uuid")
        UUID rubricUuid,

        @Schema(
                description = "**[REQUIRED]** Name of the assessment component being evaluated.",
                example = "Technique",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 100
        )
        @NotBlank(message = "Component name is required")
        @Size(max = 100, message = "Component name must not exceed 100 characters")
        @JsonProperty("component_name")
        String componentName,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of what this criteria evaluates and measures.",
                example = "Technical proficiency and skill execution in performance including accuracy, fluency, and control",
                maxLength = 500,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Description must not exceed 500 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[REQUIRED]** Display order of the criteria within the rubric for consistent presentation.",
                example = "1",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1"
        )
        @NotNull(message = "Display order is required")
        @Min(value = 1, message = "Display order must be at least 1")
        @JsonProperty("display_order")
        Integer displayOrder,


        @Schema(
                description = "**[READ-ONLY]** Timestamp when the criteria was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this criteria. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the criteria was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this criteria. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category for the criteria based on its name.
     *
     * @return Criteria category classification
     */
    @JsonProperty(value = "criteria_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Category classification of the assessment criteria.",
            example = "Performance Component",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCriteriaCategory() {
        if (componentName == null) {
            return "General Component";
        }

        String lowerName = componentName.toLowerCase();
        if (lowerName.contains("technique") || lowerName.contains("skill")) {
            return "Performance Component";
        } else if (lowerName.contains("quality") || lowerName.contains("tone")) {
            return "Quality Component";
        } else if (lowerName.contains("rhythm") || lowerName.contains("timing")) {
            return "Timing Component";
        } else if (lowerName.contains("presentation") || lowerName.contains("expression")) {
            return "Expression Component";
        } else if (lowerName.contains("accuracy") || lowerName.contains("precision")) {
            return "Accuracy Component";
        } else {
            return "Assessment Component";
        }
    }

    /**
     * Checks if this is a primary criteria based on display order.
     *
     * @return true if this is among the first criteria (order 1-3)
     */
    @JsonProperty(value = "is_primary_criteria", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this is a primary assessment criteria.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPrimaryCriteria() {
        return displayOrder != null && displayOrder <= 3;
    }

    /**
     * Returns a weight suggestion based on criteria type and order.
     *
     * @return Suggested weight/priority for this criteria
     */
    @JsonProperty(value = "weight_suggestion", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Suggested weight or priority level for this criteria.",
            example = "High Priority",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getWeightSuggestion() {
        if (isPrimaryCriteria()) {
            return "High Priority";
        } else if (displayOrder != null && displayOrder <= 6) {
            return "Medium Priority";
        } else {
            return "Standard Priority";
        }
    }

    /**
     * Returns a formatted criteria number for display purposes.
     *
     * @return Formatted criteria number
     */
    @JsonProperty(value = "criteria_number", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted criteria number for display in assessment interface.",
            example = "Criteria 1",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCriteriaNumber() {
        return displayOrder != null ? "Criteria " + displayOrder : "Criteria";
    }
}