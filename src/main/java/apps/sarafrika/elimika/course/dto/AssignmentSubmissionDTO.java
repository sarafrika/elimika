package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.SubmissionStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Assignment Submission Data Transfer Object
 * <p>
 * Represents student submissions for assignments in the Sarafrika Elimika system,
 * including submission content, grading information, and status tracking.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "AssignmentSubmission",
        description = "Student submission for an assignment with grading and feedback information",
        example = """
        {
            "uuid": "s1u2b3m4-5i6s-7s8i-9o10-abcdefghijkl",
            "enrollment_uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
            "assignment_uuid": "a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl",
            "submission_text": "This is my analysis of the music theory concepts covered in the lesson. I have identified the key signatures and analyzed the chord progressions as requested.",
            "file_urls": ["https://storage.sarafrika.com/submissions/audio_example.mp3", "https://storage.sarafrika.com/submissions/written_analysis.pdf"],
            "submitted_at": "2024-04-10T14:30:00",
            "status": "GRADED",
            "score": 85.00,
            "max_score": 100.00,
            "percentage": 85.00,
            "instructor_comments": "Excellent analysis of the chord progressions. The audio example demonstrates good understanding of the concepts. Minor improvement needed in identifying secondary dominants.",
            "graded_at": "2024-04-12T16:45:00",
            "graded_by_uuid": "i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl",
            "created_date": "2024-04-10T14:30:00",
            "created_by": "student@sarafrika.com",
            "updated_date": "2024-04-12T16:45:00",
            "updated_by": "instructor@sarafrika.com",
            "submission_category": "Mixed Media Submission",
            "is_graded": true,
            "grade_display": "85.00 / 100.00 (85%)",
            "submission_status_display": "Graded - Instructor Feedback Available",
            "file_count_display": "2 files attached"
        }
        """
)
public record AssignmentSubmissionDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the assignment submission. Auto-generated by the system.",
                example = "s1u2b3m4-5i6s-7s8i-9o10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the enrollment UUID of the student making this submission.",
                example = "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Enrollment UUID is required")
        @JsonProperty("enrollment_uuid")
        UUID enrollmentUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the assignment UUID this submission is for.",
                example = "a1s2s3g4-5n6m-7e8n-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Assignment UUID is required")
        @JsonProperty("assignment_uuid")
        UUID assignmentUuid,

        @Schema(
                description = "**[OPTIONAL]** Text content of the student's submission.",
                example = "This is my analysis of the music theory concepts covered in the lesson. I have identified the key signatures and analyzed the chord progressions as requested.",
                maxLength = 10000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 10000, message = "Submission text must not exceed 10000 characters")
        @JsonProperty("submission_text")
        String submissionText,

        @Schema(
                description = "**[OPTIONAL]** Array of file URLs attached to this submission.",
                example = "[\"https://storage.sarafrika.com/submissions/audio_example.mp3\", \"https://storage.sarafrika.com/submissions/written_analysis.pdf\"]",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("file_urls")
        String[] fileUrls,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the submission was made by the student.",
                example = "2024-04-10T14:30:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("submitted_at")
        LocalDateTime submittedAt,

        @Schema(
                description = "**[REQUIRED]** Current status of the submission in the grading workflow.",
                example = "GRADED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"DRAFT", "SUBMITTED", "IN_REVIEW", "GRADED", "RETURNED"}
        )
        @NotNull(message = "Status is required")
        @JsonProperty("status")
        SubmissionStatus status,

        @Schema(
                description = "**[OPTIONAL]** Score awarded to this submission by the instructor.",
                example = "85.00",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Score must be non-negative")
        @JsonProperty("score")
        BigDecimal score,

        @Schema(
                description = "**[OPTIONAL]** Maximum possible score for this submission.",
                example = "100.00",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Maximum score must be non-negative")
        @JsonProperty("max_score")
        BigDecimal maxScore,

        @Schema(
                description = "**[OPTIONAL]** Percentage score calculated from score and max_score.",
                example = "85.00",
                minimum = "0",
                maximum = "100",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Percentage must be non-negative")
        @DecimalMax(value = "100.0", message = "Percentage cannot exceed 100")
        @JsonProperty("percentage")
        BigDecimal percentage,

        @Schema(
                description = "**[OPTIONAL]** Instructor's feedback and comments on the submission.",
                example = "Excellent analysis of the chord progressions. The audio example demonstrates good understanding of the concepts. Minor improvement needed in identifying secondary dominants.",
                maxLength = 5000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 5000, message = "Instructor comments must not exceed 5000 characters")
        @JsonProperty("instructor_comments")
        String instructorComments,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the submission was graded by the instructor.",
                example = "2024-04-12T16:45:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("graded_at")
        LocalDateTime gradedAt,

        @Schema(
                description = "**[OPTIONAL]** Reference to the instructor UUID who graded this submission.",
                example = "i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("graded_by_uuid")
        UUID gradedByUuid,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the submission was created. Automatically set by the system.",
                example = "2024-04-10T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the student who created this submission. Used for audit trails.",
                example = "student@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the submission was last modified. Automatically updated by the system.",
                example = "2024-04-12T16:45:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this submission. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on submission content type.
     *
     * @return Formatted submission category
     */
    @JsonProperty(value = "submission_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the submission based on its content type.",
            example = "Mixed Media Submission",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSubmissionCategory() {
        boolean hasText = submissionText != null && !submissionText.trim().isEmpty();
        boolean hasFiles = fileUrls != null && fileUrls.length > 0;

        if (hasText && hasFiles) {
            return "Mixed Media Submission";
        } else if (hasFiles) {
            return "File Submission";
        } else if (hasText) {
            return "Text Submission";
        }

        return "Empty Submission";
    }

    /**
     * Checks if the submission has been graded.
     *
     * @return true if status is GRADED
     */
    @JsonProperty(value = "is_graded", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the submission has been graded by an instructor.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isGraded() {
        return status == SubmissionStatus.GRADED;
    }

    /**
     * Returns a formatted display of the grade information.
     *
     * @return Formatted grade display
     */
    @JsonProperty(value = "grade_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the grade information.",
            example = "85.00 / 100.00 (85%)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getGradeDisplay() {
        if (score == null || maxScore == null) {
            return "Not graded";
        }

        String percentageStr = percentage != null ? " (" + percentage + "%)" : "";
        return score + " / " + maxScore + percentageStr;
    }

    /**
     * Returns a comprehensive status description.
     *
     * @return Detailed status for student and instructor view
     */
    @JsonProperty(value = "submission_status_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive status indicating submission state and availability of feedback.",
            example = "Graded - Instructor Feedback Available",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSubmissionStatusDisplay() {
        return switch (status) {
            case DRAFT -> "Draft - Not Yet Submitted";
            case SUBMITTED -> "Submitted - Awaiting Review";
            case GRADED -> {
                boolean hasFeedback = instructorComments != null && !instructorComments.trim().isEmpty();
                yield "Graded" + (hasFeedback ? " - Instructor Feedback Available" : " - No Additional Feedback");
            }
            case RETURNED -> "Returned - Requires Resubmission";
        };
    }

    /**
     * Returns a summary of attached files.
     *
     * @return File attachment summary
     */
    @JsonProperty(value = "file_count_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Summary of files attached to this submission.",
            example = "2 files attached",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFileCountDisplay() {
        if (fileUrls == null || fileUrls.length == 0) {
            return "No files attached";
        }

        if (fileUrls.length == 1) {
            return "1 file attached";
        }

        return fileUrls.length + " files attached";
    }
}