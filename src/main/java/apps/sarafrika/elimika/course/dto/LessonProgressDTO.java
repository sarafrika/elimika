package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.ProgressStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Lesson Progress Data Transfer Object
 * <p>
 * Represents student progress tracking for individual lessons in the Sarafrika Elimika system,
 * including completion status, time tracking, and learning analytics.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "LessonProgress",
        description = "Student progress tracking for individual lessons with completion and time metrics",
        example = """
        {
            "uuid": "l1p2r3o4-5g6r-7e8s-9s10-abcdefghijkl",
            "enrollment_uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
            "lesson_uuid": "l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl",
            "status": "COMPLETED",
            "started_at": "2024-04-05T10:15:00",
            "completed_at": "2024-04-05T12:30:00",
            "time_spent_minutes": 135,
            "created_date": "2024-04-05T10:15:00",
            "created_by": "system@sarafrika.com",
            "updated_date": "2024-04-05T12:30:00",
            "updated_by": "system@sarafrika.com",
            "progress_category": "Completed Lesson",
            "is_completed": true,
            "time_display": "2 hours 15 minutes",
            "completion_efficiency": "Standard Pace",
            "learning_summary": "Completed in single session with good time investment"
        }
        """
)
public record LessonProgressDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the lesson progress record. Auto-generated by the system.",
                example = "l1p2r3o4-5g6r-7e8s-9s10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the enrollment UUID of the student whose lesson progress is being tracked.",
                example = "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Enrollment UUID is required")
        @JsonProperty("enrollment_uuid")
        UUID enrollmentUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the lesson UUID being tracked for progress.",
                example = "l1e2s3s4-5o6n-7u8u-9i10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Lesson UUID is required")
        @JsonProperty("lesson_uuid")
        UUID lessonUuid,

        @Schema(
                description = "**[REQUIRED]** Current progress status of the lesson for the student.",
                example = "COMPLETED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"NOT_STARTED", "IN_PROGRESS", "COMPLETED", "SKIPPED"}
        )
        @NotNull(message = "Progress status is required")
        @JsonProperty("status")
        ProgressStatus status,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the student started working on this lesson.",
                example = "2024-04-05T10:15:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("started_at")
        LocalDateTime startedAt,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the student completed this lesson. Null if not yet completed.",
                example = "2024-04-05T12:30:00",
                format = "date-time",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("completed_at")
        LocalDateTime completedAt,

        @Schema(
                description = "**[OPTIONAL]** Total time spent on this lesson in minutes.",
                example = "135",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 0, message = "Time spent must be non-negative")
        @JsonProperty("time_spent_minutes")
        Integer timeSpentMinutes,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the progress record was created. Automatically set by the system.",
                example = "2024-04-05T10:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** System identifier or username that created this progress record. Used for audit trails.",
                example = "system@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the progress record was last modified. Automatically updated by the system.",
                example = "2024-04-05T12:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** System identifier or username that last modified this progress record. Used for audit trails.",
                example = "system@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on progress status.
     *
     * @return Formatted progress category
     */
    @JsonProperty(value = "progress_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the progress based on current status.",
            example = "Completed Lesson",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getProgressCategory() {
        if (status == null) {
            return "Unknown Status";
        }

        return switch (status) {
            case NOT_STARTED -> "Not Started";
            case IN_PROGRESS -> "Active Lesson";
            case COMPLETED -> "Completed Lesson";
            case SKIPPED -> "Skipped Lesson";
        };
    }

    /**
     * Checks if the lesson has been completed.
     *
     * @return true if status is COMPLETED
     */
    @JsonProperty(value = "is_completed", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the lesson has been completed by the student.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isCompleted() {
        return status == ProgressStatus.COMPLETED;
    }

    /**
     * Returns a formatted display of time spent.
     *
     * @return Formatted time display
     */
    @JsonProperty(value = "time_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the time spent on this lesson.",
            example = "2 hours 15 minutes",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getTimeDisplay() {
        if (timeSpentMinutes == null || timeSpentMinutes == 0) {
            return "No time recorded";
        }

        int hours = timeSpentMinutes / 60;
        int minutes = timeSpentMinutes % 60;

        if (hours == 0) {
            return minutes + (minutes == 1 ? " minute" : " minutes");
        } else if (minutes == 0) {
            return hours + (hours == 1 ? " hour" : " hours");
        } else {
            return hours + (hours == 1 ? " hour " : " hours ") +
                    minutes + (minutes == 1 ? " minute" : " minutes");
        }
    }

    /**
     * Returns an assessment of completion efficiency.
     *
     * @return Efficiency classification based on time spent
     */
    @JsonProperty(value = "completion_efficiency", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Assessment of completion efficiency based on time investment.",
            example = "Standard Pace",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCompletionEfficiency() {
        if (timeSpentMinutes == null || timeSpentMinutes == 0 || status != ProgressStatus.COMPLETED) {
            return "Not applicable";
        }

        // Assuming typical lesson duration is 60-120 minutes
        if (timeSpentMinutes <= 30) {
            return "Very Fast";
        } else if (timeSpentMinutes <= 60) {
            return "Fast Pace";
        } else if (timeSpentMinutes <= 120) {
            return "Standard Pace";
        } else if (timeSpentMinutes <= 180) {
            return "Thorough Study";
        } else {
            return "Extended Study";
        }
    }

    /**
     * Returns a comprehensive learning summary.
     *
     * @return Learning summary for progress analysis
     */
    @JsonProperty(value = "learning_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the student's learning progress for this lesson.",
            example = "Completed in single session with good time investment",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getLearningSummary() {
        return switch (status) {
            case NOT_STARTED -> "Lesson not yet accessed by student";
            case IN_PROGRESS -> {
                String timeInfo = timeSpentMinutes != null && timeSpentMinutes > 0 ?
                        " (" + getTimeDisplay() + " so far)" : "";
                yield "Currently working on lesson" + timeInfo;
            }
            case COMPLETED -> {
                String timeInfo = timeSpentMinutes != null && timeSpentMinutes > 0 ?
                        " with " + getTimeDisplay() + " invested" : "";
                String sessionInfo = (startedAt != null && completedAt != null &&
                        startedAt.toLocalDate().equals(completedAt.toLocalDate())) ?
                        "Completed in single session" : "Completed across multiple sessions";
                yield sessionInfo + timeInfo;
            }
            case SKIPPED -> "Lesson was skipped by student";
        };
    }
}