package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Difficulty Level Data Transfer Object
 * <p>
 * Represents course difficulty levels in the Sarafrika Elimika system, providing
 * structured progression paths from preparatory to advanced levels.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "DifficultyLevel",
        description = "Course difficulty level defining learning progression stages",
        example = """
        {
            "uuid": "d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl",
            "name": "Intermediate",
            "level_order": 3,
            "description": "For learners with basic knowledge seeking to develop intermediate skills",
            "created_date": "2024-04-01T12:00:00",
            "created_by": "system",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "admin@sarafrika.com",
            "display_name": "Level 3: Intermediate",
            "is_entry_level": false
        }
        """
)
public record DifficultyLevelDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the difficulty level. Auto-generated by the system.",
                example = "d1i2f3f4-5i6c-7u8l-9t10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Name of the difficulty level. Must be unique across all difficulty levels.",
                example = "Intermediate",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 50
        )
        @NotBlank(message = "Difficulty level name is required")
        @Size(max = 50, message = "Name must not exceed 50 characters")
        @JsonProperty("name")
        String name,

        @Schema(
                description = "**[REQUIRED]** Numeric order defining the progression sequence. Lower numbers indicate easier levels.",
                example = "3",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1",
                maximum = "10"
        )
        @NotNull(message = "Level order is required")
        @Min(value = 1, message = "Level order must be at least 1")
        @Max(value = 10, message = "Level order must not exceed 10")
        @JsonProperty("level_order")
        Integer levelOrder,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the difficulty level and target audience.",
                example = "For learners with basic knowledge seeking to develop intermediate skills and tackle more complex challenges",
                maxLength = 500,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Description must not exceed 500 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the difficulty level was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this difficulty level. Used for audit trails.",
                example = "system",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the difficulty level was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this difficulty level. Used for audit trails.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display name including level order.
     *
     * @return Formatted display name with level order
     */
    @JsonProperty(value = "display_name", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display name including level order for UI presentation.",
            example = "Level 3: Intermediate",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDisplayName() {
        return "Level " + levelOrder + ": " + name;
    }

    /**
     * Checks if this is an entry-level difficulty (level order 1).
     *
     * @return true if this is the first level in progression
     */
    @JsonProperty(value = "is_entry_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this is the entry-level difficulty for beginners.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isEntryLevel() {
        return levelOrder != null && levelOrder == 1;
    }
}