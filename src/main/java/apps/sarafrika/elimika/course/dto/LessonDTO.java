package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.LessonType;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Lesson Data Transfer Object
 * <p>
 * Represents a lesson within a course in the Sarafrika Elimika system with all necessary
 * lesson information, content details, duration estimates, and audit information.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2025-06-26 11:30
 */
@Schema(
        name = "Lesson",
        description = "Complete lesson information including content details, course association, duration estimates, and system metadata",
        example = """
                {
                    "id": 1,
                    "uuid": "a1b2c3d4-e5f6-11ee-be56-0242ac120002",
                    "lesson_no": 1,
                    "course_uuid": "f3e7a8b9-4c5d-11ee-be56-0242ac120002",
                    "lesson_name": "Introduction to Variables",
                    "lesson_description": "Learn about variables, data types, and how to declare and use them in programming.",
                    "lesson_type": "VIDEO",
                    "estimated_duration_minutes": 45,
                    "created_date": "2024-06-01T10:00:00",
                    "updated_date": "2024-06-15T14:30:00",
                    "created_by": "instructor@sarafrika.com",
                    "updated_by": "content.admin@sarafrika.com"
                }
                """
)
public record LessonDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the lesson. Auto-generated by the system and cannot be modified. Used for external API references.",
                example = "a1b2c3d4-e5f6-11ee-be56-0242ac120002",
                format = "uuid",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Sequential lesson number within the course. Determines the order of lessons and must be unique within the course. Used for lesson progression tracking.",
                example = "1",
                minimum = "1",
                maximum = "1000",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Lesson number is required")
        @Min(value = 1, message = "Lesson number must be at least 1")
        @Max(value = 1000, message = "Lesson number must not exceed 1000")
        @JsonProperty("lesson_no")
        Integer lessonNo,

        @Schema(
                description = "**[REQUIRED]** UUID of the course this lesson belongs to. Links the lesson to its parent course and determines access permissions.",
                example = "f3e7a8b9-4c5d-11ee-be56-0242ac120002",
                format = "uuid",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course UUID is required")
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[REQUIRED]** Title of the lesson. This is the primary display name used in course navigation and lesson lists.",
                example = "Introduction to Variables",
                minLength = 1,
                maxLength = 200,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Lesson name is required")
        @Size(min = 1, max = 200, message = "Lesson name must be between 1 and 200 characters")
        @JsonProperty("lesson_name")
        String lessonName,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the lesson content and learning objectives. Used for lesson previews and helps students understand what they will learn.",
                example = "Learn about variables, data types, and how to declare and use them in programming.",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Lesson description must not exceed 2000 characters")
        @JsonProperty("lesson_description")
        String lessonDescription,

        @Schema(
                description = "**[REQUIRED]** Type of lesson content that determines how the lesson is delivered and consumed by students.",
                example = "VIDEO",
                allowableValues = {"TEXT", "VIDEO", "PDF", "YOUTUBE_LINK"},
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Lesson type is required")
        @JsonProperty("lesson_type")
        LessonType lessonType,

        @Schema(
                description = "**[OPTIONAL]** Estimated time in minutes required to complete this lesson. Used for course planning and student time management. Must be positive if specified.",
                example = "45",
                minimum = "1",
                maximum = "600",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Estimated duration must be at least 1 minute")
        @Max(value = 600, message = "Estimated duration must not exceed 600 minutes (10 hours)")
        @JsonProperty("estimated_duration_minutes")
        Integer estimatedDurationMinutes,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the lesson was first created in the system. Automatically set by the system and cannot be modified.",
                example = "2024-06-01T10:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the lesson was last modified. Automatically updated by the system on any changes and cannot be directly modified.",
                example = "2024-06-15T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime lastModifiedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or identifier of the user who created this lesson. Automatically set by the system and cannot be modified.",
                example = "instructor@sarafrika.com",
                maxLength = 100,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Email or identifier of the user who last modified this lesson. Automatically updated by the system and cannot be directly modified.",
                example = "content.admin@sarafrika.com",
                maxLength = 100,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String lastModifiedBy

) {

    /**
     * Checks if the lesson has an estimated duration.
     *
     * @return true if estimated duration is set and positive, false otherwise
     */
    public boolean hasDuration() {
        return estimatedDurationMinutes != null && estimatedDurationMinutes > 0;
    }

    /**
     * Returns the estimated duration in hours and minutes format.
     *
     * @return formatted duration string (e.g., "1h 30m") or "Duration not specified" if null
     */
    public String getFormattedDuration() {
        if (estimatedDurationMinutes == null || estimatedDurationMinutes <= 0) {
            return "Duration not specified";
        }

        int hours = estimatedDurationMinutes / 60;
        int minutes = estimatedDurationMinutes % 60;

        if (hours > 0 && minutes > 0) {
            return String.format("%dh %dm", hours, minutes);
        } else if (hours > 0) {
            return String.format("%dh", hours);
        } else {
            return String.format("%dm", minutes);
        }
    }

    /**
     * Checks if this lesson is an interactive type that requires active participation.
     *
     * @return true if lesson type is VIDEO or YOUTUBE_LINK (multimedia content)
     */
    public boolean isInteractive() {
        if (lessonType == null) {
            return false;
        }
        // For the available lesson types, VIDEO and YOUTUBE_LINK can be considered interactive
        return lessonType == LessonType.VIDEO || lessonType == LessonType.YOUTUBE_LINK;
    }

    /**
     * Checks if this lesson contains multimedia content.
     *
     * @return true if lesson type is VIDEO or YOUTUBE_LINK
     */
    public boolean isMultimedia() {
        if (lessonType == null) {
            return false;
        }
        return lessonType == LessonType.VIDEO || lessonType == LessonType.YOUTUBE_LINK;
    }

    /**
     * Checks if this lesson is text-based content.
     *
     * @return true if lesson type is TEXT or PDF
     */
    public boolean isTextBased() {
        if (lessonType == null) {
            return false;
        }
        return lessonType == LessonType.TEXT || lessonType == LessonType.PDF;
    }

    /**
     * Returns a brief summary of the lesson for display purposes.
     *
     * @return formatted lesson summary including lesson number, name, type, and duration
     */
    public String getLessonSummary() {
        StringBuilder summary = new StringBuilder();
        summary.append("Lesson ").append(lessonNo).append(": ").append(lessonName);

        if (lessonType != null) {
            String typeDisplay = switch (lessonType) {
                case TEXT -> "text";
                case VIDEO -> "video";
                case PDF -> "pdf";
                case YOUTUBE_LINK -> "youtube video";
            };
            summary.append(" (").append(typeDisplay).append(")");
        }

        if (hasDuration()) {
            summary.append(" - ").append(getFormattedDuration());
        }

        return summary.toString();
    }

    /**
     * Checks if this is the first lesson in a course.
     *
     * @return true if lesson number is 1, false otherwise
     */
    public boolean isFirstLesson() {
        return lessonNo != null && lessonNo == 1;
    }

    /**
     * Validates if this lesson can be considered as completed based on its type.
     * Some lesson types require explicit completion tracking.
     *
     * @return true if lesson type supports completion tracking
     */
    public boolean supportsCompletion() {
        if (lessonType == null) {
            return false;
        }
        // All lesson types support completion, but interactive ones require explicit action
        return true;
    }
}