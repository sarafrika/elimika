package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.ContentStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Lesson Data Transfer Object
 * <p>
 * Represents a lesson within a course in the Sarafrika Elimika system, organizing
 * educational content into structured learning units.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "Lesson",
        description = "Individual lesson within a course containing structured learning content",
        example = """
        {
            "uuid": "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
            "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "lesson_number": 3,
            "title": "Object-Oriented Programming Fundamentals",
            "duration_hours": 2,
            "duration_minutes": 30,
            "description": "Introduction to OOP concepts including classes, objects, inheritance, and polymorphism",
            "learning_objectives": "Understand OOP principles, implement classes and objects, apply inheritance concepts",
            "status": "PUBLISHED",
            "active": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "duration_display": "2 hours 30 minutes",
            "is_published": true,
            "lesson_sequence": "Lesson 3"
        }
        """
)
public record LessonDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the lesson. Auto-generated by the system.",
                example = "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the parent course UUID that contains this lesson.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course UUID is required")
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[REQUIRED]** Sequential number of the lesson within the course. Must be unique per course.",
                example = "3",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1"
        )
        @NotNull(message = "Lesson number is required")
        @Min(value = 1, message = "Lesson number must be at least 1")
        @JsonProperty("lesson_number")
        Integer lessonNumber,

        @Schema(
                description = "**[REQUIRED]** Descriptive title of the lesson that clearly indicates the learning content.",
                example = "Object-Oriented Programming Fundamentals",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Lesson title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[REQUIRED]** Estimated lesson duration in hours.",
                example = "2",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0"
        )
        @NotNull(message = "Duration hours is required")
        @Min(value = 0, message = "Duration hours cannot be negative")
        @JsonProperty("duration_hours")
        Integer durationHours,

        @Schema(
                description = "**[REQUIRED]** Additional lesson duration in minutes (0-59).",
                example = "30",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0",
                maximum = "59"
        )
        @NotNull(message = "Duration minutes is required")
        @Min(value = 0, message = "Duration minutes cannot be negative")
        @Max(value = 59, message = "Duration minutes cannot exceed 59")
        @JsonProperty("duration_minutes")
        Integer durationMinutes,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the lesson content and what students will learn.",
                example = "Introduction to Object-Oriented Programming concepts including classes, objects, inheritance, and polymorphism with practical examples",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Specific learning objectives and outcomes for this lesson.",
                example = "Understand OOP principles, implement classes and objects, apply inheritance concepts in practical scenarios",
                maxLength = 500,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Learning objectives must not exceed 500 characters")
        @JsonProperty("learning_objectives")
        String learningObjectives,

        @Schema(
                description = "**[REQUIRED]** Lesson publication status in the content workflow.",
                example = "PUBLISHED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"DRAFT", "IN_REVIEW", "PUBLISHED", "ARCHIVED"}
        )
        @NotNull(message = "Status is required")
        @JsonProperty("status")
        ContentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the lesson is actively available to students. Can only be true for published lessons.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the lesson was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this lesson. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the lesson was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this lesson. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display string for lesson duration.
     *
     * @return Formatted duration string
     */
    @JsonProperty(value = "duration_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of lesson duration.",
            example = "2 hours 30 minutes",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDurationDisplay() {
        if (durationHours == null && durationMinutes == null) {
            return "Duration not specified";
        }

        int hours = durationHours != null ? durationHours : 0;
        int minutes = durationMinutes != null ? durationMinutes : 0;

        if (hours == 0 && minutes == 0) {
            return "Duration not specified";
        }

        StringBuilder sb = new StringBuilder();
        if (hours > 0) {
            sb.append(hours).append(" hour").append(hours != 1 ? "s" : "");
        }
        if (minutes > 0) {
            if (sb.length() > 0) sb.append(" ");
            sb.append(minutes).append(" minute").append(minutes != 1 ? "s" : "");
        }

        return sb.toString();
    }

    /**
     * Checks if the lesson is published and available to students.
     *
     * @return true if status is PUBLISHED
     */
    @JsonProperty(value = "is_published", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the lesson is published and accessible to students.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPublished() {
        return status == ContentStatus.PUBLISHED;
    }

    /**
     * Returns a formatted lesson sequence display.
     *
     * @return Formatted lesson sequence string
     */
    @JsonProperty(value = "lesson_sequence", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted lesson sequence for display purposes.",
            example = "Lesson 3",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getLessonSequence() {
        return lessonNumber != null ? "Lesson " + lessonNumber : "Lesson";
    }
}