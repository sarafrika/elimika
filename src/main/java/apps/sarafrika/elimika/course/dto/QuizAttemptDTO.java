package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.AttemptStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.DecimalMax;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Quiz Attempt Data Transfer Object
 * <p>
 * Represents student attempts at quizzes in the Sarafrika Elimika system,
 * tracking timing, scoring, and completion status for each quiz attempt.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "QuizAttempt",
        description = "Student quiz attempt with timing, scoring, and completion tracking",
        example = """
        {
            "uuid": "q1a2t3t4-5e6m-7p8t-9a10-abcdefghijkl",
            "enrollment_uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
            "quiz_uuid": "q1u2i3z4-5u6u-7i8d-9q10-abcdefghijkl",
            "attempt_number": 2,
            "started_at": "2024-04-10T14:15:00",
            "submitted_at": "2024-04-10T15:30:00",
            "time_taken_minutes": 75,
            "score": 85.00,
            "max_score": 100.00,
            "percentage": 85.00,
            "is_passed": true,
            "status": "GRADED",
            "created_date": "2024-04-10T14:15:00",
            "created_by": "student@sarafrika.com",
            "updated_date": "2024-04-10T15:30:00",
            "updated_by": "system@sarafrika.com",
            "attempt_category": "Graded Attempt",
            "is_completed": true,
            "grade_display": "85.00 / 100.00 (85%)",
            "time_display": "1 hour 15 minutes",
            "performance_summary": "Passed on attempt 2 with 85% score"
        }
        """
)
public record QuizAttemptDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the quiz attempt. Auto-generated by the system.",
                example = "q1a2t3t4-5e6m-7p8t-9a10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the enrollment UUID of the student taking the quiz.",
                example = "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Enrollment UUID is required")
        @JsonProperty("enrollment_uuid")
        UUID enrollmentUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the quiz UUID being attempted.",
                example = "q1u2i3z4-5u6u-7i8d-9q10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Quiz UUID is required")
        @JsonProperty("quiz_uuid")
        UUID quizUuid,

        @Schema(
                description = "**[OPTIONAL]** Sequential number of this attempt for the same quiz by the same student.",
                example = "2",
                minimum = "1",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Attempt number must be at least 1")
        @JsonProperty("attempt_number")
        Integer attemptNumber,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the student started the quiz attempt.",
                example = "2024-04-10T14:15:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("started_at")
        LocalDateTime startedAt,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the student submitted the quiz attempt.",
                example = "2024-04-10T15:30:00",
                format = "date-time",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("submitted_at")
        LocalDateTime submittedAt,

        @Schema(
                description = "**[OPTIONAL]** Total time taken to complete the quiz in minutes.",
                example = "75",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 0, message = "Time taken must be non-negative")
        @JsonProperty("time_taken_minutes")
        Integer timeTakenMinutes,

        @Schema(
                description = "**[OPTIONAL]** Score achieved by the student on this quiz attempt.",
                example = "85.00",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Score must be non-negative")
        @JsonProperty("score")
        BigDecimal score,

        @Schema(
                description = "**[OPTIONAL]** Maximum possible score for this quiz.",
                example = "100.00",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Maximum score must be non-negative")
        @JsonProperty("max_score")
        BigDecimal maxScore,

        @Schema(
                description = "**[OPTIONAL]** Percentage score calculated from score and max_score.",
                example = "85.00",
                minimum = "0",
                maximum = "100",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Percentage must be non-negative")
        @DecimalMax(value = "100.0", message = "Percentage cannot exceed 100")
        @JsonProperty("percentage")
        BigDecimal percentage,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the student passed the quiz based on passing criteria.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_passed")
        Boolean isPassed,

        @Schema(
                description = "**[REQUIRED]** Current status of the quiz attempt.",
                example = "GRADED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"IN_PROGRESS", "SUBMITTED", "GRADED"}
        )
        @NotNull(message = "Attempt status is required")
        @JsonProperty("status")
        AttemptStatus status,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the attempt was created. Automatically set by the system.",
                example = "2024-04-10T14:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this attempt. Used for audit trails.",
                example = "student@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the attempt was last modified. Automatically updated by the system.",
                example = "2024-04-10T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this attempt. Used for audit trails.",
                example = "system@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on attempt outcome.
     *
     * @return Formatted attempt category
     */
    @JsonProperty(value = "attempt_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the attempt based on outcome and status.",
            example = "Graded Attempt",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAttemptCategory() {
        if (status == null) {
            return "Unknown Status";
        }

        return switch (status) {
            case IN_PROGRESS -> "Active Attempt";
            case SUBMITTED -> "Submitted Attempt";
            case GRADED -> {
                boolean passed = isPassed != null && isPassed;
                yield passed ? "Successful Attempt" : "Failed Attempt";
            }
        };
    }

    /**
     * Checks if the attempt has been completed.
     *
     * @return true if status is SUBMITTED or GRADED
     */
    @JsonProperty(value = "is_completed", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the quiz attempt has been completed (submitted or graded).",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isCompleted() {
        return status == AttemptStatus.SUBMITTED || status == AttemptStatus.GRADED;
    }

    /**
     * Returns a formatted display of the grade information.
     *
     * @return Formatted grade display
     */
    @JsonProperty(value = "grade_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the grade information.",
            example = "85.00 / 100.00 (85%)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getGradeDisplay() {
        if (score == null || maxScore == null) {
            return "Not graded";
        }

        String percentageStr = percentage != null ? " (" + percentage + "%)" : "";
        return score + " / " + maxScore + percentageStr;
    }

    /**
     * Returns a formatted display of time taken.
     *
     * @return Formatted time display
     */
    @JsonProperty(value = "time_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the time taken to complete the quiz.",
            example = "1 hour 15 minutes",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getTimeDisplay() {
        if (timeTakenMinutes == null || timeTakenMinutes == 0) {
            return "No time recorded";
        }

        int hours = timeTakenMinutes / 60;
        int minutes = timeTakenMinutes % 60;

        if (hours == 0) {
            return minutes + (minutes == 1 ? " minute" : " minutes");
        } else if (minutes == 0) {
            return hours + (hours == 1 ? " hour" : " hours");
        } else {
            return hours + (hours == 1 ? " hour " : " hours ") +
                    minutes + (minutes == 1 ? " minute" : " minutes");
        }
    }

    /**
     * Returns a comprehensive performance summary.
     *
     * @return Performance summary for student and instructor view
     */
    @JsonProperty(value = "performance_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the quiz attempt performance.",
            example = "Passed on attempt 2 with 85% score",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPerformanceSummary() {
        return switch (status) {
            case IN_PROGRESS -> {
                String timeInfo = timeTakenMinutes != null && timeTakenMinutes > 0 ?
                        " (" + getTimeDisplay() + " elapsed)" : "";
                yield "Quiz in progress" + timeInfo;
            }
            case SUBMITTED -> "Quiz submitted, awaiting grading";
            case GRADED -> {
                boolean passed = isPassed != null && isPassed;
                String outcome = passed ? "Passed" : "Failed";
                String attemptInfo = attemptNumber != null ? " on attempt " + attemptNumber : "";
                String scoreInfo = percentage != null ? " with " + percentage + "% score" : "";
                yield outcome + attemptInfo + scoreInfo;
            }
        };
    }
}