package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.DecimalMax;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Course Assessment Score Data Transfer Object
 * <p>
 * Represents assessment scores for course evaluations in the Sarafrika Elimika system,
 * tracking student performance on various course assessments with grading details.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "CourseAssessmentScore",
        description = "Course assessment score with grading information and instructor feedback",
        example = """
        {
            "uuid": "s1c2o3r4-5e6a-7s8s-9e10-abcdefghijkl",
            "enrollment_uuid": "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
            "assessment_uuid": "a1s2s3e4-5s6s-7m8e-9n10-abcdefghijkl",
            "score": 87.50,
            "max_score": 100.00,
            "percentage": 87.50,
            "graded_at": "2024-04-15T14:30:00",
            "graded_by_uuid": "i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl",
            "comments": "Excellent understanding of the core concepts. Strong analytical skills demonstrated throughout the assessment. Minor areas for improvement in theoretical applications.",
            "created_date": "2024-04-15T14:30:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T14:30:00",
            "updated_by": "instructor@sarafrika.com",
            "score_category": "High Performance",
            "is_passing": true,
            "grade_display": "87.50 / 100.00 (87.50%)",
            "performance_level": "Above Average",
            "feedback_summary": "Detailed instructor feedback provided"
        }
        """
)
public record CourseAssessmentScoreDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the assessment score record. Auto-generated by the system.",
                example = "s1c2o3r4-5e6a-7s8s-9e10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the enrollment UUID of the student being assessed.",
                example = "e1n2r3o4-5l6l-7m8e-9n10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Enrollment UUID is required")
        @JsonProperty("enrollment_uuid")
        UUID enrollmentUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the assessment UUID being scored.",
                example = "a1s2s3e4-5s6s-7m8e-9n10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Assessment UUID is required")
        @JsonProperty("assessment_uuid")
        UUID assessmentUuid,

        @Schema(
                description = "**[OPTIONAL]** Score achieved by the student on this assessment.",
                example = "87.50",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Score must be non-negative")
        @JsonProperty("score")
        BigDecimal score,

        @Schema(
                description = "**[OPTIONAL]** Maximum possible score for this assessment.",
                example = "100.00",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Maximum score must be non-negative")
        @JsonProperty("max_score")
        BigDecimal maxScore,

        @Schema(
                description = "**[OPTIONAL]** Percentage score calculated from score and max_score.",
                example = "87.50",
                minimum = "0",
                maximum = "100",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Percentage must be non-negative")
        @DecimalMax(value = "100.0", message = "Percentage cannot exceed 100")
        @JsonProperty("percentage")
        BigDecimal percentage,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the assessment was graded by the instructor.",
                example = "2024-04-15T14:30:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("graded_at")
        LocalDateTime gradedAt,

        @Schema(
                description = "**[OPTIONAL]** Reference to the instructor UUID who graded this assessment.",
                example = "i1n2s3t4-5r6u-7c8t-9o10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("graded_by_uuid")
        UUID gradedByUuid,

        @Schema(
                description = "**[OPTIONAL]** Instructor's comments and feedback on the assessment performance.",
                example = "Excellent understanding of the core concepts. Strong analytical skills demonstrated throughout the assessment. Minor areas for improvement in theoretical applications.",
                maxLength = 5000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 5000, message = "Comments must not exceed 5000 characters")
        @JsonProperty("comments")
        String comments,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the score record was created. Automatically set by the system.",
                example = "2024-04-15T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this score record. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the score record was last modified. Automatically updated by the system.",
                example = "2024-04-15T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this score record. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on score performance.
     *
     * @return Formatted score category
     */
    @JsonProperty(value = "score_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the score based on performance level.",
            example = "High Performance",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getScoreCategory() {
        if (percentage == null) {
            return "Ungraded Assessment";
        }

        double percentValue = percentage.doubleValue();
        if (percentValue >= 90) {
            return "Excellent Performance";
        } else if (percentValue >= 80) {
            return "High Performance";
        } else if (percentValue >= 70) {
            return "Good Performance";
        } else if (percentValue >= 60) {
            return "Satisfactory Performance";
        } else {
            return "Needs Improvement";
        }
    }

    /**
     * Checks if the score meets passing criteria.
     *
     * @return true if percentage is 60% or above
     */
    @JsonProperty(value = "is_passing", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the score meets the passing criteria (60% or above).",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPassing() {
        if (percentage == null) {
            return false;
        }
        return percentage.doubleValue() >= 60.0;
    }

    /**
     * Returns a formatted display of the grade information.
     *
     * @return Formatted grade display
     */
    @JsonProperty(value = "grade_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the grade information.",
            example = "87.50 / 100.00 (87.50%)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getGradeDisplay() {
        if (score == null || maxScore == null) {
            return "Not graded";
        }

        String percentageStr = percentage != null ? " (" + percentage + "%)" : "";
        return score + " / " + maxScore + percentageStr;
    }

    /**
     * Returns the performance level classification.
     *
     * @return Performance level based on percentage
     */
    @JsonProperty(value = "performance_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Performance level classification based on the achieved percentage.",
            example = "Above Average",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPerformanceLevel() {
        if (percentage == null) {
            return "Not Assessed";
        }

        double percentValue = percentage.doubleValue();
        if (percentValue >= 95) {
            return "Outstanding";
        } else if (percentValue >= 85) {
            return "Above Average";
        } else if (percentValue >= 75) {
            return "Average";
        } else if (percentValue >= 60) {
            return "Below Average";
        } else {
            return "Poor";
        }
    }

    /**
     * Returns a summary of feedback availability.
     *
     * @return Feedback summary for student information
     */
    @JsonProperty(value = "feedback_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Summary indicating the availability and nature of instructor feedback.",
            example = "Detailed instructor feedback provided",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFeedbackSummary() {
        if (comments == null || comments.trim().isEmpty()) {
            return "No instructor feedback provided";
        }

        if (comments.length() > 200) {
            return "Detailed instructor feedback provided";
        } else if (comments.length() > 50) {
            return "Brief instructor feedback provided";
        } else {
            return "Short instructor note provided";
        }
    }
}