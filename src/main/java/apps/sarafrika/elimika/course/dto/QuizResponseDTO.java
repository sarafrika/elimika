package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.DecimalMin;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Quiz Response Data Transfer Object
 * <p>
 * Represents individual student responses to quiz questions in the Sarafrika Elimika system,
 * tracking selected options, text answers, scoring, and correctness evaluation.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "QuizResponse",
        description = "Student response to a quiz question with scoring and correctness information",
        example = """
        {
            "uuid": "r1e2s3p4-5o6n-7s8e-9q10-abcdefghijkl",
            "attempt_uuid": "a1t2t3e4-5m6p-7t8u-9u10-abcdefghijkl",
            "question_uuid": "q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl",
            "selected_option_uuid": "o1p2t3i4-5o6n-7s8e-9l10-abcdefghijkl",
            "text_response": "A major scale consists of seven different pitches with a specific pattern of whole and half steps: W-W-H-W-W-W-H.",
            "points_earned": 8.50,
            "is_correct": true,
            "created_date": "2024-04-10T15:20:00",
            "created_by": "student@sarafrika.com",
            "updated_date": "2024-04-10T15:20:00",
            "updated_by": "student@sarafrika.com",
            "response_category": "Correct Multiple Choice Response",
            "has_text_answer": true,
            "correctness_status": "Correct Answer",
            "response_type": "Mixed Response",
            "response_summary": "Correct answer with text explanation earning 8.50 points"
        }
        """
)
public record QuizResponseDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the quiz response. Auto-generated by the system.",
                example = "r1e2s3p4-5o6n-7s8e-9q10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the quiz attempt UUID this response belongs to.",
                example = "a1t2t3e4-5m6p-7t8u-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Attempt UUID is required")
        @JsonProperty("attempt_uuid")
        UUID attemptUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the question UUID being answered.",
                example = "q1u2e3s4-5t6i-7o8n-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Question UUID is required")
        @JsonProperty("question_uuid")
        UUID questionUuid,

        @Schema(
                description = "**[OPTIONAL]** Reference to the selected option UUID for multiple choice questions.",
                example = "o1p2t3i4-5o6n-7s8e-9l10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("selected_option_uuid")
        UUID selectedOptionUuid,

        @Schema(
                description = "**[OPTIONAL]** Text response provided by the student for open-ended questions or additional explanations.",
                example = "A major scale consists of seven different pitches with a specific pattern of whole and half steps: W-W-H-W-W-W-H.",
                maxLength = 5000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 5000, message = "Text response must not exceed 5000 characters")
        @JsonProperty("text_response")
        String textResponse,

        @Schema(
                description = "**[OPTIONAL]** Points earned by the student for this response.",
                example = "8.50",
                minimum = "0",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Points earned must be non-negative")
        @JsonProperty("points_earned")
        BigDecimal pointsEarned,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the student's response is correct.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_correct")
        Boolean isCorrect,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the response was created. Automatically set by the system.",
                example = "2024-04-10T15:20:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this response. Used for audit trails.",
                example = "student@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the response was last modified. Automatically updated by the system.",
                example = "2024-04-10T15:20:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this response. Used for audit trails.",
                example = "student@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on response type and correctness.
     *
     * @return Formatted response category
     */
    @JsonProperty(value = "response_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the response based on type and correctness.",
            example = "Correct Multiple Choice Response",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getResponseCategory() {
        boolean correct = isCorrect != null && isCorrect;
        boolean hasOption = selectedOptionUuid != null;
        boolean hasText = textResponse != null && !textResponse.trim().isEmpty();

        String correctnessPrefix = correct ? "Correct" : "Incorrect";

        if (hasOption && hasText) {
            return correctnessPrefix + " Mixed Response";
        } else if (hasOption) {
            return correctnessPrefix + " Multiple Choice Response";
        } else if (hasText) {
            return correctnessPrefix + " Text Response";
        } else {
            return "Empty Response";
        }
    }

    /**
     * Checks if the response includes a text answer.
     *
     * @return true if text response is provided
     */
    @JsonProperty(value = "has_text_answer", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the response includes a text answer component.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasTextAnswer() {
        return textResponse != null && !textResponse.trim().isEmpty();
    }

    /**
     * Returns the correctness status description.
     *
     * @return Correctness status for grading display
     */
    @JsonProperty(value = "correctness_status", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Status description indicating whether the response is correct or incorrect.",
            example = "Correct Answer",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCorrectnessStatus() {
        if (isCorrect == null) {
            return "Not Evaluated";
        }

        return isCorrect ? "Correct Answer" : "Incorrect Answer";
    }

    /**
     * Returns the response type classification.
     *
     * @return Response type based on content
     */
    @JsonProperty(value = "response_type", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Classification of the response type based on provided content.",
            example = "Mixed Response",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getResponseType() {
        boolean hasOption = selectedOptionUuid != null;
        boolean hasText = textResponse != null && !textResponse.trim().isEmpty();

        if (hasOption && hasText) {
            return "Mixed Response";
        } else if (hasOption) {
            return "Multiple Choice";
        } else if (hasText) {
            return "Text Response";
        } else {
            return "No Response";
        }
    }

    /**
     * Returns a comprehensive response summary.
     *
     * @return Summary for grading and review purposes
     */
    @JsonProperty(value = "response_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the response including correctness and points earned.",
            example = "Correct answer with text explanation earning 8.50 points",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getResponseSummary() {
        boolean correct = isCorrect != null && isCorrect;
        String correctnessDesc = correct ? "Correct answer" : "Incorrect answer";

        if (isCorrect == null) {
            correctnessDesc = "Unevaluated response";
        }

        boolean hasOption = selectedOptionUuid != null;
        boolean hasText = textResponse != null && !textResponse.trim().isEmpty();

        String contentDesc = "";
        if (hasOption && hasText) {
            contentDesc = " with text explanation";
        } else if (hasText) {
            contentDesc = " as text response";
        } else if (hasOption) {
            contentDesc = " as multiple choice";
        }

        String pointsDesc = "";
        if (pointsEarned != null) {
            pointsDesc = " earning " + pointsEarned + " points";
        }

        return correctnessDesc + contentDesc + pointsDesc;
    }
}