package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Certificate Data Transfer Object
 * <p>
 * Represents issued certificates in the Sarafrika Elimika system,
 * documenting course and program completion achievements.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "Certificate",
        description = "Issued certificate documenting course or program completion",
        example = """
        {
            "uuid": "c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl",
            "certificate_number": "CERT-2024-JAV-001234",
            "student_uuid": "s1t2u3d4-5e6n-7t8u-9s10-abcdefghijkl",
            "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "program_uuid": null,
            "template_uuid": "t1e2m3p4-5l6a-7t8e-9u10-abcdefghijkl",
            "issued_date": "2024-05-15T16:30:00",
            "completion_date": "2024-05-15T15:45:00",
            "final_grade": 87.50,
            "certificate_url": "https://cdn.sarafrika.com/certificates/CERT-2024-JAV-001234.pdf",
            "is_valid": true,
            "revoked_at": null,
            "revoked_reason": null,
            "created_date": "2024-05-15T16:30:00",
            "created_by": "system",
            "updated_date": "2024-05-15T16:30:00",
            "updated_by": "system",
            "certificate_type": "Course Completion",
            "grade_letter": "B+",
            "is_downloadable": true,
            "validity_status": "Valid Certificate"
        }
        """
)
public record CertificateDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the certificate. Auto-generated by the system.",
                example = "c1e2r3t4-5i6f-7i8c-9a10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[READ-ONLY]** Unique certificate number for verification and reference purposes.",
                example = "CERT-2024-JAV-001234",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "certificate_number", access = JsonProperty.Access.READ_ONLY)
        String certificateNumber,

        @Schema(
                description = "**[REQUIRED]** Reference to the student UUID who earned this certificate.",
                example = "s1t2u3d4-5e6n-7t8u-9s10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Student UUID is required")
        @JsonProperty("student_uuid")
        UUID studentUuid,

        @Schema(
                description = "**[OPTIONAL]** Reference to the course UUID if this is a course completion certificate. Mutually exclusive with program_uuid.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[OPTIONAL]** Reference to the program UUID if this is a program completion certificate. Mutually exclusive with course_uuid.",
                example = "null",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("program_uuid")
        UUID programUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the certificate template UUID used for generating this certificate.",
                example = "t1e2m3p4-5l6a-7t8e-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Template UUID is required")
        @JsonProperty("template_uuid")
        UUID templateUuid,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the certificate was issued. Automatically set by the system.",
                example = "2024-05-15T16:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "issued_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime issuedDate,

        @Schema(
                description = "**[REQUIRED]** Date when the course or program was completed by the student.",
                example = "2024-05-15T15:45:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Completion date is required")
        @JsonProperty("completion_date")
        LocalDateTime completionDate,

        @Schema(
                description = "**[OPTIONAL]** Final grade percentage achieved by the student.",
                example = "87.50",
                minimum = "0.00",
                maximum = "100.00",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Final grade cannot be negative")
        @DecimalMax(value = "100.00", message = "Final grade cannot exceed 100%")
        @JsonProperty("final_grade")
        BigDecimal finalGrade,

        @Schema(
                description = "**[READ-ONLY]** URL to the generated certificate PDF file for download.",
                example = "https://cdn.sarafrika.com/certificates/CERT-2024-JAV-001234.pdf",
                format = "uri",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "certificate_url", access = JsonProperty.Access.READ_ONLY)
        String certificateUrl,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the certificate is valid and has not been revoked.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_valid")
        Boolean isValid,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the certificate was revoked, if applicable.",
                example = "null",
                format = "date-time",
                nullable = true,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "revoked_at", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime revokedAt,

        @Schema(
                description = "**[READ-ONLY]** Reason for certificate revocation, if applicable.",
                example = "null",
                nullable = true,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "revoked_reason", access = JsonProperty.Access.READ_ONLY)
        String revokedReason,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the certificate record was created. Automatically set by the system.",
                example = "2024-05-15T16:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this certificate. Used for audit trails.",
                example = "system",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the certificate was last modified. Automatically updated by the system.",
                example = "2024-05-15T16:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this certificate. Used for audit trails.",
                example = "system",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns the type of certificate based on what was completed.
     *
     * @return Certificate type classification
     */
    @JsonProperty(value = "certificate_type", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Type of certificate based on completion achievement.",
            example = "Course Completion",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCertificateType() {
        if (courseUuid != null) {
            return "Course Completion";
        } else if (programUuid != null) {
            return "Program Completion";
        } else {
            return "Achievement Certificate";
        }
    }

    /**
     * Returns a letter grade based on final grade percentage.
     *
     * @return Letter grade or "N/A" if no final grade
     */
    @JsonProperty(value = "grade_letter", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Letter grade representation of the final grade.",
            example = "B+",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getGradeLetter() {
        if (finalGrade == null) {
            return "N/A";
        }

        double grade = finalGrade.doubleValue();
        if (grade >= 90) return "A";
        else if (grade >= 85) return "B+";
        else if (grade >= 80) return "B";
        else if (grade >= 75) return "C+";
        else if (grade >= 70) return "C";
        else if (grade >= 65) return "D+";
        else if (grade >= 60) return "D";
        else return "F";
    }

    /**
     * Checks if the certificate can be downloaded.
     *
     * @return true if certificate URL is available and certificate is valid
     */
    @JsonProperty(value = "is_downloadable", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the certificate can be downloaded by the student.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isDownloadable() {
        return certificateUrl != null && !certificateUrl.trim().isEmpty() &&
                (isValid == null || isValid);
    }

    /**
     * Returns the current validity status of the certificate.
     *
     * @return Validity status description
     */
    @JsonProperty(value = "validity_status", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Current validity status of the certificate.",
            example = "Valid Certificate",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getValidityStatus() {
        if (isValid == null || isValid) {
            return "Valid Certificate";
        } else if (revokedAt != null) {
            return "Revoked Certificate";
        } else {
            return "Invalid Certificate";
        }
    }
}