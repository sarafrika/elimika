package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Lesson Content Data Transfer Object
 * <p>
 * Represents individual content items within lessons in the Sarafrika Elimika system,
 * supporting various media types and file formats for educational delivery.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "LessonContent",
        description = "Individual content item within a lesson supporting various media types",
        example = """
        {
            "uuid": "l1c2o3n4-5t6e-7n8t-9i10-abcdefghijkl",
            "lesson_uuid": "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
            "content_type_uuid": "c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl",
            "title": "Introduction to Classes and Objects",
            "description": "Comprehensive video explanation of OOP fundamentals with examples",
            "content_text": null,
            "file_url": "https://cdn.sarafrika.com/lessons/oop-intro.mp4",
            "file_size_bytes": 157286400,
            "mime_type": "video/mp4",
            "display_order": 1,
            "is_required": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "file_size_display": "150 MB",
            "content_category": "Video Content",
            "is_downloadable": true,
            "estimated_duration": "15 minutes"
        }
        """
)
public record LessonContentDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the lesson content. Auto-generated by the system.",
                example = "l1c2o3n4-5t6e-7n8t-9i10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the lesson UUID that contains this content.",
                example = "l1e2s3s4-5o6n-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Lesson UUID is required")
        @JsonProperty("lesson_uuid")
        UUID lessonUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the content type UUID defining the format and restrictions.",
                example = "c1o2n3t4-5e6n-7t8t-9y10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Content type UUID is required")
        @JsonProperty("content_type_uuid")
        UUID contentTypeUuid,

        @Schema(
                description = "**[REQUIRED]** Descriptive title of the content item for student navigation.",
                example = "Introduction to Classes and Objects",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Content title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the content and its learning purpose.",
                example = "Comprehensive video explanation of object-oriented programming fundamentals with practical examples and code demonstrations",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Description must not exceed 1000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Text content for text-based content types. Null for file-based content.",
                example = "null",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("content_text")
        String contentText,

        @Schema(
                description = "**[OPTIONAL]** URL to the uploaded content file. Null for text-based content.",
                example = "https://cdn.sarafrika.com/lessons/oop-intro.mp4",
                format = "uri",
                maxLength = 500,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "File URL must not exceed 500 characters")
        @JsonProperty("file_url")
        String fileUrl,

        @Schema(
                description = "**[READ-ONLY]** Size of the uploaded file in bytes. Null for text content.",
                example = "157286400",
                minimum = "0",
                nullable = true,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 0, message = "File size cannot be negative")
        @JsonProperty(value = "file_size_bytes", access = JsonProperty.Access.READ_ONLY)
        Long fileSizeBytes,

        @Schema(
                description = "**[READ-ONLY]** MIME type of the uploaded file. Automatically detected during upload.",
                example = "video/mp4",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "mime_type", access = JsonProperty.Access.READ_ONLY)
        String mimeType,

        @Schema(
                description = "**[REQUIRED]** Display order of content within the lesson for sequential presentation.",
                example = "1",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1"
        )
        @NotNull(message = "Display order is required")
        @Min(value = 1, message = "Display order must be at least 1")
        @JsonProperty("display_order")
        Integer displayOrder,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this content is required for lesson completion.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_required")
        Boolean isRequired,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the content was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this content. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the content was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this content. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display string for file size.
     *
     * @return Formatted file size or "No file" if not applicable
     */
    @JsonProperty(value = "file_size_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of file size.",
            example = "150 MB",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFileSizeDisplay() {
        if (fileSizeBytes == null) {
            return "No file";
        }

        double bytes = fileSizeBytes.doubleValue();
        if (bytes < 1024) return bytes + " B";
        else if (bytes < 1024 * 1024) return String.format("%.1f KB", bytes / 1024);
        else if (bytes < 1024 * 1024 * 1024) return String.format("%.1f MB", bytes / (1024 * 1024));
        else return String.format("%.1f GB", bytes / (1024 * 1024 * 1024));
    }

    /**
     * Returns content category based on MIME type.
     *
     * @return Content category for UI organization
     */
    @JsonProperty(value = "content_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Category of content based on its type and format.",
            example = "Video Content",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getContentCategory() {
        if (mimeType == null) {
            return contentText != null ? "Text Content" : "Unknown";
        }

        if (mimeType.startsWith("video/")) return "Video Content";
        else if (mimeType.startsWith("audio/")) return "Audio Content";
        else if (mimeType.startsWith("image/")) return "Image Content";
        else if (mimeType.contains("pdf")) return "PDF Document";
        else if (mimeType.startsWith("text/")) return "Text Content";
        else return "File Content";
    }
}