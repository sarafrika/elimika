package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.EnrollmentStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.DecimalMax;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Program Enrollment Data Transfer Object
 * <p>
 * Represents student enrollments in educational programs within the Sarafrika Elimika system,
 * tracking enrollment status, progress, and completion information across entire programs.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "ProgramEnrollment",
        description = "Student enrollment in an educational program with progress tracking and completion details",
        example = """
        {
            "uuid": "p1e2n3r4-5o6l-7l8m-9e10-abcdefghijkl",
            "student_uuid": "s1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl",
            "program_uuid": "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
            "enrollment_date": "2024-04-01T09:00:00",
            "completion_date": "2024-06-30T16:45:00",
            "status": "COMPLETED",
            "progress_percentage": 100.00,
            "final_grade": 87.25,
            "created_date": "2024-04-01T09:00:00",
            "created_by": "student@sarafrika.com",
            "updated_date": "2024-06-30T16:45:00",
            "updated_by": "system@sarafrika.com",
            "enrollment_category": "Completed Program Enrollment",
            "is_active": false,
            "progress_display": "100.00% Complete",
            "enrollment_duration": "90 days",
            "status_summary": "Successfully completed program with final grade of 87.25"
        }
        """
)
public record ProgramEnrollmentDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the program enrollment. Auto-generated by the system.",
                example = "p1e2n3r4-5o6l-7l8m-9e10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the student UUID who is enrolled in the program.",
                example = "s1t2u3d4-5e6n-7t8u-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Student UUID is required")
        @JsonProperty("student_uuid")
        UUID studentUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the program UUID the student is enrolled in.",
                example = "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Program UUID is required")
        @JsonProperty("program_uuid")
        UUID programUuid,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the student enrolled in the program.",
                example = "2024-04-01T09:00:00",
                format = "date-time",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("enrollment_date")
        LocalDateTime enrollmentDate,

        @Schema(
                description = "**[OPTIONAL]** Timestamp when the student completed the program. Null if not yet completed.",
                example = "2024-06-30T16:45:00",
                format = "date-time",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("completion_date")
        LocalDateTime completionDate,

        @Schema(
                description = "**[REQUIRED]** Current status of the student's enrollment in the program.",
                example = "COMPLETED",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"ACTIVE", "COMPLETED", "DROPPED", "SUSPENDED"}
        )
        @NotNull(message = "Enrollment status is required")
        @JsonProperty("status")
        EnrollmentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Percentage of program content completed by the student.",
                example = "100.00",
                minimum = "0",
                maximum = "100",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Progress percentage must be non-negative")
        @DecimalMax(value = "100.0", message = "Progress percentage cannot exceed 100")
        @JsonProperty("progress_percentage")
        BigDecimal progressPercentage,

        @Schema(
                description = "**[OPTIONAL]** Final grade achieved by the student in the program.",
                example = "87.25",
                minimum = "0",
                maximum = "100",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Final grade must be non-negative")
        @DecimalMax(value = "100.0", message = "Final grade cannot exceed 100")
        @JsonProperty("final_grade")
        BigDecimal finalGrade,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the enrollment was created. Automatically set by the system.",
                example = "2024-04-01T09:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this enrollment. Used for audit trails.",
                example = "student@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the enrollment was last modified. Automatically updated by the system.",
                example = "2024-06-30T16:45:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this enrollment. Used for audit trails.",
                example = "system@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on enrollment status.
     *
     * @return Formatted enrollment category
     */
    @JsonProperty(value = "enrollment_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the enrollment based on current status.",
            example = "Completed Program Enrollment",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getEnrollmentCategory() {
        if (status == null) {
            return "Unknown Status";
        }

        return switch (status) {
            case ACTIVE -> "Active Program Enrollment";
            case COMPLETED -> "Completed Program Enrollment";
            case DROPPED -> "Dropped Program Enrollment";
            case SUSPENDED -> "Suspended Program Enrollment";
        };
    }

    /**
     * Checks if the enrollment is currently active.
     *
     * @return true if status is ACTIVE
     */
    @JsonProperty(value = "is_active", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the enrollment is currently active and ongoing.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isActive() {
        return status == EnrollmentStatus.ACTIVE;
    }

    /**
     * Returns a formatted display of progress percentage.
     *
     * @return Formatted progress display
     */
    @JsonProperty(value = "progress_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the student's progress in the program.",
            example = "100.00% Complete",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getProgressDisplay() {
        if (progressPercentage == null) {
            return "Progress not tracked";
        }

        return progressPercentage + "% Complete";
    }

    /**
     * Calculates and returns the enrollment duration.
     *
     * @return Duration between enrollment and completion/current date
     */
    @JsonProperty(value = "enrollment_duration", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Duration of the enrollment from start to completion or current date.",
            example = "90 days",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getEnrollmentDuration() {
        if (enrollmentDate == null) {
            return "Duration not available";
        }

        LocalDateTime endDate = completionDate != null ? completionDate : LocalDateTime.now();
        long daysBetween = java.time.Duration.between(enrollmentDate, endDate).toDays();

        if (daysBetween == 0) {
            return "Same day";
        } else if (daysBetween == 1) {
            return "1 day";
        } else {
            return daysBetween + " days";
        }
    }

    /**
     * Returns a comprehensive status summary.
     *
     * @return Status summary with relevant details
     */
    @JsonProperty(value = "status_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the enrollment status with relevant details.",
            example = "Successfully completed program with final grade of 87.25",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getStatusSummary() {
        return switch (status) {
            case ACTIVE -> {
                String progress = progressPercentage != null ? " (" + progressPercentage + "% complete)" : "";
                yield "Currently active and in progress" + progress;
            }
            case COMPLETED -> {
                String grade = finalGrade != null ? " with final grade of " + finalGrade : "";
                yield "Successfully completed program" + grade;
            }
            case DROPPED -> "Student dropped from program";
            case SUSPENDED -> "Program enrollment temporarily suspended";
        };
    }
}