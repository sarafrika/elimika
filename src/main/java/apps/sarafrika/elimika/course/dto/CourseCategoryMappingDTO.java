package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Course Category Mapping Data Transfer Object
 * <p>
 * Represents the relationship between a course and a category in the many-to-many association.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-07-18
 */
@Schema(
        name = "CourseCategoryMapping",
        description = "Represents the many-to-many relationship between courses and categories",
        example = """
        {
            "uuid": "m1a2p3p4-5i6n-7g8s-9a10-abcdefghijkl",
            "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "category_uuid": "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
            "course_name": "Advanced Java Programming",
            "category_name": "Programming",
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com"
        }
        """
)
public record CourseCategoryMappingDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the mapping. Auto-generated by the system.",
                example = "m1a2p3p4-5i6n-7g8s-9a10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the course UUID in this mapping.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course UUID is required")
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the category UUID in this mapping.",
                example = "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Category UUID is required")
        @JsonProperty("category_uuid")
        UUID categoryUuid,

        @Schema(
                description = "**[READ-ONLY]** Name of the course for display purposes. Fetched from the course entity.",
                example = "Advanced Java Programming",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "course_name", access = JsonProperty.Access.READ_ONLY)
        String courseName,

        @Schema(
                description = "**[READ-ONLY]** Name of the category for display purposes. Fetched from the category entity.",
                example = "Programming",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "category_name", access = JsonProperty.Access.READ_ONLY)
        String categoryName,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the mapping was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this mapping. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the mapping was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this mapping. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Creates a mapping DTO with just the required UUIDs
     */
    public static CourseCategoryMappingDTO create(UUID courseUuid, UUID categoryUuid) {
        return new CourseCategoryMappingDTO(
                null, courseUuid, categoryUuid, null, null, null, null, null, null);
    }

    /**
     * Checks if this mapping has display names populated
     */
    @JsonProperty(value = "has_names", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if both course and category names are populated.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasNames() {
        return courseName != null && !courseName.trim().isEmpty() &&
                categoryName != null && !categoryName.trim().isEmpty();
    }

    /**
     * Returns a display string for this mapping
     */
    @JsonProperty(value = "display_text", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable text representing this course-category relationship.",
            example = "Advanced Java Programming → Programming",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDisplayText() {
        if (hasNames()) {
            return String.format("%s → %s", courseName, categoryName);
        }
        return String.format("Course %s → Category %s",
                courseUuid.toString().substring(0, 8),
                categoryUuid.toString().substring(0, 8));
    }
}