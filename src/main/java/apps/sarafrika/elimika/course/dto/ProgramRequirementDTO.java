package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.RequirementType;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Program Requirement Data Transfer Object
 * <p>
 * Represents specific requirements for educational programs in the Sarafrika Elimika system,
 * defining prerequisites, completion criteria, and mandatory elements for program success.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "ProgramRequirement",
        description = "Program requirement with type classification and mandatory status",
        example = """
        {
            "uuid": "r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl",
            "program_uuid": "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
            "requirement_type": "STUDENT",
            "requirement_text": "Students must maintain a minimum GPA of 3.0 throughout the program and complete all core courses with a grade of C or better.",
            "is_mandatory": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "admin@sarafrika.com",
            "updated_date": "2024-04-05T14:30:00",
            "updated_by": "admin@sarafrika.com",
            "requirement_category": "Mandatory Student Requirement",
            "is_optional": false,
            "requirement_priority": "High Priority",
            "compliance_level": "Mandatory Compliance",
            "requirement_summary": "Student requirement with mandatory compliance"
        }
        """
)
public record ProgramRequirementDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the program requirement. Auto-generated by the system.",
                example = "r1e2q3u4-5i6r-7e8m-9e10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the program UUID this requirement applies to.",
                example = "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Program UUID is required")
        @JsonProperty("program_uuid")
        UUID programUuid,

        @Schema(
                description = "**[REQUIRED]** Type of requirement classification for this program element.",
                example = "STUDENT",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"STUDENT", "TRAINING_CENTER", "INSTRUCTOR"}
        )
        @NotNull(message = "Requirement type is required")
        @JsonProperty("requirement_type")
        RequirementType requirementType,

        @Schema(
                description = "**[REQUIRED]** Detailed text describing the specific requirement and its criteria.",
                example = "Students must maintain a minimum GPA of 3.0 throughout the program and complete all core courses with a grade of C or better.",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 2000
        )
        @NotBlank(message = "Requirement text is required")
        @Size(max = 2000, message = "Requirement text must not exceed 2000 characters")
        @JsonProperty("requirement_text")
        String requirementText,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this requirement is mandatory for program completion.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_mandatory")
        Boolean isMandatory,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the requirement was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this requirement. Used for audit trails.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the requirement was last modified. Automatically updated by the system.",
                example = "2024-04-05T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this requirement. Used for audit trails.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on requirement type and mandatory status.
     *
     * @return Formatted requirement category
     */
    @JsonProperty(value = "requirement_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the requirement based on type and mandatory status.",
            example = "Mandatory Student Requirement",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getRequirementCategory() {
        if (requirementType == null) {
            return "General Requirement";
        }

        String mandatory = (isMandatory != null && isMandatory) ? "Mandatory" : "Optional";
        String type = switch (requirementType) {
            case STUDENT -> "Student";
            case TRAINING_CENTER -> "Training Center";
            case INSTRUCTOR -> "Instructor";
        };

        return mandatory + " " + type + " Requirement";
    }

    /**
     * Checks if the requirement is optional.
     *
     * @return true if requirement is not mandatory
     */
    @JsonProperty(value = "is_optional", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the requirement is optional (not mandatory).",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isOptional() {
        return isMandatory == null || !isMandatory;
    }

    /**
     * Returns the priority level of the requirement.
     *
     * @return Priority classification based on type and mandatory status
     */
    @JsonProperty(value = "requirement_priority", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Priority level of the requirement based on type and mandatory status.",
            example = "High Priority",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getRequirementPriority() {
        boolean mandatory = isMandatory != null && isMandatory;

        if (mandatory) {
            return switch (requirementType) {
                case STUDENT -> "High Priority";
                case TRAINING_CENTER -> "Critical Priority";
                case INSTRUCTOR -> "Medium Priority";
            };
        } else {
            return "Low Priority";
        }
    }

    /**
     * Returns the compliance level description.
     *
     * @return Compliance level based on mandatory status
     */
    @JsonProperty(value = "compliance_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Compliance level indicating how strictly the requirement must be followed.",
            example = "Mandatory Compliance",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getComplianceLevel() {
        boolean mandatory = isMandatory != null && isMandatory;

        if (mandatory) {
            return "Mandatory Compliance";
        } else {
            return "Optional Compliance";
        }
    }

    /**
     * Returns a comprehensive requirement summary.
     *
     * @return Summary for administrative and student information
     */
    @JsonProperty(value = "requirement_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the requirement including type and compliance level.",
            example = "Student requirement with mandatory compliance",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getRequirementSummary() {
        if (requirementType == null) {
            return "General program requirement";
        }

        String type = switch (requirementType) {
            case STUDENT -> "Student";
            case TRAINING_CENTER -> "Training Center";
            case INSTRUCTOR -> "Instructor";
        };

        String compliance = (isMandatory != null && isMandatory) ? "mandatory" : "optional";

        return type + " requirement with " + compliance + " compliance";
    }
}