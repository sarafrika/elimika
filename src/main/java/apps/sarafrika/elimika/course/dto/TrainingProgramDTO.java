package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Training Program Data Transfer Object
 * <p>
 * Represents training programs (course bundles) in the Sarafrika Elimika system,
 * organizing multiple courses into structured learning pathways.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "TrainingProgram",
        description = "Training program bundling multiple courses into structured learning pathways",
        example = """
        {
            "uuid": "t1r2a3i4-5n6i-7n8g-9p10-abcdefghijkl",
            "title": "Complete Java Development Masterclass",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "category_uuid": "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
            "description": "Comprehensive training program covering Java from basics to advanced enterprise development",
            "objectives": "Master Java programming, frameworks, and enterprise development practices",
            "prerequisites": "Basic programming knowledge and familiarity with software development concepts",
            "total_duration_hours": 120,
            "total_duration_minutes": 30,
            "class_limit": 50,
            "price": 899.99,
            "status": "PUBLISHED",
            "active": true,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "total_duration_display": "120 hours 30 minutes",
            "is_free": false,
            "is_published": true,
            "program_type": "Comprehensive Masterclass"
        }
        """
)
public record TrainingProgramDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the training program. Auto-generated by the system.",
                example = "t1r2a3i4-5n6i-7n8g-9p10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Title of the training program that clearly describes the learning pathway.",
                example = "Complete Java Development Masterclass",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Training program title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor UUID who created and manages this program.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[OPTIONAL]** Reference to the category UUID for program organization and discovery.",
                example = "c1a2t3e4-5g6o-7r8y-9a10-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("category_uuid")
        UUID categoryUuid,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the program content, approach, and outcomes.",
                example = "Comprehensive training program covering Java from basics to advanced enterprise development including frameworks, best practices, and real-world projects",
                maxLength = 2000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Description must not exceed 2000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Learning objectives and goals students will achieve upon program completion.",
                example = "Master Java programming fundamentals, understand enterprise frameworks, implement scalable applications, and develop professional coding practices",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Objectives must not exceed 1000 characters")
        @JsonProperty("objectives")
        String objectives,

        @Schema(
                description = "**[OPTIONAL]** Required knowledge and skills students should have before starting this program.",
                example = "Basic programming knowledge and familiarity with software development concepts, understanding of algorithms and data structures",
                maxLength = 1000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Prerequisites must not exceed 1000 characters")
        @JsonProperty("prerequisites")
        String prerequisites,

        @Schema(
                description = "**[REQUIRED]** Total program duration in hours across all courses.",
                example = "120",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0"
        )
        @NotNull(message = "Total duration hours is required")
        @Min(value = 0, message = "Total duration hours cannot be negative")
        @JsonProperty("total_duration_hours")
        Integer totalDurationHours,

        @Schema(
                description = "**[REQUIRED]** Additional program duration in minutes (0-59).",
                example = "30",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0",
                maximum = "59"
        )
        @NotNull(message = "Total duration minutes is required")
        @Min(value = 0, message = "Total duration minutes cannot be negative")
        @Max(value = 59, message = "Total duration minutes cannot exceed 59")
        @JsonProperty("total_duration_minutes")
        Integer totalDurationMinutes,

        @Schema(
                description = "**[OPTIONAL]** Maximum number of students that can enroll in the program.",
                example = "50",
                minimum = "1",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Class limit must be at least 1")
        @JsonProperty("class_limit")
        Integer classLimit,

        @Schema(
                description = "**[OPTIONAL]** Program price in the system currency. Set to null or 0 for free programs.",
                example = "899.99",
                minimum = "0",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Price cannot be negative")
        @JsonProperty("price")
        BigDecimal price,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the program is actively available to students. Can only be true for published programs.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[REQUIRED]** Indicates if the program is published,",
                example = "true",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @JsonProperty("active")
        Boolean published,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the program was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this program. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the program was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this program. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted display string for total program duration.
     *
     * @return Formatted duration string
     */
    @JsonProperty(value = "total_duration_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of total program duration.",
            example = "120 hours 30 minutes",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getTotalDurationDisplay() {
        if (totalDurationHours == null && totalDurationMinutes == null) {
            return "Duration not specified";
        }

        int hours = totalDurationHours != null ? totalDurationHours : 0;
        int minutes = totalDurationMinutes != null ? totalDurationMinutes : 0;

        if (hours == 0 && minutes == 0) {
            return "Duration not specified";
        }

        StringBuilder sb = new StringBuilder();
        if (hours > 0) {
            sb.append(hours).append(" hour").append(hours != 1 ? "s" : "");
        }
        if (minutes > 0) {
            if (!sb.isEmpty()) sb.append(" ");
            sb.append(minutes).append(" minute").append(minutes != 1 ? "s" : "");
        }

        return sb.toString();
    }

    /**
     * Checks if the program is free (no price or price is 0).
     *
     * @return true if program is free
     */
    @JsonProperty(value = "is_free", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the program is offered for free.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isFree() {
        return price == null || price.compareTo(BigDecimal.ZERO) == 0;
    }

    /**
     * Returns a program type classification based on duration and title.
     *
     * @return Program type for categorization
     */
    @JsonProperty(value = "program_type", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Classification of program type based on duration and content.",
            example = "Comprehensive Masterclass",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getProgramType() {
        if (title != null && title.toLowerCase().contains("masterclass")) {
            return "Comprehensive Masterclass";
        }

        int totalHours = totalDurationHours != null ? totalDurationHours : 0;

        if (totalHours >= 100) {
            return "Extended Program";
        } else if (totalHours >= 50) {
            return "Intensive Program";
        } else if (totalHours >= 20) {
            return "Standard Program";
        } else {
            return "Short Program";
        }
    }
}