package apps.sarafrika.elimika.course.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Program Course Data Transfer Object
 * <p>
 * Represents the association between programs and courses in the Sarafrika Elimika system,
 * defining course sequencing, requirements, and prerequisites within educational programs.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "ProgramCourse",
        description = "Association between programs and courses with sequencing and requirement information",
        example = """
        {
            "uuid": "p1c2o3u4-5r6s-7e8a-9s10-abcdefghijkl",
            "program_uuid": "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
            "course_uuid": "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
            "sequence_order": 3,
            "is_required": true,
            "prerequisite_course_uuid": "c0o1u2r3-4s5e-6d7a-8t90-abcdefghijkl",
            "created_date": "2024-04-01T12:00:00",
            "created_by": "admin@sarafrika.com",
            "updated_date": "2024-04-02T09:30:00",
            "updated_by": "admin@sarafrika.com",
            "association_category": "Required Course",
            "has_prerequisites": true,
            "sequence_display": "Course 3 of Program",
            "requirement_status": "Mandatory Course",
            "curriculum_summary": "Required course with prerequisites in sequence position 3"
        }
        """
)
public record ProgramCourseDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the program-course association. Auto-generated by the system.",
                example = "p1c2o3u4-5r6s-7e8a-9s10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the program UUID that contains this course.",
                example = "p1r2o3g4-5r6a-7m8u-9u10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Program UUID is required")
        @JsonProperty("program_uuid")
        UUID programUuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the course UUID that is part of this program.",
                example = "c1o2u3r4-5s6e-7d8a-9t10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Course UUID is required")
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[OPTIONAL]** Sequential order of this course within the program curriculum.",
                example = "3",
                minimum = "1",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Sequence order must be at least 1")
        @JsonProperty("sequence_order")
        Integer sequenceOrder,

        @Schema(
                description = "**[OPTIONAL]** Indicates if this course is required for program completion.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_required")
        Boolean isRequired,

        @Schema(
                description = "**[OPTIONAL]** Reference to the prerequisite course UUID that must be completed before this course.",
                example = "c0o1u2r3-4s5e-6d7a-8t90-abcdefghijkl",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("prerequisite_course_uuid")
        UUID prerequisiteCourseUuid,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the program-course association was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this association. Used for audit trails.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the association was last modified. Automatically updated by the system.",
                example = "2024-04-02T09:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this association. Used for audit trails.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a formatted category based on course requirement status.
     *
     * @return Formatted association category
     */
    @JsonProperty(value = "association_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted category of the course association based on requirement status.",
            example = "Required Course",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAssociationCategory() {
        boolean required = isRequired != null && isRequired;
        boolean hasPrerequisites = prerequisiteCourseUuid != null;

        if (required && hasPrerequisites) {
            return "Required Course with Prerequisites";
        } else if (required) {
            return "Required Course";
        } else if (hasPrerequisites) {
            return "Elective Course with Prerequisites";
        } else {
            return "Elective Course";
        }
    }

    /**
     * Checks if the course has prerequisite requirements.
     *
     * @return true if prerequisite course is specified
     */
    @JsonProperty(value = "has_prerequisites", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this course has prerequisite requirements.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasPrerequisites() {
        return prerequisiteCourseUuid != null;
    }

    /**
     * Returns a formatted display of the course sequence position.
     *
     * @return Formatted sequence display
     */
    @JsonProperty(value = "sequence_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted display of the course position within the program sequence.",
            example = "Course 3 of Program",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSequenceDisplay() {
        if (sequenceOrder == null) {
            return "Sequence not specified";
        }

        return "Course " + sequenceOrder + " of Program";
    }

    /**
     * Returns the requirement status description.
     *
     * @return Requirement status classification
     */
    @JsonProperty(value = "requirement_status", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Requirement status of the course within the program.",
            example = "Mandatory Course",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getRequirementStatus() {
        boolean required = isRequired != null && isRequired;

        if (required) {
            return "Mandatory Course";
        } else {
            return "Optional Course";
        }
    }

    /**
     * Returns a comprehensive curriculum summary.
     *
     * @return Curriculum summary for program planning
     */
    @JsonProperty(value = "curriculum_summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Comprehensive summary of the course's role within the program curriculum.",
            example = "Required course with prerequisites in sequence position 3",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCurriculumSummary() {
        StringBuilder summary = new StringBuilder();

        // Add requirement status
        boolean required = isRequired != null && isRequired;
        summary.append(required ? "Required" : "Optional").append(" course");

        // Add prerequisite information
        if (prerequisiteCourseUuid != null) {
            summary.append(" with prerequisites");
        }

        // Add sequence information
        if (sequenceOrder != null) {
            summary.append(" in sequence position ").append(sequenceOrder);
        }

        return summary.toString();
    }
}