package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.QuestionType;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Quiz Question Data Transfer Object
 * <p>
 * Represents individual questions within quizzes in the Sarafrika Elimika system,
 * supporting multiple question types and flexible scoring.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "QuizQuestion",
        description = "Individual question within a quiz supporting multiple question types",
        example = """
        {
            "uuid": "q1u2e3s4-5t6i-7o8n-9q10-abcdefghijkl",
            "quiz_uuid": "q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl",
            "question_text": "What is the main principle of object-oriented programming that allows a class to inherit properties from another class?",
            "question_type": "MULTIPLE_CHOICE",
            "points": 2.00,
            "display_order": 1,
            "created_date": "2024-04-01T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "question_category": "Multiple Choice Question",
            "points_display": "2.0 points",
            "requires_options": true,
            "question_number": "Question 1"
        }
        """
)
public record QuizQuestionDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the quiz question. Auto-generated by the system.",
                example = "q1u2e3s4-5t6i-7o8n-9q10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the quiz UUID that contains this question.",
                example = "q1u2i3z4-5a6s-7s8e-9s10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Quiz UUID is required")
        @JsonProperty("quiz_uuid")
        UUID quizUuid,

        @Schema(
                description = "**[REQUIRED]** The actual question text that students will see and answer.",
                example = "What is the main principle of object-oriented programming that allows a class to inherit properties from another class?",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 2000
        )
        @NotBlank(message = "Question text is required")
        @Size(max = 2000, message = "Question text must not exceed 2000 characters")
        @JsonProperty("question_text")
        String questionText,

        @Schema(
                description = "**[REQUIRED]** Type of question determining the answer format and validation.",
                example = "MULTIPLE_CHOICE",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"MULTIPLE_CHOICE", "TRUE_FALSE", "SHORT_ANSWER", "ESSAY"}
        )
        @NotNull(message = "Question type is required")
        @JsonProperty("question_type")
        QuestionType questionType,

        @Schema(
                description = "**[REQUIRED]** Point value for this question when answered correctly.",
                example = "2.00",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "0.01"
        )
        @NotNull(message = "Points value is required")
        @DecimalMin(value = "0.01", message = "Points must be at least 0.01")
        @JsonProperty("points")
        BigDecimal points,

        @Schema(
                description = "**[REQUIRED]** Display order of the question within the quiz for sequential presentation.",
                example = "1",
                requiredMode = Schema.RequiredMode.REQUIRED,
                minimum = "1"
        )
        @NotNull(message = "Display order is required")
        @Min(value = 1, message = "Display order must be at least 1")
        @JsonProperty("display_order")
        Integer displayOrder,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the question was created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this question. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the question was last modified. Automatically updated by the system.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this question. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a human-readable category for the question type.
     *
     * @return Formatted question category
     */
    @JsonProperty(value = "question_category", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable category of the question type.",
            example = "Multiple Choice Question",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getQuestionCategory() {
        if (questionType == null) {
            return "Unknown Question Type";
        }

        return switch (questionType) {
            case MULTIPLE_CHOICE -> "Multiple Choice Question";
            case TRUE_FALSE -> "True/False Question";
            case SHORT_ANSWER -> "Short Answer Question";
            case ESSAY -> "Essay Question";
        };
    }

    /**
     * Returns a formatted display string for the points value.
     *
     * @return Formatted points display
     */
    @JsonProperty(value = "points_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable format of the points value.",
            example = "2.0 points",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getPointsDisplay() {
        if (points == null) {
            return "No points assigned";
        }

        if (points.compareTo(BigDecimal.ONE) == 0) {
            return "1 point";
        } else {
            return points.stripTrailingZeros().toPlainString() + " points";
        }
    }

    /**
     * Checks if this question type requires predefined answer options.
     *
     * @return true if question needs options (multiple choice, true/false)
     */
    @JsonProperty(value = "requires_options", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this question type requires predefined answer options.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean requiresOptions() {
        return questionType == QuestionType.MULTIPLE_CHOICE ||
                questionType == QuestionType.TRUE_FALSE;
    }

    /**
     * Returns a formatted question number for display purposes.
     *
     * @return Formatted question number
     */
    @JsonProperty(value = "question_number", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted question number for display in quiz interface.",
            example = "Question 1",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getQuestionNumber() {
        return displayOrder != null ? "Question " + displayOrder : "Question";
    }
}