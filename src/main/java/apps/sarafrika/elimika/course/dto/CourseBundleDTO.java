package apps.sarafrika.elimika.course.dto;

import apps.sarafrika.elimika.course.util.enums.ContentStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Course Bundle Data Transfer Object
 * <p>
 * Represents a course bundle in the Sarafrika Elimika system, packaging multiple courses
 * together with independent pricing and lifecycle management.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2025-01-09
 */
@Schema(
        name = "CourseBundle",
        description = "Course bundle packaging multiple courses with independent pricing and lifecycle management",
        example = """
        {
            "uuid": "b1u2n3d4-5l6e-7c8o-9u10-abcdefghijkl",
            "name": "Complete Web Development Bundle",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "description": "Comprehensive web development bundle covering frontend and backend technologies",
            "price": 299.99,
            "status": "PUBLISHED",
            "active": true,
            "validity_days": 365,
            "discount_percentage": 25.00,
            "thumbnail_url": "https://cdn.sarafrika.com/bundles/web-dev-thumb.jpg",
            "banner_url": "https://cdn.sarafrika.com/bundles/web-dev-banner.jpg",
            "created_date": "2025-01-09T12:00:00",
            "created_by": "instructor@sarafrika.com",
            "updated_date": "2025-01-09T15:30:00",
            "updated_by": "instructor@sarafrika.com",
            "is_free": false,
            "is_published": true,
            "is_draft": false,
            "course_count": 5,
            "total_value": 399.95
        }
        """
)
public record CourseBundleDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the course bundle. Auto-generated by the system.",
                example = "b1u2n3d4-5l6e-7c8o-9u10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Bundle name. Should be descriptive and engaging for potential students.",
                example = "Complete Web Development Bundle",
                requiredMode = Schema.RequiredMode.REQUIRED,
                maxLength = 255
        )
        @NotBlank(message = "Bundle name is required")
        @Size(max = 255, message = "Bundle name must not exceed 255 characters")
        @JsonProperty("name")
        String name,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor's UUID who created and owns this bundle.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[OPTIONAL]** Detailed bundle description explaining content, value proposition, and outcomes.",
                example = "Comprehensive web development bundle covering frontend and backend technologies with hands-on projects",
                maxLength = 2000,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Description must not exceed 2000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[REQUIRED]** Bundle price in the system currency. Independent of individual course prices.",
                example = "299.99",
                minimum = "0",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Bundle price is required")
        @DecimalMin(value = "0.00", message = "Price cannot be negative")
        @JsonProperty("price")
        BigDecimal price,

        @Schema(
                description = "**[REQUIRED]** Bundle publication status in the content workflow.",
                example = "published",
                requiredMode = Schema.RequiredMode.REQUIRED,
                allowableValues = {"draft", "in_review", "published", "archived"}
        )
        @NotNull(message = "Status is required")
        @JsonProperty("status")
        ContentStatus status,

        @Schema(
                description = "**[OPTIONAL]** Indicates if the bundle is actively available to students. Can only be true for published bundles.",
                example = "true",
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("active")
        Boolean active,

        @Schema(
                description = "**[OPTIONAL]** Number of days bundle access remains valid after purchase.",
                example = "365",
                minimum = "1",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1, message = "Validity days must be at least 1")
        @JsonProperty("validity_days")
        Integer validityDays,

        @Schema(
                description = "**[OPTIONAL]** Discount percentage for marketing purposes (informational only).",
                example = "25.00",
                minimum = "0",
                maximum = "100",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.00", message = "Discount percentage cannot be negative")
        @DecimalMax(value = "100.00", message = "Discount percentage cannot exceed 100%")
        @JsonProperty("discount_percentage")
        BigDecimal discountPercentage,

        @Schema(
                description = "**[OPTIONAL]** URL to bundle thumbnail image for bundle listings and previews.",
                example = "https://cdn.sarafrika.com/bundles/web-dev-thumb.jpg",
                format = "uri",
                maxLength = 500,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Thumbnail URL must not exceed 500 characters")
        @JsonProperty("thumbnail_url")
        String thumbnailUrl,

        @Schema(
                description = "**[OPTIONAL]** URL to bundle banner image for detailed bundle pages.",
                example = "https://cdn.sarafrika.com/bundles/web-dev-banner.jpg",
                format = "uri",
                maxLength = 500,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 500, message = "Banner URL must not exceed 500 characters")
        @JsonProperty("banner_url")
        String bannerUrl,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the bundle was created. Automatically set by the system.",
                example = "2025-01-09T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this bundle. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the bundle was last modified. Automatically updated by the system.",
                example = "2025-01-09T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this bundle. Used for audit trails.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Checks if the bundle is free (price is 0).
     *
     * @return true if bundle is free
     */
    @JsonProperty(value = "is_free", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the bundle is offered for free.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isFree() {
        return price != null && price.compareTo(BigDecimal.ZERO) == 0;
    }

    /**
     * Checks if the bundle is published and available to students.
     *
     * @return true if status is PUBLISHED
     */
    @JsonProperty(value = "is_published", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the bundle is published and discoverable.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isPublished() {
        return status == ContentStatus.PUBLISHED;
    }

    /**
     * Checks if the bundle is in draft status.
     *
     * @return true if status is DRAFT
     */
    @JsonProperty(value = "is_draft", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the bundle is still in draft mode.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isDraft() {
        return status == ContentStatus.DRAFT;
    }

    /**
     * Checks if the bundle is archived.
     *
     * @return true if status is ARCHIVED
     */
    @JsonProperty(value = "is_archived", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the bundle is archived and no longer available.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isArchived() {
        return status == ContentStatus.ARCHIVED;
    }

    /**
     * Checks if the bundle is in review status.
     *
     * @return true if status is IN_REVIEW
     */
    @JsonProperty(value = "is_in_review", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the bundle is currently under review.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isInReview() {
        return status == ContentStatus.IN_REVIEW;
    }

    /**
     * Returns the current lifecycle stage of the bundle.
     *
     * @return human-readable lifecycle stage
     */
    @JsonProperty(value = "lifecycle_stage", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable description of the bundle's current lifecycle stage.",
            example = "Published and Active",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getLifecycleStage() {
        if (isArchived()) {
            return "Archived";
        }
        if (isInReview()) {
            return "Under Review";
        }
        if (isPublished() && Boolean.TRUE.equals(active)) {
            return "Published and Active";
        }
        if (isPublished() && !Boolean.TRUE.equals(active)) {
            return "Published but Inactive";
        }
        if (isDraft() && Boolean.TRUE.equals(active)) {
            return "Draft and Active";
        }
        if (isDraft() && !Boolean.TRUE.equals(active)) {
            return "Draft and Inactive";
        }
        return "Unknown";
    }

    /**
     * Indicates if the bundle accepts new purchases.
     *
     * @return true if bundle is active and accepts new students
     */
    @JsonProperty(value = "accepts_new_purchases", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the bundle is currently accepting new student purchases.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean acceptsNewPurchases() {
        return Boolean.TRUE.equals(active) && isPublished();
    }
}