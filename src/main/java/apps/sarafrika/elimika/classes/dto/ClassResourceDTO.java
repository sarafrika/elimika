package apps.sarafrika.elimika.classes.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Class Resource Data Transfer Object
 * <p>
 * Represents resources associated with class definitions in the Sarafrika Elimika system.
 * Resources can include documents, links, files, and other materials that support
 * the delivery and content of a class definition.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-09-05
 */
@Schema(
        name = "ClassResource",
        description = "Resource associated with class definitions including documents, links, and supporting materials",
        example = """
        {
            "uuid": "cr123456-7890-abcd-ef01-234567890abc",
            "class_definition_uuid": "cd123456-7890-abcd-ef01-234567890abc",
            "title": "Java Programming Slides",
            "description": "Comprehensive slide deck covering all Java fundamentals and practical examples",
            "resource_type": "PRESENTATION",
            "resource_url": "https://example.com/java-slides",
            "file_path": "/resources/classes/java-programming-slides.pdf",
            "file_size": 2048576,
            "mime_type": "application/pdf",
            "is_active": true,
            "created_date": "2024-09-05T10:00:00",
            "updated_date": "2024-09-05T15:30:00",
            "created_by": "instructor@sarafrika.com",
            "updated_by": "instructor@sarafrika.com"
        }
        """
)
public record ClassResourceDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the class resource. Auto-generated by the system.",
                example = "cr123456-7890-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the class definition UUID that this resource belongs to.",
                example = "cd123456-7890-abcd-ef01-234567890abc",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Class definition UUID is required")
        @JsonProperty("class_definition_uuid")
        UUID classDefinitionUuid,

        @Schema(
                description = "**[REQUIRED]** Title of the resource for identification and display purposes.",
                example = "Java Programming Slides",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Resource title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the resource content and its relevance to the class.",
                example = "Comprehensive slide deck covering all Java fundamentals and practical examples",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Description must not exceed 2000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[OPTIONAL]** Type or category of the resource for organization and filtering.",
                example = "PRESENTATION",
                maxLength = 50,
                allowableValues = {"PRESENTATION", "DOCUMENT", "VIDEO", "AUDIO", "LINK", "ASSIGNMENT", "READING", "OTHER"},
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 50, message = "Resource type must not exceed 50 characters")
        @JsonProperty("resource_type")
        String resourceType,

        @Schema(
                description = "**[OPTIONAL]** URL if the resource is hosted externally or accessible via web link.",
                example = "https://example.com/java-slides",
                maxLength = 1000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 1000, message = "Resource URL must not exceed 1000 characters")
        @JsonProperty("resource_url")
        String resourceUrl,

        @Schema(
                description = "**[READ-ONLY]** File system path where the resource file is stored if uploaded to the system.",
                example = "/resources/classes/java-programming-slides.pdf",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "file_path", access = JsonProperty.Access.READ_ONLY)
        String filePath,

        @Schema(
                description = "**[READ-ONLY]** File size in bytes if the resource is a file stored in the system.",
                example = "2048576",
                minimum = "0",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Positive(message = "File size must be positive")
        @JsonProperty(value = "file_size", access = JsonProperty.Access.READ_ONLY)
        Long fileSize,

        @Schema(
                description = "**[READ-ONLY]** MIME type of the file if the resource is stored in the system.",
                example = "application/pdf",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "mime_type", access = JsonProperty.Access.READ_ONLY)
        String mimeType,

        @Schema(
                description = "**[OPTIONAL]** Whether this resource is currently active and available for use.",
                example = "true",
                nullable = false,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_active")
        Boolean isActive,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the class resource was first created. Automatically set by the system.",
                example = "2024-09-05T10:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the class resource was last modified. Automatically updated by the system.",
                example = "2024-09-05T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this class resource.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this class resource.",
                example = "instructor@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a human-readable formatted file size.
     *
     * @return Formatted file size string (e.g., "2.0 MB", "1.5 KB", "0 B")
     */
    @JsonProperty(value = "file_size_formatted", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable formatted file size.",
            example = "2.0 MB",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFileSizeFormatted() {
        if (fileSize == null || fileSize <= 0) {
            return "0 B";
        }

        final String[] units = {"B", "KB", "MB", "GB", "TB"};
        int unitIndex = 0;
        double size = fileSize.doubleValue();

        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }

        return String.format("%.1f %s", size, units[unitIndex]);
    }

    /**
     * Checks if this resource is a file stored in the system.
     *
     * @return true if resource has file path and size, false otherwise
     */
    @JsonProperty(value = "is_file_resource", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this resource is a file stored in the system.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isFileResource() {
        return filePath != null && !filePath.trim().isEmpty() && fileSize != null && fileSize > 0;
    }

    /**
     * Checks if this resource is an external URL.
     *
     * @return true if resource has a URL but no file path, false otherwise
     */
    @JsonProperty(value = "is_url_resource", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this resource is an external URL link.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isUrlResource() {
        return resourceUrl != null && !resourceUrl.trim().isEmpty() && 
               (filePath == null || filePath.trim().isEmpty());
    }

    /**
     * Returns the resource type display name.
     *
     * @return Formatted resource type for display purposes
     */
    @JsonProperty(value = "resource_type_display", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable display name for the resource type.",
            example = "Presentation",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getResourceTypeDisplay() {
        if (resourceType == null || resourceType.trim().isEmpty()) {
            return "Unknown";
        }
        
        // Convert to title case
        return resourceType.substring(0, 1).toUpperCase() + 
               resourceType.substring(1).toLowerCase();
    }

    /**
     * Returns the resource access method.
     *
     * @return Description of how to access this resource
     */
    @JsonProperty(value = "access_method", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Description of how to access this resource.",
            example = "File download",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getAccessMethod() {
        if (isFileResource()) {
            return "File download";
        } else if (isUrlResource()) {
            return "External link";
        } else {
            return "Not available";
        }
    }
}