package apps.sarafrika.elimika.classes.dto;

import apps.sarafrika.elimika.classes.util.enums.LocationType;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.UUID;

/**
 * Class Definition Data Transfer Object
 * <p>
 * Represents class definition templates in the Sarafrika Elimika system.
 * This defines "what" a class is, independent of "when" it occurs, including
 * content, format, capacity, and recurrence rules for the Timetabling module.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-09-05
 */
@Schema(
        name = "ClassDefinition",
        description = "Class definition template that defines what a class is, independent of scheduling",
        example = """
        {
            "uuid": "cd123456-7890-abcd-ef01-234567890abc",
            "title": "Introduction to Java Programming",
            "description": "Comprehensive introduction to Java programming covering basics, OOP concepts, and practical application development.",
            "default_instructor_uuid": "inst1234-5678-90ab-cdef-123456789abc",
            "organisation_uuid": "org12345-6789-abcd-ef01-234567890abc",
            "course_uuid": "course123-4567-89ab-cdef-123456789abc",
            "duration_minutes": 90,
            "location_type": "HYBRID",
            "max_participants": 25,
            "allow_waitlist": true,
            "recurrence_pattern_uuid": "rp123456-7890-abcd-ef01-234567890abc",
            "is_active": true,
            "created_date": "2024-09-05T10:00:00",
            "updated_date": "2024-09-05T15:30:00",
            "created_by": "admin@sarafrika.com",
            "updated_by": "admin@sarafrika.com"
        }
        """
)
public record ClassDefinitionDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the class definition. Auto-generated by the system.",
                example = "cd123456-7890-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Title of the class definition. Used for identification and display.",
                example = "Introduction to Java Programming",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Class title is required")
        @Size(max = 255, message = "Title must not exceed 255 characters")
        @JsonProperty("title")
        String title,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of the class content, objectives, and what students will learn.",
                example = "Comprehensive introduction to Java programming covering basics, OOP concepts, and practical application development.",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Description must not exceed 2000 characters")
        @JsonProperty("description")
        String description,

        @Schema(
                description = "**[REQUIRED]** Reference to the default instructor UUID for this class definition.",
                example = "inst1234-5678-90ab-cdef-123456789abc",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Default instructor UUID is required")
        @JsonProperty("default_instructor_uuid")
        UUID defaultInstructorUuid,

        @Schema(
                description = "**[OPTIONAL]** Reference to the organization UUID that owns this class definition.",
                example = "org12345-6789-abcd-ef01-234567890abc",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("organisation_uuid")
        UUID organisationUuid,

        @Schema(
                description = "**[OPTIONAL]** Reference to the course UUID if this class is part of a structured course.",
                example = "course123-4567-89ab-cdef-123456789abc",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("course_uuid")
        UUID courseUuid,

        @Schema(
                description = "**[REQUIRED]** Default start time for class sessions.",
                example = "09:00:00",
                format = "time",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Default start time is required")
        @JsonProperty("default_start_time")
        LocalTime defaultStartTime,

        @Schema(
                description = "**[REQUIRED]** Default end time for class sessions.",
                example = "10:30:00",
                format = "time",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Default end time is required")
        @JsonProperty("default_end_time")
        LocalTime defaultEndTime,

        @Schema(
                description = "**[REQUIRED]** Default delivery format for the class.",
                example = "HYBRID",
                allowableValues = {"ONLINE", "IN_PERSON", "HYBRID"},
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Location type is required")
        @JsonProperty("location_type")
        LocationType locationType,

        @Schema(
                description = "**[OPTIONAL]** Maximum number of participants allowed in the class.",
                example = "25",
                minimum = "1",
                maximum = "1000",
                nullable = false,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Positive(message = "Max participants must be positive")
        @JsonProperty("max_participants")
        Integer maxParticipants,

        @Schema(
                description = "**[OPTIONAL]** Whether to allow waitlisting when maximum capacity is reached.",
                example = "true",
                nullable = false,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("allow_waitlist")
        Boolean allowWaitlist,

        @Schema(
                description = "**[OPTIONAL]** Reference to the recurrence pattern UUID for repeating classes.",
                example = "rp123456-7890-abcd-ef01-234567890abc",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("recurrence_pattern_uuid")
        UUID recurrencePatternUuid,

        @Schema(
                description = "**[OPTIONAL]** Whether this class definition is currently active and available for scheduling.",
                example = "true",
                nullable = false,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_active")
        Boolean isActive,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the class definition was first created. Automatically set by the system.",
                example = "2024-09-05T10:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the class definition was last modified. Automatically updated by the system.",
                example = "2024-09-05T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this class definition.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this class definition.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns the computed duration in minutes based on start and end times.
     *
     * @return Duration in minutes
     */
    @JsonProperty(value = "duration_minutes", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Computed duration of the class in minutes based on start and end times.",
            example = "90",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public long getDurationMinutes() {
        if (defaultStartTime == null || defaultEndTime == null) {
            return 0;
        }
        return java.time.Duration.between(defaultStartTime, defaultEndTime).toMinutes();
    }

    /**
     * Returns a formatted duration string.
     *
     * @return Human-readable duration format (e.g., "1h 30m", "45m")
     */
    @JsonProperty(value = "duration_formatted", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable formatted duration.",
            example = "1h 30m",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDurationFormatted() {
        long durationMinutes = getDurationMinutes();
        if (durationMinutes <= 0) {
            return "0m";
        }

        long hours = durationMinutes / 60;
        long minutes = durationMinutes % 60;

        if (hours > 0 && minutes > 0) {
            return hours + "h " + minutes + "m";
        } else if (hours > 0) {
            return hours + "h";
        } else {
            return minutes + "m";
        }
    }

    /**
     * Checks if this class definition has a recurrence pattern.
     *
     * @return true if recurrence pattern is configured, false otherwise
     */
    @JsonProperty(value = "has_recurrence", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the class definition has a recurrence pattern configured.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasRecurrence() {
        return recurrencePatternUuid != null;
    }

    /**
     * Checks if this is a standalone class (not part of a course).
     *
     * @return true if not associated with a course, false otherwise
     */
    @JsonProperty(value = "is_standalone", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this is a standalone class not associated with any course.",
            example = "false",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isStandalone() {
        return courseUuid == null;
    }

    /**
     * Returns the capacity status description.
     *
     * @return Capacity description including waitlist availability
     */
    @JsonProperty(value = "capacity_info", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable capacity information including waitlist availability.",
            example = "Max 25 participants (waitlist enabled)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getCapacityInfo() {
        if (maxParticipants == null || maxParticipants <= 0) {
            return "No capacity limit";
        }

        String baseInfo = "Max " + maxParticipants + " participants";
        if (Boolean.TRUE.equals(allowWaitlist)) {
            return baseInfo + " (waitlist enabled)";
        } else {
            return baseInfo + " (no waitlist)";
        }
    }
}