package apps.sarafrika.elimika.tenancy.dto;

import apps.sarafrika.elimika.shared.utils.validation.ValidPhoneNumber;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Training Branch Data Transfer Object
 * <p>
 * Represents a training branch/location within an organisation in the Sarafrika Elimika system.
 * Contains branch-specific information including location details and point of contact information.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2025-07-09
 */
@Schema(
        name = "TrainingBranch",
        description = "Training branch information including location details and point of contact",
        example = """
                {
                    "uuid": "c1d2e3f4-g5h6-i7j8-k9l0-mnopqrstuvw",
                    "organisation_uuid": "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
                    "branch_name": "Nairobi Main Campus",
                    "address": "123 University Way, Nairobi",
                    "poc_name": "John Doe",
                    "poc_email": "john.doe@example.com",
                    "poc_telephone": "+254700000000",
                    "active": true,
                    "created_date": "2024-01-01T09:00:00",
                    "updated_date": "2024-04-15T14:30:00"
                }
                """
)
public record TrainingBranchDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the training branch. Auto-generated by the system and cannot be modified.",
                example = "c1d2e3f4-g5h6-i7j8-k9l0-mnopqrstuvw",
                format = "uuid",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** UUID of the parent organisation this branch belongs to.",
                example = "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
                format = "uuid",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Organisation UUID is required")
        @JsonProperty("organisation_uuid")
        UUID organisationUuid,

        @Schema(
                description = "**[REQUIRED]** Name of the training branch or location. Must not be blank.",
                example = "Nairobi Main Campus",
                minLength = 1,
                maxLength = 200,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Branch name is required")
        @Size(max = 200, message = "Branch name cannot exceed 200 characters")
        @JsonProperty("branch_name")
        String branchName,

        @Schema(
                description = "**[OPTIONAL]** Physical address of the training branch.",
                example = "123 University Way, Nairobi",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("address")
        String address,


        @Schema(
                description = "**[REQUIRED]** Name of the point of contact for this branch.",
                example = "John Doe",
                maxLength = 200,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "POC name is required")
        @NotBlank(message = "POC name cannot be blank")
        @Size(max = 200, message = "POC name cannot exceed 200 characters")
        @JsonProperty("poc_name")
        String pocName,

        @Schema(
                description = "**[REQUIRED]** Email address of the point of contact for this branch.",
                example = "john.doe@example.com",
                maxLength = 320,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "POC email is required")
        @Email(message = "POC email must be a valid email address")
        @JsonProperty("poc_email")
        String pocEmail,

        @Schema(
                description = "**[REQUIRED]** Telephone number of the point of contact for this branch.",
                example = "+254700000000",
                maxLength = 20,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "POC telephone is required")
        @ValidPhoneNumber(message = "POC telephone must be a valid phone number")
        @JsonProperty("poc_telephone")
        String pocTelephone,

        @Schema(
                description = "**[REQUIRED]** Indicates whether the training branch is active and operational.",
                example = "true",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @JsonProperty("active")
        boolean active,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the training branch was first created. Automatically set by the system and cannot be modified.",
                example = "2024-01-01T09:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the training branch was last updated. Automatically updated by the system on any changes and cannot be directly modified.",
                example = "2024-04-15T14:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate

) {
}