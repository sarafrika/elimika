package apps.sarafrika.elimika.tenancy.dto;

import apps.sarafrika.elimika.tenancy.enums.Gender;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Set;
import java.util.UUID;

/**
 * User Data Transfer Object
 *
 * Represents a user in the Sarafrika Elimika system with all necessary
 * personal information, authentication details, and organizational relationships.
 *
 * @author Sarafrika Team
 * @version 1.0
 * @since 2024-01-01
 */
@Schema(
        name = "User",
        description = "Complete user profile information including personal details, authentication, and organizational data",
        example = """
        {
            "uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
            "first_name": "Jane",
            "middle_name": "A.",
            "last_name": "Doe",
            "email": "jane.doe@example.com",
            "phone_number": "+254712345678",
            "profile_image_url": "https://example.com/images/jane.jpg",
            "dob": "1990-01-01",
            "username": "janedoe",
            "organisation_uuid": "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
            "active": true,
            "created_date": "2024-04-01T12:00:00",
            "modified_date": "2024-04-15T15:30:00",
            "roles": [
                {
                    "uuid": "role-uuid-1",
                    "name": "ADMIN",
                    "description": "Administrator role"
                }
            ]
        }
        """
)
public record UserDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the user. Auto-generated by the system.",
                example = "d2e6f6c4-3d44-11ee-be56-0242ac120002",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** User's given/first name. Used for display purposes and official documentation.",
                example = "Jane",
                minLength = 1,
                maxLength = 50,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "First name is required")
        @Size(max = 50, message = "First name must not exceed 50 characters")
        @JsonProperty("first_name")
        String firstName,

        @Schema(
                description = "**[OPTIONAL]** User's middle name or initial. Can be null or empty.",
                example = "A.",
                maxLength = 50,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 50, message = "Middle name must not exceed 50 characters")
        @JsonProperty("middle_name")
        String middleName,

        @Schema(
                description = "**[REQUIRED]** User's family/last name. Used for display purposes and official documentation.",
                example = "Doe",
                minLength = 1,
                maxLength = 50,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Last name is required")
        @Size(max = 50, message = "Last name must not exceed 50 characters")
        @JsonProperty("last_name")
        String lastName,

        @Schema(
                description = "**[REQUIRED]** User's primary email address. Must be unique across the system. Used for authentication and notifications.",
                example = "jane.doe@example.com",
                format = "email",
                minLength = 1,
                maxLength = 100,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Email is required")
        @Email(message = "Invalid email format")
        @Size(max = 100, message = "Email must not exceed 100 characters")
        @JsonProperty("email")
        String email,

        @Schema(
                description = "**[REQUIRED]** User's contact phone number. Should include country code for international numbers.",
                example = "+254712345678",
                minLength = 1,
                maxLength = 20,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Phone number is required")
        @Size(max = 20, message = "Phone number must not exceed 20 characters")
        @JsonProperty("phone_number")
        String phoneNumber,

        @Schema(
                description = "**[READ-ONLY]** URL to the user's profile image/avatar. Automatically generated after image upload.",
                example = "https://example.com/images/jane.jpg",
                format = "uri",
                nullable = true,
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "profile_image_url", access = JsonProperty.Access.READ_ONLY)
        String profileImageUrl,

        @Schema(
                description = "**[REQUIRED]** User's date of birth in ISO 8601 format (YYYY-MM-DD). Used for age verification and personalization.",
                example = "1990-01-01",
                format = "date",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Date of birth is required")
        @JsonProperty("dob")
        LocalDate dob,

        @Schema(
                description = "**[REQUIRED]** Unique username for system login. Must be unique across the system. Cannot be changed after creation.",
                example = "janedoe",
                minLength = 1,
                maxLength = 50,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Username is required")
        @Size(max = 50, message = "Username must not exceed 50 characters")
        @JsonProperty("username")
        String username,

        @Schema(
                description = "**[OPTIONAL]** UUID of the organization this user belongs to. Links user to their organizational context. Can be null for system administrators.",
                example = "b1c2d3e4-f5g6-h7i8-j9k0-lmnopqrstuv",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("organisation_uuid")
        UUID organisationUuid,

        @Schema(
                description = "**[REQUIRED]** Indicates whether the user account is active and can access the system. Inactive users cannot log in.",
                example = "true",
                defaultValue = "true",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @JsonProperty("active")
        boolean active,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the user account was first created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the user account was last modified. Automatically updated by the system on any changes.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "modified_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime modifiedDate,

        @Schema(
                description = "**[OPTIONAL]** Set of roles assigned to this user. Determines user permissions and access levels within the system. Can be empty for users with no specific roles.",
                example = """
                [
                    {
                        "uuid": "role-uuid-1",
                        "name": "ADMIN",
                        "description": "Administrator role with full system access"
                    },
                    {
                        "uuid": "role-uuid-2", 
                        "name": "USER",
                        "description": "Standard user role with basic access"
                    }
                ]
                """,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("roles")
        Set<RoleDTO> roles,
        @JsonProperty("gender")
        Gender gender

) {
        /**
         * Returns the user's full name by concatenating first, middle (if present), and last names.
         *
         * @return Full name as a single string
         */
        public String getFullName() {
                StringBuilder fullName = new StringBuilder(firstName);

                if (middleName != null && !middleName.trim().isEmpty()) {
                        fullName.append(" ").append(middleName.trim());
                }

                fullName.append(" ").append(lastName);

                return fullName.toString();
        }

        /**
         * Returns display name for UI purposes (first name + last name).
         *
         * @return Display name without middle name
         */
        public String getDisplayName() {
                return firstName + " " + lastName;
        }

        /**
         * Checks if the user has a specific role.
         *
         * @param roleName The role name to check
         * @return true if user has the role, false otherwise
         */
        public boolean hasRole(String roleName) {
                return roles != null && roles.stream()
                        .anyMatch(role -> roleName.equals(role.name()));
        }
}