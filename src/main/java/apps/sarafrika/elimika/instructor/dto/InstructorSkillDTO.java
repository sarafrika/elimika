package apps.sarafrika.elimika.instructor.dto;

import apps.sarafrika.elimika.instructor.util.enums.ProficiencyLevel;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Instructor Skill Data Transfer Object
 * <p>
 * Represents technical and professional skills possessed by instructors in the Sarafrika Elimika system.
 * This includes programming languages, frameworks, tools, methodologies, and other competencies
 * with proficiency levels that help match instructors to appropriate training opportunities.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "InstructorSkill",
        description = "Technical and professional skill record for instructors with proficiency levels and competency classifications",
        example = """
        {
            "uuid": "skill123-4567-89ab-cdef-0123456789ab",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "skill_name": "Java Programming",
            "proficiency_level": "EXPERT",
            "created_date": "2024-06-15T14:30:22",
            "created_by": "instructor@example.com",
            "updated_date": "2024-06-16T09:15:00",
            "updated_by": "instructor@example.com",
            "skill_category": "PROGRAMMING_LANGUAGE",
            "proficiency_description": "Expert level with 7+ years of experience",
            "proficiency_percentage": 95,
            "is_core_skill": true,
            "is_teaching_qualified": true,
            "skill_level_numeric": 4,
            "certification_recommended": false,
            "market_demand": "HIGH"
        }
        """
)
public record InstructorSkillDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the skill record. Auto-generated by the system.",
                example = "skill123-4567-89ab-cdef-0123456789ab",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor profile UUID. Links skill record to specific instructor.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[REQUIRED]** Name of the technical or professional skill. Should be specific and standardized for consistency.",
                example = "Java Programming",
                maxLength = 100,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Skill name is required")
        @Size(max = 100, message = "Skill name must not exceed 100 characters")
        @JsonProperty("skill_name")
        String skillName,

        @Schema(
                description = "**[REQUIRED]** Level of proficiency in this skill. Indicates instructor's competency and teaching capability.",
                example = "EXPERT",
                allowableValues = {"BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT"},
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Proficiency level is required")
        @JsonProperty("proficiency_level")
        ProficiencyLevel proficiencyLevel,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the skill record was first created. Automatically set by the system.",
                example = "2024-06-15T14:30:22",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this skill record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the skill record was last modified. Automatically updated by the system.",
                example = "2024-06-16T09:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this skill record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Returns a human-readable description of the proficiency level.
     *
     * @return Proficiency level description
     */
    @JsonProperty(value = "proficiency_description", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable description of the proficiency level.",
            example = "Expert level with 7+ years of experience",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getProficiencyDescription() {
        if (proficiencyLevel == null) {
            return "Unknown proficiency level";
        }

        return switch (proficiencyLevel) {
            case BEGINNER -> "Beginner level with basic understanding and limited practical experience";
            case INTERMEDIATE -> "Intermediate level with solid understanding and some practical experience";
            case ADVANCED -> "Advanced level with extensive experience and ability to handle complex scenarios";
            case EXPERT -> "Expert level with deep expertise and ability to mentor others";
        };
    }

    /**
     * Returns a formatted skill display string.
     *
     * @return Formatted skill string for display
     */
    @JsonProperty(value = "display_name", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted skill name for display in UI components.",
            example = "Java Programming (Expert)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getDisplayName() {
        if (skillName == null || proficiencyLevel == null) {
            return skillName != null ? skillName : "Unknown Skill";
        }

        return skillName + " (" + proficiencyLevel.toString().toLowerCase().replace("_", " ") + ")";
    }

    /**
     * Returns a brief summary of the skill for listings.
     *
     * @return Brief skill summary
     */
    @JsonProperty(value = "summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Brief summary of the skill for display in skill lists.",
            example = "Java Programming - Expert level, High market demand, Teaching qualified",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSummary() {
        if (skillName == null || proficiencyLevel == null) {
            return "Incomplete skill record";
        }

        return skillName + " - " + proficiencyLevel.toString().toLowerCase().replace("_", " ") + " level.";
    }
}