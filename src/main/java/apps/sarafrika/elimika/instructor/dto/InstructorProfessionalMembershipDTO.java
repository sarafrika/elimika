package apps.sarafrika.elimika.instructor.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

/**
 * Instructor Professional Membership Data Transfer Object
 * <p>
 * Represents professional body memberships and organizational affiliations for instructors in the Sarafrika Elimika system.
 * This includes memberships in professional associations, industry bodies, certification organizations,
 * and other professional affiliations that demonstrate instructor credibility and ongoing professional development.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "InstructorProfessionalMembership",
        description = "Professional membership record for instructors including associations, industry bodies, and certification organizations",
        example = """
        {
            "uuid": "mem12345-6789-abcd-ef01-234567890abc",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "organization_name": "Institute of Electrical and Electronics Engineers (IEEE)",
            "membership_number": "IEEE-92345678",
            "start_date": "2020-03-15",
            "end_date": null,
            "is_active": true,
            "created_date": "2024-06-15T14:30:22",
            "created_by": "instructor@example.com",
            "updated_date": "2024-06-16T09:15:00",
            "updated_by": "instructor@example.com",
            "membership_duration_months": 51,
            "formatted_duration": "4 years, 3 months",
            "membership_period": "Mar 2020 - Present",
            "is_long_standing_member": true,
            "has_membership_number": true,
            "membership_status": "ACTIVE",
            "organization_type": "PROFESSIONAL_INSTITUTE",
            "years_of_membership": 4.25,
            "is_recent_membership": true
        }
        """
)
public record InstructorProfessionalMembershipDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the membership record. Auto-generated by the system.",
                example = "mem12345-6789-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor profile UUID. Links membership record to specific instructor.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[REQUIRED]** Full name of the professional organization, association, or certification body.",
                example = "Institute of Electrical and Electronics Engineers (IEEE)",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Organization name is required")
        @Size(max = 255, message = "Organization name must not exceed 255 characters")
        @JsonProperty("organization_name")
        String organizationName,

        @Schema(
                description = "**[OPTIONAL]** Official membership number or identifier issued by the organization.",
                example = "IEEE-92345678",
                maxLength = 100,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 100, message = "Membership number must not exceed 100 characters")
        @JsonProperty("membership_number")
        String membershipNumber,

        @Schema(
                description = "**[OPTIONAL]** Date when the membership began or was first obtained.",
                example = "2020-03-15",
                format = "date",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("start_date")
        LocalDate startDate,

        @Schema(
                description = "**[OPTIONAL]** Date when the membership ended or expired. Should be null for active memberships.",
                example = "null",
                format = "date",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("end_date")
        LocalDate endDate,

        @Schema(
                description = "**[OPTIONAL]** Indicates whether the membership is currently active. True for active memberships, false for inactive or expired.",
                example = "true",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_active")
        Boolean isActive,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the membership record was first created. Automatically set by the system.",
                example = "2024-06-15T14:30:22",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this membership record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the membership record was last modified. Automatically updated by the system.",
                example = "2024-06-16T09:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this membership record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Calculates the duration of membership in months based on start and end dates.
     *
     * @return Duration in months, null if start date is not available
     */
    @JsonProperty(value = "membership_duration_months", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Duration of membership calculated from start and end dates, in months.",
            example = "51",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public Integer getMembershipDurationMonths() {
        if (startDate == null) {
            return null;
        }

        LocalDate effectiveEndDate = endDate != null ? endDate : LocalDate.now();
        Period period = Period.between(startDate, effectiveEndDate);

        return period.getYears() * 12 + period.getMonths();
    }

    /**
     * Returns a human-readable formatted duration string.
     *
     * @return Formatted duration (e.g., "4 years, 3 months")
     */
    @JsonProperty(value = "formatted_duration", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable formatted duration of membership.",
            example = "4 years, 3 months",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFormattedDuration() {
        Integer months = getMembershipDurationMonths();
        if (months == null) {
            return null;
        }

        int years = months / 12;
        int remainingMonths = months % 12;

        if (years == 0) {
            return remainingMonths + (remainingMonths == 1 ? " month" : " months");
        }

        if (remainingMonths == 0) {
            return years + (years == 1 ? " year" : " years");
        }

        return years + (years == 1 ? " year" : " years") + ", " +
                remainingMonths + (remainingMonths == 1 ? " month" : " months");
    }

    /**
     * Returns a formatted membership period string for display.
     *
     * @return Membership period (e.g., "Mar 2020 - Present" or "Jan 2018 - Dec 2020")
     */
    @JsonProperty(value = "membership_period", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted membership period showing start and end dates.",
            example = "Mar 2020 - Present",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getMembershipPeriod() {
        if (startDate == null) {
            return null;
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM yyyy");
        String startFormatted = startDate.format(formatter);

        if (isActive != null && isActive && endDate == null) {
            return startFormatted + " - Present";
        }

        if (endDate != null) {
            return startFormatted + " - " + endDate.format(formatter);
        }

        return startFormatted + " - Present";
    }

    /**
     * Checks if this is a long-standing membership (5+ years).
     *
     * @return true if membership duration is 5 years or more
     */
    @JsonProperty(value = "is_long_standing_member", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this membership has been held for 5 years or more.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isLongStandingMember() {
        Integer months = getMembershipDurationMonths();
        return months != null && months >= 60;
    }

    /**
     * Checks if the membership has a membership number documented.
     *
     * @return true if membership number is provided and not empty
     */
    @JsonProperty(value = "has_membership_number", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the membership has a membership number documented.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasMembershipNumber() {
        return membershipNumber != null && !membershipNumber.trim().isEmpty();
    }

    /**
     * Returns the current status of the membership.
     *
     * @return Membership status based on active flag and end date
     */
    @JsonProperty(value = "membership_status", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Current status of the membership.",
            example = "ACTIVE",
            allowableValues = {"ACTIVE", "INACTIVE", "EXPIRED", "UNKNOWN"},
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getMembershipStatus() {
        if (isActive == null) {
            return "UNKNOWN";
        }

        if (!isActive) {
            return "INACTIVE";
        }

        if (endDate != null && endDate.isBefore(LocalDate.now())) {
            return "EXPIRED";
        }

        return "ACTIVE";
    }

    /**
     * Determines the type of organization based on name keywords.
     *
     * @return Organization type classification
     */
    @JsonProperty(value = "organization_type", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Classification of organization type based on name keywords.",
            example = "PROFESSIONAL_INSTITUTE",
            allowableValues = {"PROFESSIONAL_INSTITUTE", "CERTIFICATION_BODY", "INDUSTRY_ASSOCIATION", "ACADEMIC_SOCIETY", "TRADE_ORGANIZATION", "OTHER"},
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getOrganizationType() {
        if (organizationName == null) {
            return "OTHER";
        }

        String orgLower = organizationName.toLowerCase();

        if (orgLower.contains("institute") || orgLower.contains("institution")) {
            return "PROFESSIONAL_INSTITUTE";
        }

        if (orgLower.contains("certification") || orgLower.contains("certified") ||
                orgLower.contains("accreditation")) {
            return "CERTIFICATION_BODY";
        }

        if (orgLower.contains("association") || orgLower.contains("federation") ||
                orgLower.contains("consortium")) {
            return "INDUSTRY_ASSOCIATION";
        }

        if (orgLower.contains("society") || orgLower.contains("academy") ||
                orgLower.contains("university") || orgLower.contains("college")) {
            return "ACADEMIC_SOCIETY";
        }

        if (orgLower.contains("trade") || orgLower.contains("union") ||
                orgLower.contains("guild")) {
            return "TRADE_ORGANIZATION";
        }

        return "OTHER";
    }

    /**
     * Calculates years of membership as a decimal value.
     *
     * @return Years of membership with decimal precision
     */
    @JsonProperty(value = "years_of_membership", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Years of membership calculated with decimal precision.",
            example = "4.25",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public Double getYearsOfMembership() {
        Integer months = getMembershipDurationMonths();
        if (months == null) {
            return null;
        }
        return Math.round(months / 12.0 * 100.0) / 100.0;
    }

    /**
     * Checks if this is a recent membership (started within last 3 years).
     *
     * @return true if membership started recently
     */
    @JsonProperty(value = "is_recent_membership", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this membership was started within the last 3 years.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isRecentMembership() {
        if (startDate == null) {
            return false;
        }

        LocalDate threeYearsAgo = LocalDate.now().minusYears(3);
        return startDate.isAfter(threeYearsAgo);
    }

    /**
     * Checks if the membership is currently valid and active.
     *
     * @return true if membership is active and not expired
     */
    @JsonProperty(value = "is_valid", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the membership is currently valid and active.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isValid() {
        return "ACTIVE".equals(getMembershipStatus());
    }

    /**
     * Validates if the membership record has minimum required information.
     *
     * @return true if record has organization name
     */
    @JsonProperty(value = "is_complete", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the membership record has all essential information.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isComplete() {
        return organizationName != null && !organizationName.trim().isEmpty();
    }

    /**
     * Returns a brief summary of the membership for listings.
     *
     * @return Brief membership summary
     */
    @JsonProperty(value = "summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Brief summary of the membership for display in listings.",
            example = "IEEE Member (4 years, 3 months) - Active",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSummary() {
        StringBuilder summary = new StringBuilder();

        // Extract abbreviated organization name for display
        String displayName = organizationName;
        if (organizationName.contains("(")) {
            int start = organizationName.indexOf("(");
            int end = organizationName.indexOf(")", start);
            if (end > start) {
                displayName = organizationName.substring(start + 1, end);
            }
        }

        summary.append(displayName).append(" Member");

        String duration = getFormattedDuration();
        if (duration != null) {
            summary.append(" (").append(duration).append(")");
        }

        summary.append(" - ").append(getMembershipStatus());

        return summary.toString();
    }
}