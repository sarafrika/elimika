package apps.sarafrika.elimika.instructor.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

/**
 * Instructor Experience Data Transfer Object
 * <p>
 * Represents professional work experience and employment history for instructors in the Sarafrika Elimika system.
 * This includes detailed information about positions held, organizations worked for, responsibilities,
 * and duration of employment that demonstrates instructor expertise and practical knowledge.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "InstructorExperience",
        description = "Professional work experience record for instructors including positions, organizations, responsibilities, and employment duration",
        example = """
        {
            "uuid": "exp12345-6789-abcd-ef01-234567890abc",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "position": "Senior Software Developer",
            "organization_name": "Safaricom PLC",
            "responsibilities": "Led development of mobile banking applications, mentored junior developers, implemented DevOps practices, and collaborated with cross-functional teams to deliver high-quality software solutions.",
            "years_of_experience": 5.5,
            "start_date": "2019-01-15",
            "end_date": "2024-06-30",
            "is_current_position": false,
            "created_date": "2024-06-15T14:30:22",
            "created_by": "instructor@example.com",
            "updated_date": "2024-06-16T09:15:00",
            "updated_by": "instructor@example.com",
            "duration_in_months": 66,
            "formatted_duration": "5 years, 5 months",
            "employment_period": "Jan 2019 - Jun 2024",
            "is_long_term_position": true,
            "has_responsibilities": true,
            "experience_level": "SENIOR",
            "is_recent_experience": true,
            "calculated_years": 5.46
        }
        """
)
public record InstructorExperienceDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the experience record. Auto-generated by the system.",
                example = "exp12345-6789-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor profile UUID. Links experience record to specific instructor.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[REQUIRED]** Job title or position held by the instructor in this role.",
                example = "Senior Software Developer",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Position is required")
        @Size(max = 255, message = "Position must not exceed 255 characters")
        @JsonProperty("position")
        String position,

        @Schema(
                description = "**[REQUIRED]** Name of the organization, company, or institution where the instructor worked.",
                example = "Safaricom PLC",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Organization name is required")
        @Size(max = 255, message = "Organization name must not exceed 255 characters")
        @JsonProperty("organization_name")
        String organizationName,

        @Schema(
                description = "**[OPTIONAL]** Detailed description of key responsibilities, achievements, and duties performed in this position.",
                example = "Led development of mobile banking applications, mentored junior developers, implemented DevOps practices, and collaborated with cross-functional teams to deliver high-quality software solutions.",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Responsibilities must not exceed 2000 characters")
        @JsonProperty("responsibilities")
        String responsibilities,

        @Schema(
                description = "**[OPTIONAL]** Total years of experience in this position, including fractional years for more precise representation.",
                example = "5.5",
                minimum = "0.0",
                maximum = "50.0",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "0.0", message = "Years of experience must be non-negative")
        @DecimalMax(value = "50.0", message = "Years of experience cannot exceed 50 years")
        @JsonProperty("years_of_experience")
        BigDecimal yearsOfExperience,

        @Schema(
                description = "**[OPTIONAL]** Date when employment in this position began.",
                example = "2019-01-15",
                format = "date",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("start_date")
        LocalDate startDate,

        @Schema(
                description = "**[OPTIONAL]** Date when employment in this position ended. Should be null for current positions.",
                example = "2024-06-30",
                format = "date",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("end_date")
        LocalDate endDate,

        @Schema(
                description = "**[OPTIONAL]** Indicates whether this is the instructor's current position. True for ongoing employment.",
                example = "false",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty("is_current_position")
        Boolean isCurrentPosition,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the experience record was first created. Automatically set by the system.",
                example = "2024-06-15T14:30:22",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this experience record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the experience record was last modified. Automatically updated by the system.",
                example = "2024-06-16T09:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this experience record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Calculates the duration of employment in months based on start and end dates.
     *
     * @return Duration in months, null if dates are not available
     */
    @JsonProperty(value = "duration_in_months", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Duration of employment calculated from start and end dates, in months.",
            example = "66",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public Integer getDurationInMonths() {
        if (startDate == null) {
            return null;
        }

        LocalDate effectiveEndDate = endDate != null ? endDate : LocalDate.now();
        Period period = Period.between(startDate, effectiveEndDate);

        return period.getYears() * 12 + period.getMonths();
    }

    /**
     * Returns a human-readable formatted duration string.
     *
     * @return Formatted duration (e.g., "2 years, 3 months")
     */
    @JsonProperty(value = "formatted_duration", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Human-readable formatted duration of employment.",
            example = "5 years, 5 months",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFormattedDuration() {
        Integer months = getDurationInMonths();
        if (months == null) {
            return null;
        }

        int years = months / 12;
        int remainingMonths = months % 12;

        if (years == 0) {
            return remainingMonths + (remainingMonths == 1 ? " month" : " months");
        }

        if (remainingMonths == 0) {
            return years + (years == 1 ? " year" : " years");
        }

        return years + (years == 1 ? " year" : " years") + ", " +
                remainingMonths + (remainingMonths == 1 ? " month" : " months");
    }

    /**
     * Returns a formatted employment period string for display.
     *
     * @return Employment period (e.g., "Jan 2019 - Jun 2024" or "Jan 2019 - Present")
     */
    @JsonProperty(value = "employment_period", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted employment period showing start and end dates.",
            example = "Jan 2019 - Jun 2024",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getEmploymentPeriod() {
        if (startDate == null) {
            return null;
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM yyyy");
        String startFormatted = startDate.format(formatter);

        if (isCurrentPosition != null && isCurrentPosition) {
            return startFormatted + " - Present";
        }

        if (endDate != null) {
            return startFormatted + " - " + endDate.format(formatter);
        }

        return startFormatted + " - Present";
    }

    /**
     * Checks if this is a long-term position (2+ years).
     *
     * @return true if position duration is 2 years or more
     */
    @JsonProperty(value = "is_long_term_position", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this position was held for 2 years or more.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isLongTermPosition() {
        Integer months = getDurationInMonths();
        return months != null && months >= 24;
    }

    /**
     * Checks if the position has responsibilities documented.
     *
     * @return true if responsibilities are provided and not empty
     */
    @JsonProperty(value = "has_responsibilities", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the position has responsibilities documented.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasResponsibilities() {
        return responsibilities != null && !responsibilities.trim().isEmpty();
    }

    /**
     * Determines experience level based on position title and duration.
     *
     * @return Experience level classification
     */
    @JsonProperty(value = "experience_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Classification of experience level based on position title and duration.",
            example = "SENIOR",
            allowableValues = {"ENTRY", "JUNIOR", "MID", "SENIOR", "LEAD", "EXECUTIVE"},
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getExperienceLevel() {
        if (position == null) {
            return "ENTRY";
        }

        String posLower = position.toLowerCase();

        if (posLower.contains("ceo") || posLower.contains("cto") || posLower.contains("vp") ||
                posLower.contains("director") || posLower.contains("executive")) {
            return "EXECUTIVE";
        }

        if (posLower.contains("lead") || posLower.contains("principal") ||
                posLower.contains("architect") || posLower.contains("head")) {
            return "LEAD";
        }

        if (posLower.contains("senior") || posLower.contains("sr.")) {
            return "SENIOR";
        }

        if (posLower.contains("junior") || posLower.contains("jr.") ||
                posLower.contains("trainee") || posLower.contains("intern")) {
            return "JUNIOR";
        }

        // Use duration to help classify if no clear indicators
        Integer months = getDurationInMonths();
        if (months != null) {
            if (months >= 60) return "SENIOR";  // 5+ years
            if (months >= 24) return "MID";     // 2+ years
            if (months >= 12) return "JUNIOR";  // 1+ year
        }

        return "ENTRY";
    }

    /**
     * Checks if this is recent experience (within last 5 years).
     *
     * @return true if experience is recent
     */
    @JsonProperty(value = "is_recent_experience", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this experience is recent (within the last 5 years).",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isRecentExperience() {
        if (startDate == null) {
            return false;
        }

        LocalDate fiveYearsAgo = LocalDate.now().minusYears(5);
        LocalDate effectiveEndDate = endDate != null ? endDate : LocalDate.now();

        return effectiveEndDate.isAfter(fiveYearsAgo);
    }

    /**
     * Calculates years of experience based on actual dates if available.
     *
     * @return Calculated years of experience as decimal
     */
    @JsonProperty(value = "calculated_years", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Calculated years of experience based on start and end dates.",
            example = "5.46",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public Double getCalculatedYears() {
        Integer months = getDurationInMonths();
        if (months == null) {
            return null;
        }
        return Math.round(months / 12.0 * 100.0) / 100.0;
    }

    /**
     * Validates if the experience record has minimum required information.
     *
     * @return true if record has position and organization
     */
    @JsonProperty(value = "is_complete", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the experience record has all essential information.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isComplete() {
        return position != null && !position.trim().isEmpty() &&
                organizationName != null && !organizationName.trim().isEmpty();
    }

    /**
     * Returns a brief summary of the experience for listings.
     *
     * @return Brief experience summary
     */
    @JsonProperty(value = "summary", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Brief summary of the experience for display in listings.",
            example = "Senior Software Developer at Safaricom PLC (5 years, 5 months)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getSummary() {
        StringBuilder summary = new StringBuilder(position);
        summary.append(" at ").append(organizationName);

        String duration = getFormattedDuration();
        if (duration != null) {
            summary.append(" (").append(duration).append(")");
        }

        return summary.toString();
    }
}