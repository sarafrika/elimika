package apps.sarafrika.elimika.instructor.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.time.LocalDateTime;
import java.time.Year;
import java.util.UUID;

/**
 * Instructor Education Data Transfer Object
 * <p>
 * Represents educational qualifications and academic credentials for instructors in the Sarafrika Elimika system.
 * This includes formal education records such as degrees, diplomas, certificates, and other academic achievements
 * that support instructor credibility and expertise.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2024-06-30
 */
@Schema(
        name = "InstructorEducation",
        description = "Educational qualification record for instructors including degrees, diplomas, certificates, and academic credentials",
        example = """
        {
            "uuid": "edu12345-6789-abcd-ef01-234567890abc",
            "instructor_uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "qualification": "Master of Science in Computer Science",
            "school_name": "University of Nairobi",
            "year_completed": 2020,
            "certificate_number": "MSC/CS/2020/0456",
            "created_date": "2024-06-15T14:30:22",
            "created_by": "instructor@example.com",
            "updated_date": "2024-06-16T09:15:00",
            "updated_by": "instructor@example.com",
            "is_recent_qualification": true,
            "years_since_completion": 4,
            "education_level": "POSTGRADUATE",
            "has_certificate_number": true,
            "formatted_completion": "2020 - University of Nairobi"
        }
        """
)
public record InstructorEducationDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the education record. Auto-generated by the system.",
                example = "edu12345-6789-abcd-ef01-234567890abc",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the instructor profile UUID. Links education record to specific instructor.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "Instructor UUID is required")
        @JsonProperty("instructor_uuid")
        UUID instructorUuid,

        @Schema(
                description = "**[REQUIRED]** Name or title of the academic qualification, degree, diploma, or certificate obtained.",
                example = "Master of Science in Computer Science",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "Qualification is required")
        @Size(max = 255, message = "Qualification must not exceed 255 characters")
        @JsonProperty("qualification")
        String qualification,

        @Schema(
                description = "**[REQUIRED]** Full name of the educational institution, university, college, or training organization.",
                example = "University of Nairobi",
                maxLength = 255,
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotBlank(message = "School name is required")
        @Size(max = 255, message = "School name must not exceed 255 characters")
        @JsonProperty("school_name")
        String schoolName,

        @Schema(
                description = "**[OPTIONAL]** Year when the qualification was completed or awarded. Must be a valid year not in the future.",
                example = "2020",
                minimum = "1950",
                maximum = "2030",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Min(value = 1950, message = "Year completed must be 1950 or later")
        @Max(value = 2030, message = "Year completed cannot be in the future")
        @JsonProperty("year_completed")
        Integer yearCompleted,

        @Schema(
                description = "**[OPTIONAL]** Official certificate, diploma, or degree number issued by the educational institution.",
                example = "MSC/CS/2020/0456",
                maxLength = 100,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 100, message = "Certificate number must not exceed 100 characters")
        @JsonProperty("certificate_number")
        String certificateNumber,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the education record was first created. Automatically set by the system.",
                example = "2024-06-15T14:30:22",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this education record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the education record was last modified. Automatically updated by the system.",
                example = "2024-06-16T09:15:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this education record.",
                example = "instructor@example.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

    /**
     * Checks if this is a recent qualification (completed within the last 10 years).
     *
     * @return true if qualification was completed within the last 10 years
     */
    @JsonProperty(value = "is_recent_qualification", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if this qualification was completed within the last 10 years.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isRecentQualification() {
        if (yearCompleted == null) {
            return false;
        }
        int currentYear = Year.now().getValue();
        return (currentYear - yearCompleted) <= 10;
    }

    /**
     * Returns the number of years since completion.
     *
     * @return Years since completion, null if year not provided
     */
    @JsonProperty(value = "years_since_completion", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Number of years since the qualification was completed.",
            example = "4",
            nullable = true,
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public Integer getYearsSinceCompletion() {
        if (yearCompleted == null) {
            return null;
        }
        return Year.now().getValue() - yearCompleted;
    }

    /**
     * Determines the education level based on qualification keywords.
     *
     * @return Education level classification
     */
    @JsonProperty(value = "education_level", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Classification of education level based on qualification type.",
            example = "POSTGRADUATE",
            allowableValues = {"CERTIFICATE", "DIPLOMA", "UNDERGRADUATE", "POSTGRADUATE", "DOCTORAL", "OTHER"},
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getEducationLevel() {
        if (qualification == null) {
            return "OTHER";
        }

        String qualLower = qualification.toLowerCase();

        if (qualLower.contains("phd") || qualLower.contains("doctorate") ||
                qualLower.contains("doctoral")) {
            return "DOCTORAL";
        }

        if (qualLower.contains("master") || qualLower.contains("msc") ||
                qualLower.contains("mba") || qualLower.contains("ma ") ||
                qualLower.contains("postgraduate")) {
            return "POSTGRADUATE";
        }

        if (qualLower.contains("bachelor") || qualLower.contains("bsc") ||
                qualLower.contains("ba ") || qualLower.contains("undergraduate") ||
                qualLower.contains("degree")) {
            return "UNDERGRADUATE";
        }

        if (qualLower.contains("diploma")) {
            return "DIPLOMA";
        }

        if (qualLower.contains("certificate")) {
            return "CERTIFICATE";
        }

        return "OTHER";
    }

    /**
     * Checks if the education record has a certificate number.
     *
     * @return true if certificate number is provided and not empty
     */
    @JsonProperty(value = "has_certificate_number", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the education record has a certificate number provided.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean hasCertificateNumber() {
        return certificateNumber != null && !certificateNumber.trim().isEmpty();
    }

    /**
     * Returns a formatted string combining year and school for display purposes.
     *
     * @return Formatted completion string
     */
    @JsonProperty(value = "formatted_completion", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Formatted string showing year of completion and school name.",
            example = "2020 - University of Nairobi",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFormattedCompletion() {
        if (yearCompleted == null) {
            return schoolName;
        }
        return yearCompleted + " - " + schoolName;
    }

    /**
     * Returns a comprehensive description of the education record.
     *
     * @return Full education description
     */
    @JsonProperty(value = "full_description", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Complete description combining qualification, school, and year.",
            example = "Master of Science in Computer Science from University of Nairobi (2020)",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public String getFullDescription() {
        StringBuilder description = new StringBuilder(qualification);
        description.append(" from ").append(schoolName);

        if (yearCompleted != null) {
            description.append(" (").append(yearCompleted).append(")");
        }

        return description.toString();
    }

    /**
     * Validates if the education record has minimum required information.
     *
     * @return true if record has qualification and school name
     */
    @JsonProperty(value = "is_complete", access = JsonProperty.Access.READ_ONLY)
    @Schema(
            description = "**[READ-ONLY]** Indicates if the education record has all essential information.",
            example = "true",
            accessMode = Schema.AccessMode.READ_ONLY
    )
    public boolean isComplete() {
        return qualification != null && !qualification.trim().isEmpty() &&
                schoolName != null && !schoolName.trim().isEmpty();
    }
}