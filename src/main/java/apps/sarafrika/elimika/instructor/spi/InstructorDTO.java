package apps.sarafrika.elimika.instructor.spi;

import apps.sarafrika.elimika.shared.utils.validation.ValidUrl;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Instructor Data Transfer Object
 * <p>
 * Represents an instructor profile in the Sarafrika Elimika system, extending user information
 * with instructor-specific data including geographical location for training services.
 *
 * @author Wilfred Njuguna
 * @version 1.0
 * @since 2025-06-30
 */
@Schema(
        name = "Instructor",
        description = "Instructor profile including location data for educational service delivery",
        example = """
        {
            "uuid": "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
            "user_uuid": "d2e6f6c4-3d44-11ee-be56-0242ac120002",
            "full_name": "Dr. Jane Smith",
            "latitude": -1.2921,
            "longitude": 36.8219,
            "website": "https://drjanesmith.com",
            "bio": "Experienced educator with 10+ years in software development training and mentorship.",
            "professional_headline": "Senior Software Development Instructor & Tech Consultant",
            "created_date": "2024-04-01T12:00:00",
            "created_by": "admin@sarafrika.com",
            "updated_date": "2024-04-15T15:30:00",
            "updated_by": "admin@sarafrika.com",
            "has_location_coordinates": true,
            "formatted_location": "-1.292100, 36.821900",
            "is_profile_complete": true
        }
        """
)
public record InstructorDTO(

        @Schema(
                description = "**[READ-ONLY]** Unique system identifier for the instructor profile. Auto-generated by the system.",
                example = "i1s2t3r4-5u6c-7t8o-9r10-abcdefghijkl",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "uuid", access = JsonProperty.Access.READ_ONLY)
        UUID uuid,

        @Schema(
                description = "**[REQUIRED]** Reference to the base user account UUID. Links instructor profile to user authentication and personal details.",
                example = "d2e6f6c4-3d44-11ee-be56-0242ac120002",
                requiredMode = Schema.RequiredMode.REQUIRED
        )
        @NotNull(message = "User UUID is required")
        @JsonProperty("user_uuid")
        UUID userUuid,

        @Schema(
                description = "**[READ-ONLY]** Complete name of the instructor including titles and credentials. Automatically derived from user profile and professional credentials.",
                example = "Dr. Jane Smith",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "full_name", access = JsonProperty.Access.READ_ONLY)
        String fullName,

        @Schema(
                description = "**[OPTIONAL]** Geographical latitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.",
                example = "-1.2921",
                minimum = "-90.0",
                maximum = "90.0",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "-90.0", message = "Latitude must be between -90 and 90 degrees")
        @DecimalMax(value = "90.0", message = "Latitude must be between -90 and 90 degrees")
        @JsonProperty("latitude")
        BigDecimal latitude,

        @Schema(
                description = "**[OPTIONAL]** Geographical longitude coordinate of instructor's primary training location. Used for location-based instructor matching and distance calculations.",
                example = "36.8219",
                minimum = "-180.0",
                maximum = "180.0",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @DecimalMin(value = "-180.0", message = "Longitude must be between -180 and 180 degrees")
        @DecimalMax(value = "180.0", message = "Longitude must be between -180 and 180 degrees")
        @JsonProperty("longitude")
        BigDecimal longitude,

        @Schema(
                description = "**[READ-ONLY]** Indicates whether the instructor has been verified by an administrator. True if verified, false if not verified, null if verification status is unknown or pending.",
                example = "true",
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "admin_verified", access = JsonProperty.Access.READ_ONLY)
        Boolean verified,

        @Schema(
                description = "**[OPTIONAL]** Professional website or portfolio URL. Used to showcase instructor's work, testimonials, and additional credentials.",
                example = "https://drjanesmith.com",
                format = "uri",
                maxLength = 255,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 255, message = "Website URL must not exceed 255 characters")
        @ValidUrl
        @JsonProperty("website")
        String website,

        @Schema(
                description = "**[OPTIONAL]** Professional biography describing instructor's background, expertise, teaching philosophy, and experience. Used in instructor profiles and course descriptions.",
                example = "Experienced educator with 10+ years in software development training and mentorship. Specializes in full-stack development, cloud architecture, and agile methodologies.",
                maxLength = 2000,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 2000, message = "Bio must not exceed 2000 characters")
        @JsonProperty("bio")
        String bio,

        @Schema(
                description = "**[OPTIONAL]** Professional headline or title that summarizes instructor's expertise and role. Used in search results and instructor listings.",
                example = "Senior Software Development Instructor & Tech Consultant",
                maxLength = 150,
                nullable = true,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @Size(max = 150, message = "Professional headline must not exceed 150 characters")
        @JsonProperty("professional_headline")
        String professionalHeadline,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the instructor profile was first created. Automatically set by the system.",
                example = "2024-04-01T12:00:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime createdDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who created this instructor profile. Used for audit trails and administrative purposes.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "created_by", access = JsonProperty.Access.READ_ONLY)
        String createdBy,

        @Schema(
                description = "**[READ-ONLY]** Timestamp when the instructor profile was last modified. Automatically updated by the system on any changes.",
                example = "2024-04-15T15:30:00",
                format = "date-time",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_date", access = JsonProperty.Access.READ_ONLY)
        LocalDateTime updatedDate,

        @Schema(
                description = "**[READ-ONLY]** Email or username of the user who last modified this instructor profile. Used for audit trails and administrative purposes.",
                example = "admin@sarafrika.com",
                accessMode = Schema.AccessMode.READ_ONLY,
                requiredMode = Schema.RequiredMode.NOT_REQUIRED
        )
        @JsonProperty(value = "updated_by", access = JsonProperty.Access.READ_ONLY)
        String updatedBy

) {

        /**
         * Checks if the instructor has location coordinates configured.
         *
         * @return true if both latitude and longitude are provided, false otherwise
         */
        @JsonProperty(value = "has_location_coordinates", access = JsonProperty.Access.READ_ONLY)
        @Schema(
                description = "**[READ-ONLY]** Indicates if the instructor has both latitude and longitude coordinates configured.",
                example = "true",
                accessMode = Schema.AccessMode.READ_ONLY
        )
        public boolean hasLocationCoordinates() {
                return latitude != null && longitude != null;
        }

        /**
         * Returns a formatted location string if coordinates are available.
         *
         * @return Formatted coordinate string or null if no location data
         */
        @JsonProperty(value = "formatted_location", access = JsonProperty.Access.READ_ONLY)
        @Schema(
                description = "**[READ-ONLY]** Formatted location coordinates as a string. Returns null if location coordinates are not available.",
                example = "-1.292100, 36.821900",
                nullable = true,
                accessMode = Schema.AccessMode.READ_ONLY
        )
        public String getFormattedLocation() {
                if (!hasLocationCoordinates()) {
                        return null;
                }
                return String.format("%.6f, %.6f", latitude, longitude);
        }

        /**
         * Checks if the instructor profile is considered complete based on key fields.
         *
         * @return true if instructor has bio and headline
         */
        @JsonProperty(value = "is_profile_complete", access = JsonProperty.Access.READ_ONLY)
        @Schema(
                description = "**[READ-ONLY]** Indicates if the instructor profile is considered complete. Requires bio and professional headline.",
                example = "true",
                accessMode = Schema.AccessMode.READ_ONLY
        )
        public boolean isProfileComplete() {
                return bio != null && !bio.trim().isEmpty() &&
                        professionalHeadline != null && !professionalHeadline.trim().isEmpty();
        }
}